// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_UIBuilder
#include <ru/stablex/ui/UIBuilder.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Box
#include <ru/stablex/ui/widgets/Box.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Button
#include <ru/stablex/ui/widgets/Button.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Text
#include <ru/stablex/ui/widgets/Text.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_VBox
#include <ru/stablex/ui/widgets/VBox.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_11_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",11,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_12_main,"Main","main",0xed0e206e,"Main.main","Main.hx",12,0x087e5c05)

void Main_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_11_new)
HXDLIN(  11)		super::__construct();
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Main_obj::main(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_12_main)
HXLINE(   1)		{
HXLINE(   2)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("enterFrame",f5,03,50,02),::ru::stablex::ui::UIBuilder_obj::skinQueue_dyn(),null());
HXLINE(   3)			::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("enterFrame",f5,03,50,02),::ru::stablex::ui::UIBuilder_obj::skinQueue_dyn(),null(),null(),null());
            		}
HXLINE(  14)		 ::ru::stablex::ui::widgets::VBox vbox = ( ( ::ru::stablex::ui::widgets::VBox)(::ru::stablex::ui::UIBuilder_obj::create(::hx::ClassOf< ::ru::stablex::ui::widgets::VBox >(),null(),null())) );
HXLINE(  15)		 ::ru::stablex::ui::widgets::Text text = ( ( ::ru::stablex::ui::widgets::Text)(::ru::stablex::ui::UIBuilder_obj::create(::hx::ClassOf< ::ru::stablex::ui::widgets::Text >(), ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("embededFonts",2c,e6,15,f8),true)
            			->setFixed(1,HX_("format",37,8f,8e,fd), ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("italic",f0,2e,64,06),true)
            				->setFixed(1,HX_("font",cf,5d,c0,43),::openfl::utils::Assets_obj::getFont(HX_("fonts/OpenSans-Regular.ttf",ef,a8,d1,22),null())->name)
            				->setFixed(2,HX_("color",63,71,5c,4a),16711680)
            				->setFixed(3,HX_("size",c1,a0,53,4c),18)))
            			->setFixed(2,HX_("text",ad,cc,f9,4c),HX_("Hello from openfl",58,71,70,fb))),null())) );
HXLINE(  25)		 ::ru::stablex::ui::widgets::Button button = ( ( ::ru::stablex::ui::widgets::Button)(::ru::stablex::ui::UIBuilder_obj::create(::hx::ClassOf< ::ru::stablex::ui::widgets::Button >(), ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("embededFonts",2c,e6,15,f8),true)
            			->setFixed(1,HX_("format",37,8f,8e,fd), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("font",cf,5d,c0,43),::openfl::utils::Assets_obj::getFont(HX_("fonts/OpenSans-Regular.ttf",ef,a8,d1,22),null())->name)))
            			->setFixed(2,HX_("text",ad,cc,f9,4c),HX_("HY",11,3f,00,00))),null())) );
HXLINE(  32)		vbox->addChild(text);
HXLINE(  33)		vbox->addChild(button);
HXLINE(  34)		::openfl::Lib_obj::get_current()->addChild(vbox);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

