// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_motion_easing__Elastic_ElasticEaseOut
#include <motion/easing/_Elastic/ElasticEaseOut.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_806e88acde06e66c_159_new,"motion.easing._Elastic.ElasticEaseOut","new",0xfac765aa,"motion.easing._Elastic.ElasticEaseOut.new","motion/easing/Elastic.hx",159,0x73ac9cf4)
HX_LOCAL_STACK_FRAME(_hx_pos_806e88acde06e66c_167_calculate,"motion.easing._Elastic.ElasticEaseOut","calculate",0xdb703e30,"motion.easing._Elastic.ElasticEaseOut.calculate","motion/easing/Elastic.hx",167,0x73ac9cf4)
HX_LOCAL_STACK_FRAME(_hx_pos_806e88acde06e66c_178_ease,"motion.easing._Elastic.ElasticEaseOut","ease",0x6dbb9764,"motion.easing._Elastic.ElasticEaseOut.ease","motion/easing/Elastic.hx",178,0x73ac9cf4)
namespace motion{
namespace easing{
namespace _Elastic{

void ElasticEaseOut_obj::__construct(Float a,Float p){
            	HX_STACKFRAME(&_hx_pos_806e88acde06e66c_159_new)
HXLINE( 161)		this->a = a;
HXLINE( 162)		this->p = p;
            	}

Dynamic ElasticEaseOut_obj::__CreateEmpty() { return new ElasticEaseOut_obj; }

void *ElasticEaseOut_obj::_hx_vtable = 0;

Dynamic ElasticEaseOut_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ElasticEaseOut_obj > _hx_result = new ElasticEaseOut_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ElasticEaseOut_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x30c37c62;
}

static ::motion::easing::IEasing_obj _hx_motion_easing__Elastic_ElasticEaseOut__hx_motion_easing_IEasing= {
	( Float (::hx::Object::*)(Float))&::motion::easing::_Elastic::ElasticEaseOut_obj::calculate,
	( Float (::hx::Object::*)(Float,Float,Float,Float))&::motion::easing::_Elastic::ElasticEaseOut_obj::ease,
};

void *ElasticEaseOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing__Elastic_ElasticEaseOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float ElasticEaseOut_obj::calculate(Float k){
            	HX_STACKFRAME(&_hx_pos_806e88acde06e66c_167_calculate)
HXLINE( 169)		if ((k == 0)) {
HXLINE( 169)			return ( (Float)(0) );
            		}
HXDLIN( 169)		if ((k == 1)) {
HXLINE( 169)			return ( (Float)(1) );
            		}
HXLINE( 170)		Float s;
HXLINE( 171)		if ((this->a < 1)) {
HXLINE( 171)			this->a = ( (Float)(1) );
HXDLIN( 171)			s = (this->p / ( (Float)(4) ));
            		}
            		else {
HXLINE( 172)			s = ((this->p / (( (Float)(2) ) * ::Math_obj::PI)) * ::Math_obj::asin((( (Float)(1) ) / this->a)));
            		}
HXLINE( 173)		return (((this->a * ::Math_obj::exp((((Float)-6.931471805599453) * k))) * ::Math_obj::sin((((k - s) * (( (Float)(2) ) * ::Math_obj::PI)) / this->p))) + 1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ElasticEaseOut_obj,calculate,return )

Float ElasticEaseOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_806e88acde06e66c_178_ease)
HXLINE( 180)		if ((t == 0)) {
HXLINE( 181)			return b;
            		}
HXLINE( 183)		t = (t / d);
HXDLIN( 183)		if ((t == 1)) {
HXLINE( 184)			return (b + c);
            		}
HXLINE( 186)		Float s;
HXLINE( 187)		if ((this->a < ::Math_obj::abs(c))) {
HXLINE( 188)			this->a = c;
HXLINE( 189)			s = (this->p / ( (Float)(4) ));
            		}
            		else {
HXLINE( 192)			s = ((this->p / (( (Float)(2) ) * ::Math_obj::PI)) * ::Math_obj::asin((c / this->a)));
            		}
HXLINE( 194)		return ((((this->a * ::Math_obj::exp((((Float)-6.931471805599453) * t))) * ::Math_obj::sin(((((t * d) - s) * (( (Float)(2) ) * ::Math_obj::PI)) / this->p))) + c) + b);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ElasticEaseOut_obj,ease,return )


::hx::ObjectPtr< ElasticEaseOut_obj > ElasticEaseOut_obj::__new(Float a,Float p) {
	::hx::ObjectPtr< ElasticEaseOut_obj > __this = new ElasticEaseOut_obj();
	__this->__construct(a,p);
	return __this;
}

::hx::ObjectPtr< ElasticEaseOut_obj > ElasticEaseOut_obj::__alloc(::hx::Ctx *_hx_ctx,Float a,Float p) {
	ElasticEaseOut_obj *__this = (ElasticEaseOut_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ElasticEaseOut_obj), false, "motion.easing._Elastic.ElasticEaseOut"));
	*(void **)__this = ElasticEaseOut_obj::_hx_vtable;
	__this->__construct(a,p);
	return __this;
}

ElasticEaseOut_obj::ElasticEaseOut_obj()
{
}

::hx::Val ElasticEaseOut_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return ::hx::Val( a ); }
		if (HX_FIELD_EQ(inName,"p") ) { return ::hx::Val( p ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return ::hx::Val( ease_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return ::hx::Val( calculate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ElasticEaseOut_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"p") ) { p=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ElasticEaseOut_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("a",61,00,00,00));
	outFields->push(HX_("p",70,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ElasticEaseOut_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(ElasticEaseOut_obj,a),HX_("a",61,00,00,00)},
	{::hx::fsFloat,(int)offsetof(ElasticEaseOut_obj,p),HX_("p",70,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ElasticEaseOut_obj_sStaticStorageInfo = 0;
#endif

static ::String ElasticEaseOut_obj_sMemberFields[] = {
	HX_("a",61,00,00,00),
	HX_("p",70,00,00,00),
	HX_("calculate",66,95,6a,05),
	HX_("ease",ee,8b,0c,43),
	::String(null()) };

::hx::Class ElasticEaseOut_obj::__mClass;

void ElasticEaseOut_obj::__register()
{
	ElasticEaseOut_obj _hx_dummy;
	ElasticEaseOut_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("motion.easing._Elastic.ElasticEaseOut",b8,08,2d,1b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ElasticEaseOut_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ElasticEaseOut_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ElasticEaseOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ElasticEaseOut_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
} // end namespace _Elastic
