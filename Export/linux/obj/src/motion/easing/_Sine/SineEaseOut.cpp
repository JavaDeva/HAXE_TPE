// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_motion_easing__Sine_SineEaseOut
#include <motion/easing/_Sine/SineEaseOut.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_85a96678dcd28aca_76_new,"motion.easing._Sine.SineEaseOut","new",0x5567a1d8,"motion.easing._Sine.SineEaseOut.new","motion/easing/Sine.hx",76,0xc8f9a0c6)
HX_LOCAL_STACK_FRAME(_hx_pos_85a96678dcd28aca_85_calculate,"motion.easing._Sine.SineEaseOut","calculate",0x6ec0d0de,"motion.easing._Sine.SineEaseOut.calculate","motion/easing/Sine.hx",85,0xc8f9a0c6)
HX_LOCAL_STACK_FRAME(_hx_pos_85a96678dcd28aca_92_ease,"motion.easing._Sine.SineEaseOut","ease",0x5f500376,"motion.easing._Sine.SineEaseOut.ease","motion/easing/Sine.hx",92,0xc8f9a0c6)
namespace motion{
namespace easing{
namespace _Sine{

void SineEaseOut_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_85a96678dcd28aca_76_new)
            	}

Dynamic SineEaseOut_obj::__CreateEmpty() { return new SineEaseOut_obj; }

void *SineEaseOut_obj::_hx_vtable = 0;

Dynamic SineEaseOut_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SineEaseOut_obj > _hx_result = new SineEaseOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SineEaseOut_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x43601168;
}

static ::motion::easing::IEasing_obj _hx_motion_easing__Sine_SineEaseOut__hx_motion_easing_IEasing= {
	( Float (::hx::Object::*)(Float))&::motion::easing::_Sine::SineEaseOut_obj::calculate,
	( Float (::hx::Object::*)(Float,Float,Float,Float))&::motion::easing::_Sine::SineEaseOut_obj::ease,
};

void *SineEaseOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing__Sine_SineEaseOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float SineEaseOut_obj::calculate(Float k){
            	HX_STACKFRAME(&_hx_pos_85a96678dcd28aca_85_calculate)
HXDLIN(  85)		return ::Math_obj::sin((k * (::Math_obj::PI / ( (Float)(2) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(SineEaseOut_obj,calculate,return )

Float SineEaseOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_85a96678dcd28aca_92_ease)
HXDLIN(  92)		return ((c * ::Math_obj::sin(((t / d) * (::Math_obj::PI / ( (Float)(2) ))))) + b);
            	}


HX_DEFINE_DYNAMIC_FUNC4(SineEaseOut_obj,ease,return )


::hx::ObjectPtr< SineEaseOut_obj > SineEaseOut_obj::__new() {
	::hx::ObjectPtr< SineEaseOut_obj > __this = new SineEaseOut_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< SineEaseOut_obj > SineEaseOut_obj::__alloc(::hx::Ctx *_hx_ctx) {
	SineEaseOut_obj *__this = (SineEaseOut_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SineEaseOut_obj), false, "motion.easing._Sine.SineEaseOut"));
	*(void **)__this = SineEaseOut_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SineEaseOut_obj::SineEaseOut_obj()
{
}

::hx::Val SineEaseOut_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return ::hx::Val( ease_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return ::hx::Val( calculate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SineEaseOut_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *SineEaseOut_obj_sStaticStorageInfo = 0;
#endif

static ::String SineEaseOut_obj_sMemberFields[] = {
	HX_("calculate",66,95,6a,05),
	HX_("ease",ee,8b,0c,43),
	::String(null()) };

::hx::Class SineEaseOut_obj::__mClass;

void SineEaseOut_obj::__register()
{
	SineEaseOut_obj _hx_dummy;
	SineEaseOut_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("motion.easing._Sine.SineEaseOut",e6,15,54,a4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SineEaseOut_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SineEaseOut_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SineEaseOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SineEaseOut_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
} // end namespace _Sine
