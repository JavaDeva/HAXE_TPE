// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_motion_easing_Elastic
#include <motion/easing/Elastic.h>
#endif
#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_motion_easing__Elastic_ElasticEaseIn
#include <motion/easing/_Elastic/ElasticEaseIn.h>
#endif
#ifndef INCLUDED_motion_easing__Elastic_ElasticEaseInOut
#include <motion/easing/_Elastic/ElasticEaseInOut.h>
#endif
#ifndef INCLUDED_motion_easing__Elastic_ElasticEaseOut
#include <motion/easing/_Elastic/ElasticEaseOut.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_881a8b65d06d3e96_19_easeInWith,"motion.easing.Elastic","easeInWith",0xec6b46dd,"motion.easing.Elastic.easeInWith","motion/easing/Elastic.hx",19,0x73ac9cf4)
HX_LOCAL_STACK_FRAME(_hx_pos_881a8b65d06d3e96_26_easeInOutWith,"motion.easing.Elastic","easeInOutWith",0xb428b13d,"motion.easing.Elastic.easeInOutWith","motion/easing/Elastic.hx",26,0x73ac9cf4)
HX_LOCAL_STACK_FRAME(_hx_pos_881a8b65d06d3e96_33_easeOutWith,"motion.easing.Elastic","easeOutWith",0x5e23b722,"motion.easing.Elastic.easeOutWith","motion/easing/Elastic.hx",33,0x73ac9cf4)
HX_LOCAL_STACK_FRAME(_hx_pos_881a8b65d06d3e96_12_boot,"motion.easing.Elastic","boot",0x7da1e4f6,"motion.easing.Elastic.boot","motion/easing/Elastic.hx",12,0x73ac9cf4)
HX_LOCAL_STACK_FRAME(_hx_pos_881a8b65d06d3e96_13_boot,"motion.easing.Elastic","boot",0x7da1e4f6,"motion.easing.Elastic.boot","motion/easing/Elastic.hx",13,0x73ac9cf4)
HX_LOCAL_STACK_FRAME(_hx_pos_881a8b65d06d3e96_14_boot,"motion.easing.Elastic","boot",0x7da1e4f6,"motion.easing.Elastic.boot","motion/easing/Elastic.hx",14,0x73ac9cf4)
namespace motion{
namespace easing{

void Elastic_obj::__construct() { }

Dynamic Elastic_obj::__CreateEmpty() { return new Elastic_obj; }

void *Elastic_obj::_hx_vtable = 0;

Dynamic Elastic_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Elastic_obj > _hx_result = new Elastic_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Elastic_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6d09d2ac;
}

::Dynamic Elastic_obj::easeIn;

::Dynamic Elastic_obj::easeInOut;

::Dynamic Elastic_obj::easeOut;

::Dynamic Elastic_obj::easeInWith(Float a,Float p){
            	HX_GC_STACKFRAME(&_hx_pos_881a8b65d06d3e96_19_easeInWith)
HXDLIN(  19)		return  ::motion::easing::_Elastic::ElasticEaseIn_obj::__alloc( HX_CTX ,a,p);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Elastic_obj,easeInWith,return )

::Dynamic Elastic_obj::easeInOutWith(Float a,Float p){
            	HX_GC_STACKFRAME(&_hx_pos_881a8b65d06d3e96_26_easeInOutWith)
HXDLIN(  26)		return  ::motion::easing::_Elastic::ElasticEaseInOut_obj::__alloc( HX_CTX ,a,p);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Elastic_obj,easeInOutWith,return )

::Dynamic Elastic_obj::easeOutWith(Float a,Float p){
            	HX_GC_STACKFRAME(&_hx_pos_881a8b65d06d3e96_33_easeOutWith)
HXDLIN(  33)		return  ::motion::easing::_Elastic::ElasticEaseOut_obj::__alloc( HX_CTX ,a,p);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Elastic_obj,easeOutWith,return )


Elastic_obj::Elastic_obj()
{
}

bool Elastic_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"easeIn") ) { outValue = ( easeIn ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"easeOut") ) { outValue = ( easeOut ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"easeInOut") ) { outValue = ( easeInOut ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"easeInWith") ) { outValue = easeInWith_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"easeOutWith") ) { outValue = easeOutWith_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"easeInOutWith") ) { outValue = easeInOutWith_dyn(); return true; }
	}
	return false;
}

bool Elastic_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"easeIn") ) { easeIn=ioValue.Cast< ::Dynamic >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"easeOut") ) { easeOut=ioValue.Cast< ::Dynamic >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"easeInOut") ) { easeInOut=ioValue.Cast< ::Dynamic >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Elastic_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Elastic_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Dynamic */ ,(void *) &Elastic_obj::easeIn,HX_("easeIn",73,23,3a,88)},
	{::hx::fsObject /* ::Dynamic */ ,(void *) &Elastic_obj::easeInOut,HX_("easeInOut",db,9e,bd,46)},
	{::hx::fsObject /* ::Dynamic */ ,(void *) &Elastic_obj::easeOut,HX_("easeOut",40,75,a9,aa)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Elastic_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Elastic_obj::easeIn,"easeIn");
	HX_MARK_MEMBER_NAME(Elastic_obj::easeInOut,"easeInOut");
	HX_MARK_MEMBER_NAME(Elastic_obj::easeOut,"easeOut");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Elastic_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Elastic_obj::easeIn,"easeIn");
	HX_VISIT_MEMBER_NAME(Elastic_obj::easeInOut,"easeInOut");
	HX_VISIT_MEMBER_NAME(Elastic_obj::easeOut,"easeOut");
};

#endif

::hx::Class Elastic_obj::__mClass;

static ::String Elastic_obj_sStaticFields[] = {
	HX_("easeIn",73,23,3a,88),
	HX_("easeInOut",db,9e,bd,46),
	HX_("easeOut",40,75,a9,aa),
	HX_("easeInWith",19,fb,6d,a4),
	HX_("easeInOutWith",81,4a,77,8b),
	HX_("easeOutWith",66,b7,7e,a8),
	::String(null())
};

void Elastic_obj::__register()
{
	Elastic_obj _hx_dummy;
	Elastic_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("motion.easing.Elastic",2a,b6,f1,74);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Elastic_obj::__GetStatic;
	__mClass->mSetStaticField = &Elastic_obj::__SetStatic;
	__mClass->mMarkFunc = Elastic_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Elastic_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Elastic_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Elastic_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Elastic_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Elastic_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Elastic_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_881a8b65d06d3e96_12_boot)
HXDLIN(  12)		easeIn =  ::motion::easing::_Elastic::ElasticEaseIn_obj::__alloc( HX_CTX ,((Float)0.1),((Float)0.4));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_881a8b65d06d3e96_13_boot)
HXDLIN(  13)		easeInOut =  ::motion::easing::_Elastic::ElasticEaseInOut_obj::__alloc( HX_CTX ,((Float)0.1),((Float)0.4));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_881a8b65d06d3e96_14_boot)
HXDLIN(  14)		easeOut =  ::motion::easing::_Elastic::ElasticEaseOut_obj::__alloc( HX_CTX ,((Float)0.1),((Float)0.4));
            	}
}

} // end namespace motion
} // end namespace easing
