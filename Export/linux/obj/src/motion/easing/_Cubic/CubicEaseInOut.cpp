// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_motion_easing__Cubic_CubicEaseInOut
#include <motion/easing/_Cubic/CubicEaseInOut.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_82b32a3335ab6f98_50_new,"motion.easing._Cubic.CubicEaseInOut","new",0xe7a2859b,"motion.easing._Cubic.CubicEaseInOut.new","motion/easing/Cubic.hx",50,0x157bb7df)
HX_LOCAL_STACK_FRAME(_hx_pos_82b32a3335ab6f98_59_calculate,"motion.easing._Cubic.CubicEaseInOut","calculate",0x9da168e1,"motion.easing._Cubic.CubicEaseInOut.calculate","motion/easing/Cubic.hx",59,0x157bb7df)
HX_LOCAL_STACK_FRAME(_hx_pos_82b32a3335ab6f98_66_ease,"motion.easing._Cubic.CubicEaseInOut","ease",0xc09c6a53,"motion.easing._Cubic.CubicEaseInOut.ease","motion/easing/Cubic.hx",66,0x157bb7df)
namespace motion{
namespace easing{
namespace _Cubic{

void CubicEaseInOut_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_82b32a3335ab6f98_50_new)
            	}

Dynamic CubicEaseInOut_obj::__CreateEmpty() { return new CubicEaseInOut_obj; }

void *CubicEaseInOut_obj::_hx_vtable = 0;

Dynamic CubicEaseInOut_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CubicEaseInOut_obj > _hx_result = new CubicEaseInOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CubicEaseInOut_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5b58f59d;
}

static ::motion::easing::IEasing_obj _hx_motion_easing__Cubic_CubicEaseInOut__hx_motion_easing_IEasing= {
	( Float (::hx::Object::*)(Float))&::motion::easing::_Cubic::CubicEaseInOut_obj::calculate,
	( Float (::hx::Object::*)(Float,Float,Float,Float))&::motion::easing::_Cubic::CubicEaseInOut_obj::ease,
};

void *CubicEaseInOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing__Cubic_CubicEaseInOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float CubicEaseInOut_obj::calculate(Float k){
            	HX_STACKFRAME(&_hx_pos_82b32a3335ab6f98_59_calculate)
HXDLIN(  59)		k = (k / ((Float)0.5));
HXDLIN(  59)		if ((k < 1)) {
HXDLIN(  59)			return (((((Float)0.5) * k) * k) * k);
            		}
            		else {
HXDLIN(  59)			k = (k - ( (Float)(2) ));
HXDLIN(  59)			return (((Float)0.5) * (((k * k) * k) + 2));
            		}
HXDLIN(  59)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CubicEaseInOut_obj,calculate,return )

Float CubicEaseInOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_82b32a3335ab6f98_66_ease)
HXDLIN(  66)		t = (t / (d / ( (Float)(2) )));
HXDLIN(  66)		if ((t < 1)) {
HXDLIN(  66)			return (((((c / ( (Float)(2) )) * t) * t) * t) + b);
            		}
            		else {
HXDLIN(  66)			t = (t - ( (Float)(2) ));
HXDLIN(  66)			return (((c / ( (Float)(2) )) * (((t * t) * t) + 2)) + b);
            		}
HXDLIN(  66)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC4(CubicEaseInOut_obj,ease,return )


::hx::ObjectPtr< CubicEaseInOut_obj > CubicEaseInOut_obj::__new() {
	::hx::ObjectPtr< CubicEaseInOut_obj > __this = new CubicEaseInOut_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CubicEaseInOut_obj > CubicEaseInOut_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CubicEaseInOut_obj *__this = (CubicEaseInOut_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CubicEaseInOut_obj), false, "motion.easing._Cubic.CubicEaseInOut"));
	*(void **)__this = CubicEaseInOut_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CubicEaseInOut_obj::CubicEaseInOut_obj()
{
}

::hx::Val CubicEaseInOut_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return ::hx::Val( ease_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return ::hx::Val( calculate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CubicEaseInOut_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CubicEaseInOut_obj_sStaticStorageInfo = 0;
#endif

static ::String CubicEaseInOut_obj_sMemberFields[] = {
	HX_("calculate",66,95,6a,05),
	HX_("ease",ee,8b,0c,43),
	::String(null()) };

::hx::Class CubicEaseInOut_obj::__mClass;

void CubicEaseInOut_obj::__register()
{
	CubicEaseInOut_obj _hx_dummy;
	CubicEaseInOut_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("motion.easing._Cubic.CubicEaseInOut",29,1c,bb,fb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CubicEaseInOut_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CubicEaseInOut_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CubicEaseInOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CubicEaseInOut_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
} // end namespace _Cubic
