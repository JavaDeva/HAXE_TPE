// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_motion_easing__Bounce_BounceEaseInOut
#include <motion/easing/_Bounce/BounceEaseInOut.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6a47ed9a451ae661_50_new,"motion.easing._Bounce.BounceEaseInOut","new",0x964da8d3,"motion.easing._Bounce.BounceEaseInOut.new","motion/easing/Bounce.hx",50,0xc6b45fab)
HX_LOCAL_STACK_FRAME(_hx_pos_6a47ed9a451ae661_58_calculate,"motion.easing._Bounce.BounceEaseInOut","calculate",0xa67ac619,"motion.easing._Bounce.BounceEaseInOut.calculate","motion/easing/Bounce.hx",58,0xc6b45fab)
HX_LOCAL_STACK_FRAME(_hx_pos_6a47ed9a451ae661_68_ease,"motion.easing._Bounce.BounceEaseInOut","ease",0xe7b0181b,"motion.easing._Bounce.BounceEaseInOut.ease","motion/easing/Bounce.hx",68,0xc6b45fab)
namespace motion{
namespace easing{
namespace _Bounce{

void BounceEaseInOut_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6a47ed9a451ae661_50_new)
            	}

Dynamic BounceEaseInOut_obj::__CreateEmpty() { return new BounceEaseInOut_obj; }

void *BounceEaseInOut_obj::_hx_vtable = 0;

Dynamic BounceEaseInOut_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BounceEaseInOut_obj > _hx_result = new BounceEaseInOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BounceEaseInOut_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3ee19b55;
}

static ::motion::easing::IEasing_obj _hx_motion_easing__Bounce_BounceEaseInOut__hx_motion_easing_IEasing= {
	( Float (::hx::Object::*)(Float))&::motion::easing::_Bounce::BounceEaseInOut_obj::calculate,
	( Float (::hx::Object::*)(Float,Float,Float,Float))&::motion::easing::_Bounce::BounceEaseInOut_obj::ease,
};

void *BounceEaseInOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing__Bounce_BounceEaseInOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float BounceEaseInOut_obj::calculate(Float k){
            	HX_STACKFRAME(&_hx_pos_6a47ed9a451ae661_58_calculate)
HXDLIN(  58)		if ((k < ((Float).5))) {
HXLINE(  59)			Float t = (( (Float)(1) ) - (k * ( (Float)(2) )));
HXDLIN(  59)			Float _hx_tmp;
HXDLIN(  59)			t = (t / ( (Float)(1) ));
HXDLIN(  59)			if ((t < ((Float)0.363636363636363646))) {
HXLINE(  59)				_hx_tmp = ((((Float)7.5625) * t) * t);
            			}
            			else {
HXLINE(  59)				if ((t < ((Float)0.727272727272727293))) {
HXLINE(  59)					t = (t - ((Float)0.545454545454545414));
HXDLIN(  59)					_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).75));
            				}
            				else {
HXLINE(  59)					if ((t < ((Float)0.909090909090909061))) {
HXLINE(  59)						t = (t - ((Float)0.818181818181818232));
HXDLIN(  59)						_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).9375));
            					}
            					else {
HXLINE(  59)						t = (t - ((Float)0.954545454545454586));
HXDLIN(  59)						_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).984375));
            					}
            				}
            			}
HXDLIN(  59)			return ((( (Float)(1) ) - _hx_tmp) * ((Float).5));
            		}
            		else {
HXLINE(  61)			Float t = ((k * ( (Float)(2) )) - ( (Float)(1) ));
HXDLIN(  61)			Float _hx_tmp;
HXDLIN(  61)			t = (t / ( (Float)(1) ));
HXDLIN(  61)			if ((t < ((Float)0.363636363636363646))) {
HXLINE(  61)				_hx_tmp = ((((Float)7.5625) * t) * t);
            			}
            			else {
HXLINE(  61)				if ((t < ((Float)0.727272727272727293))) {
HXLINE(  61)					t = (t - ((Float)0.545454545454545414));
HXDLIN(  61)					_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).75));
            				}
            				else {
HXLINE(  61)					if ((t < ((Float)0.909090909090909061))) {
HXLINE(  61)						t = (t - ((Float)0.818181818181818232));
HXDLIN(  61)						_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).9375));
            					}
            					else {
HXLINE(  61)						t = (t - ((Float)0.954545454545454586));
HXDLIN(  61)						_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).984375));
            					}
            				}
            			}
HXDLIN(  61)			return ((_hx_tmp * ((Float).5)) + ((Float).5));
            		}
HXLINE(  58)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BounceEaseInOut_obj,calculate,return )

Float BounceEaseInOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_6a47ed9a451ae661_68_ease)
HXDLIN(  68)		if ((t < (d / ( (Float)(2) )))) {
HXLINE(  69)			Float t1 = (d - (t * ( (Float)(2) )));
HXDLIN(  69)			Float _hx_tmp;
HXDLIN(  69)			t1 = (t1 / d);
HXDLIN(  69)			if ((t1 < ((Float)0.363636363636363646))) {
HXLINE(  69)				_hx_tmp = (c * ((((Float)7.5625) * t1) * t1));
            			}
            			else {
HXLINE(  69)				if ((t1 < ((Float)0.727272727272727293))) {
HXLINE(  69)					t1 = (t1 - ((Float)0.545454545454545414));
HXDLIN(  69)					_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).75)));
            				}
            				else {
HXLINE(  69)					if ((t1 < ((Float)0.909090909090909061))) {
HXLINE(  69)						t1 = (t1 - ((Float)0.818181818181818232));
HXDLIN(  69)						_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).9375)));
            					}
            					else {
HXLINE(  69)						t1 = (t1 - ((Float)0.954545454545454586));
HXDLIN(  69)						_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).984375)));
            					}
            				}
            			}
HXDLIN(  69)			return (((c - _hx_tmp) * ((Float).5)) + b);
            		}
            		else {
HXLINE(  71)			Float t1 = ((t * ( (Float)(2) )) - d);
HXDLIN(  71)			Float _hx_tmp;
HXDLIN(  71)			t1 = (t1 / d);
HXDLIN(  71)			if ((t1 < ((Float)0.363636363636363646))) {
HXLINE(  71)				_hx_tmp = (c * ((((Float)7.5625) * t1) * t1));
            			}
            			else {
HXLINE(  71)				if ((t1 < ((Float)0.727272727272727293))) {
HXLINE(  71)					t1 = (t1 - ((Float)0.545454545454545414));
HXDLIN(  71)					_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).75)));
            				}
            				else {
HXLINE(  71)					if ((t1 < ((Float)0.909090909090909061))) {
HXLINE(  71)						t1 = (t1 - ((Float)0.818181818181818232));
HXDLIN(  71)						_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).9375)));
            					}
            					else {
HXLINE(  71)						t1 = (t1 - ((Float)0.954545454545454586));
HXDLIN(  71)						_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).984375)));
            					}
            				}
            			}
HXDLIN(  71)			return (((_hx_tmp * ((Float).5)) + (c * ((Float).5))) + b);
            		}
HXLINE(  68)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BounceEaseInOut_obj,ease,return )


::hx::ObjectPtr< BounceEaseInOut_obj > BounceEaseInOut_obj::__new() {
	::hx::ObjectPtr< BounceEaseInOut_obj > __this = new BounceEaseInOut_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BounceEaseInOut_obj > BounceEaseInOut_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BounceEaseInOut_obj *__this = (BounceEaseInOut_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BounceEaseInOut_obj), false, "motion.easing._Bounce.BounceEaseInOut"));
	*(void **)__this = BounceEaseInOut_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BounceEaseInOut_obj::BounceEaseInOut_obj()
{
}

::hx::Val BounceEaseInOut_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return ::hx::Val( ease_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return ::hx::Val( calculate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BounceEaseInOut_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *BounceEaseInOut_obj_sStaticStorageInfo = 0;
#endif

static ::String BounceEaseInOut_obj_sMemberFields[] = {
	HX_("calculate",66,95,6a,05),
	HX_("ease",ee,8b,0c,43),
	::String(null()) };

::hx::Class BounceEaseInOut_obj::__mClass;

void BounceEaseInOut_obj::__register()
{
	BounceEaseInOut_obj _hx_dummy;
	BounceEaseInOut_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("motion.easing._Bounce.BounceEaseInOut",61,43,d6,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BounceEaseInOut_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BounceEaseInOut_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BounceEaseInOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BounceEaseInOut_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
} // end namespace _Bounce
