// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_motion_easing__Bounce_BounceEaseIn
#include <motion/easing/_Bounce/BounceEaseIn.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b1024a09096012cd_22_new,"motion.easing._Bounce.BounceEaseIn","new",0x63cf4a9f,"motion.easing._Bounce.BounceEaseIn.new","motion/easing/Bounce.hx",22,0xc6b45fab)
HX_LOCAL_STACK_FRAME(_hx_pos_b1024a09096012cd_29_calculate,"motion.easing._Bounce.BounceEaseIn","calculate",0x2d85c8e5,"motion.easing._Bounce.BounceEaseIn.calculate","motion/easing/Bounce.hx",29,0xc6b45fab)
HX_LOCAL_STACK_FRAME(_hx_pos_b1024a09096012cd_34_ease,"motion.easing._Bounce.BounceEaseIn","ease",0xeb9c08cf,"motion.easing._Bounce.BounceEaseIn.ease","motion/easing/Bounce.hx",34,0xc6b45fab)
HX_LOCAL_STACK_FRAME(_hx_pos_b1024a09096012cd_39__ease,"motion.easing._Bounce.BounceEaseIn","_ease",0xcb1b6fcc,"motion.easing._Bounce.BounceEaseIn._ease","motion/easing/Bounce.hx",39,0xc6b45fab)
namespace motion{
namespace easing{
namespace _Bounce{

void BounceEaseIn_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_b1024a09096012cd_22_new)
            	}

Dynamic BounceEaseIn_obj::__CreateEmpty() { return new BounceEaseIn_obj; }

void *BounceEaseIn_obj::_hx_vtable = 0;

Dynamic BounceEaseIn_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BounceEaseIn_obj > _hx_result = new BounceEaseIn_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BounceEaseIn_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x196b7ad5;
}

static ::motion::easing::IEasing_obj _hx_motion_easing__Bounce_BounceEaseIn__hx_motion_easing_IEasing= {
	( Float (::hx::Object::*)(Float))&::motion::easing::_Bounce::BounceEaseIn_obj::calculate,
	( Float (::hx::Object::*)(Float,Float,Float,Float))&::motion::easing::_Bounce::BounceEaseIn_obj::ease,
};

void *BounceEaseIn_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing__Bounce_BounceEaseIn__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float BounceEaseIn_obj::calculate(Float k){
            	HX_STACKFRAME(&_hx_pos_b1024a09096012cd_29_calculate)
HXDLIN(  29)		Float t = (( (Float)(1) ) - k);
HXDLIN(  29)		Float _hx_tmp;
HXDLIN(  29)		t = (t / ( (Float)(1) ));
HXDLIN(  29)		if ((t < ((Float)0.363636363636363646))) {
HXDLIN(  29)			_hx_tmp = ((((Float)7.5625) * t) * t);
            		}
            		else {
HXDLIN(  29)			if ((t < ((Float)0.727272727272727293))) {
HXDLIN(  29)				t = (t - ((Float)0.545454545454545414));
HXDLIN(  29)				_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).75));
            			}
            			else {
HXDLIN(  29)				if ((t < ((Float)0.909090909090909061))) {
HXDLIN(  29)					t = (t - ((Float)0.818181818181818232));
HXDLIN(  29)					_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).9375));
            				}
            				else {
HXDLIN(  29)					t = (t - ((Float)0.954545454545454586));
HXDLIN(  29)					_hx_tmp = (((((Float)7.5625) * t) * t) + ((Float).984375));
            				}
            			}
            		}
HXDLIN(  29)		return (( (Float)(1) ) - _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BounceEaseIn_obj,calculate,return )

Float BounceEaseIn_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_b1024a09096012cd_34_ease)
HXDLIN(  34)		Float t1 = (d - t);
HXDLIN(  34)		Float _hx_tmp;
HXDLIN(  34)		t1 = (t1 / d);
HXDLIN(  34)		if ((t1 < ((Float)0.363636363636363646))) {
HXDLIN(  34)			_hx_tmp = (c * ((((Float)7.5625) * t1) * t1));
            		}
            		else {
HXDLIN(  34)			if ((t1 < ((Float)0.727272727272727293))) {
HXDLIN(  34)				t1 = (t1 - ((Float)0.545454545454545414));
HXDLIN(  34)				_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).75)));
            			}
            			else {
HXDLIN(  34)				if ((t1 < ((Float)0.909090909090909061))) {
HXDLIN(  34)					t1 = (t1 - ((Float)0.818181818181818232));
HXDLIN(  34)					_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).9375)));
            				}
            				else {
HXDLIN(  34)					t1 = (t1 - ((Float)0.954545454545454586));
HXDLIN(  34)					_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).984375)));
            				}
            			}
            		}
HXDLIN(  34)		return ((c - _hx_tmp) + b);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BounceEaseIn_obj,ease,return )

Float BounceEaseIn_obj::_ease(Float t,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_b1024a09096012cd_39__ease)
HXDLIN(  39)		Float t1 = (d - t);
HXDLIN(  39)		Float _hx_tmp;
HXDLIN(  39)		t1 = (t1 / d);
HXDLIN(  39)		if ((t1 < ((Float)0.363636363636363646))) {
HXDLIN(  39)			_hx_tmp = (c * ((((Float)7.5625) * t1) * t1));
            		}
            		else {
HXDLIN(  39)			if ((t1 < ((Float)0.727272727272727293))) {
HXDLIN(  39)				t1 = (t1 - ((Float)0.545454545454545414));
HXDLIN(  39)				_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).75)));
            			}
            			else {
HXDLIN(  39)				if ((t1 < ((Float)0.909090909090909061))) {
HXDLIN(  39)					t1 = (t1 - ((Float)0.818181818181818232));
HXDLIN(  39)					_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).9375)));
            				}
            				else {
HXDLIN(  39)					t1 = (t1 - ((Float)0.954545454545454586));
HXDLIN(  39)					_hx_tmp = (c * (((((Float)7.5625) * t1) * t1) + ((Float).984375)));
            				}
            			}
            		}
HXDLIN(  39)		return ((c - _hx_tmp) + b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(BounceEaseIn_obj,_ease,return )


::hx::ObjectPtr< BounceEaseIn_obj > BounceEaseIn_obj::__new() {
	::hx::ObjectPtr< BounceEaseIn_obj > __this = new BounceEaseIn_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BounceEaseIn_obj > BounceEaseIn_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BounceEaseIn_obj *__this = (BounceEaseIn_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BounceEaseIn_obj), false, "motion.easing._Bounce.BounceEaseIn"));
	*(void **)__this = BounceEaseIn_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BounceEaseIn_obj::BounceEaseIn_obj()
{
}

::hx::Val BounceEaseIn_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return ::hx::Val( ease_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return ::hx::Val( calculate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BounceEaseIn_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_ease") ) { outValue = _ease_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BounceEaseIn_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *BounceEaseIn_obj_sStaticStorageInfo = 0;
#endif

static ::String BounceEaseIn_obj_sMemberFields[] = {
	HX_("calculate",66,95,6a,05),
	HX_("ease",ee,8b,0c,43),
	::String(null()) };

::hx::Class BounceEaseIn_obj::__mClass;

static ::String BounceEaseIn_obj_sStaticFields[] = {
	HX_("_ease",cd,a7,1d,f6),
	::String(null())
};

void BounceEaseIn_obj::__register()
{
	BounceEaseIn_obj _hx_dummy;
	BounceEaseIn_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("motion.easing._Bounce.BounceEaseIn",2d,0f,58,cd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BounceEaseIn_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BounceEaseIn_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BounceEaseIn_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BounceEaseIn_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BounceEaseIn_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BounceEaseIn_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
} // end namespace _Bounce
