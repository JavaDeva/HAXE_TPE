// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_motion_easing_IEasing
#include <motion/easing/IEasing.h>
#endif
#ifndef INCLUDED_motion_easing__Bounce_BounceEaseOut
#include <motion/easing/_Bounce/BounceEaseOut.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_99ad655a82d6ca0a_82_new,"motion.easing._Bounce.BounceEaseOut","new",0xdb580838,"motion.easing._Bounce.BounceEaseOut.new","motion/easing/Bounce.hx",82,0xc6b45fab)
HX_LOCAL_STACK_FRAME(_hx_pos_99ad655a82d6ca0a_90_calculate,"motion.easing._Bounce.BounceEaseOut","calculate",0x2e0e3f3e,"motion.easing._Bounce.BounceEaseOut.calculate","motion/easing/Bounce.hx",90,0xc6b45fab)
HX_LOCAL_STACK_FRAME(_hx_pos_99ad655a82d6ca0a_97_ease,"motion.easing._Bounce.BounceEaseOut","ease",0x0bb93116,"motion.easing._Bounce.BounceEaseOut.ease","motion/easing/Bounce.hx",97,0xc6b45fab)
HX_LOCAL_STACK_FRAME(_hx_pos_99ad655a82d6ca0a_102__ease,"motion.easing._Bounce.BounceEaseOut","_ease",0xc48185a5,"motion.easing._Bounce.BounceEaseOut._ease","motion/easing/Bounce.hx",102,0xc6b45fab)
namespace motion{
namespace easing{
namespace _Bounce{

void BounceEaseOut_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_99ad655a82d6ca0a_82_new)
            	}

Dynamic BounceEaseOut_obj::__CreateEmpty() { return new BounceEaseOut_obj; }

void *BounceEaseOut_obj::_hx_vtable = 0;

Dynamic BounceEaseOut_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BounceEaseOut_obj > _hx_result = new BounceEaseOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BounceEaseOut_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x24a4939e;
}

static ::motion::easing::IEasing_obj _hx_motion_easing__Bounce_BounceEaseOut__hx_motion_easing_IEasing= {
	( Float (::hx::Object::*)(Float))&::motion::easing::_Bounce::BounceEaseOut_obj::calculate,
	( Float (::hx::Object::*)(Float,Float,Float,Float))&::motion::easing::_Bounce::BounceEaseOut_obj::ease,
};

void *BounceEaseOut_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x864e8b53: return &_hx_motion_easing__Bounce_BounceEaseOut__hx_motion_easing_IEasing;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float BounceEaseOut_obj::calculate(Float k){
            	HX_STACKFRAME(&_hx_pos_99ad655a82d6ca0a_90_calculate)
HXDLIN(  90)		Float t = k;
HXDLIN(  90)		t = (t / ( (Float)(1) ));
HXDLIN(  90)		if ((t < ((Float)0.363636363636363646))) {
HXDLIN(  90)			return ((((Float)7.5625) * t) * t);
            		}
            		else {
HXDLIN(  90)			if ((t < ((Float)0.727272727272727293))) {
HXDLIN(  90)				t = (t - ((Float)0.545454545454545414));
HXDLIN(  90)				return (((((Float)7.5625) * t) * t) + ((Float).75));
            			}
            			else {
HXDLIN(  90)				if ((t < ((Float)0.909090909090909061))) {
HXDLIN(  90)					t = (t - ((Float)0.818181818181818232));
HXDLIN(  90)					return (((((Float)7.5625) * t) * t) + ((Float).9375));
            				}
            				else {
HXDLIN(  90)					t = (t - ((Float)0.954545454545454586));
HXDLIN(  90)					return (((((Float)7.5625) * t) * t) + ((Float).984375));
            				}
            			}
            		}
HXDLIN(  90)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BounceEaseOut_obj,calculate,return )

Float BounceEaseOut_obj::ease(Float t,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_99ad655a82d6ca0a_97_ease)
HXDLIN(  97)		Float t1 = t;
HXDLIN(  97)		t1 = (t1 / d);
HXDLIN(  97)		if ((t1 < ((Float)0.363636363636363646))) {
HXDLIN(  97)			return ((c * ((((Float)7.5625) * t1) * t1)) + b);
            		}
            		else {
HXDLIN(  97)			if ((t1 < ((Float)0.727272727272727293))) {
HXDLIN(  97)				t1 = (t1 - ((Float)0.545454545454545414));
HXDLIN(  97)				return ((c * (((((Float)7.5625) * t1) * t1) + ((Float).75))) + b);
            			}
            			else {
HXDLIN(  97)				if ((t1 < ((Float)0.909090909090909061))) {
HXDLIN(  97)					t1 = (t1 - ((Float)0.818181818181818232));
HXDLIN(  97)					return ((c * (((((Float)7.5625) * t1) * t1) + ((Float).9375))) + b);
            				}
            				else {
HXDLIN(  97)					t1 = (t1 - ((Float)0.954545454545454586));
HXDLIN(  97)					return ((c * (((((Float)7.5625) * t1) * t1) + ((Float).984375))) + b);
            				}
            			}
            		}
HXDLIN(  97)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BounceEaseOut_obj,ease,return )

Float BounceEaseOut_obj::_ease(Float t,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_99ad655a82d6ca0a_102__ease)
HXDLIN( 102)		t = (t / d);
HXDLIN( 102)		if ((t < ((Float)0.363636363636363646))) {
HXLINE( 103)			return ((c * ((((Float)7.5625) * t) * t)) + b);
            		}
            		else {
HXLINE( 104)			if ((t < ((Float)0.727272727272727293))) {
HXLINE( 105)				t = (t - ((Float)0.545454545454545414));
HXDLIN( 105)				return ((c * (((((Float)7.5625) * t) * t) + ((Float).75))) + b);
            			}
            			else {
HXLINE( 106)				if ((t < ((Float)0.909090909090909061))) {
HXLINE( 107)					t = (t - ((Float)0.818181818181818232));
HXDLIN( 107)					return ((c * (((((Float)7.5625) * t) * t) + ((Float).9375))) + b);
            				}
            				else {
HXLINE( 109)					t = (t - ((Float)0.954545454545454586));
HXDLIN( 109)					return ((c * (((((Float)7.5625) * t) * t) + ((Float).984375))) + b);
            				}
            			}
            		}
HXLINE( 102)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(BounceEaseOut_obj,_ease,return )


::hx::ObjectPtr< BounceEaseOut_obj > BounceEaseOut_obj::__new() {
	::hx::ObjectPtr< BounceEaseOut_obj > __this = new BounceEaseOut_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BounceEaseOut_obj > BounceEaseOut_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BounceEaseOut_obj *__this = (BounceEaseOut_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BounceEaseOut_obj), false, "motion.easing._Bounce.BounceEaseOut"));
	*(void **)__this = BounceEaseOut_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BounceEaseOut_obj::BounceEaseOut_obj()
{
}

::hx::Val BounceEaseOut_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return ::hx::Val( ease_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"calculate") ) { return ::hx::Val( calculate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BounceEaseOut_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_ease") ) { outValue = _ease_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BounceEaseOut_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *BounceEaseOut_obj_sStaticStorageInfo = 0;
#endif

static ::String BounceEaseOut_obj_sMemberFields[] = {
	HX_("calculate",66,95,6a,05),
	HX_("ease",ee,8b,0c,43),
	::String(null()) };

::hx::Class BounceEaseOut_obj::__mClass;

static ::String BounceEaseOut_obj_sStaticFields[] = {
	HX_("_ease",cd,a7,1d,f6),
	::String(null())
};

void BounceEaseOut_obj::__register()
{
	BounceEaseOut_obj _hx_dummy;
	BounceEaseOut_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("motion.easing._Bounce.BounceEaseOut",46,cc,b9,df);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BounceEaseOut_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BounceEaseOut_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BounceEaseOut_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BounceEaseOut_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BounceEaseOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BounceEaseOut_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace motion
} // end namespace easing
} // end namespace _Bounce
