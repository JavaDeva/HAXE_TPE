// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_skins_Skin
#include <ru/stablex/ui/skins/Skin.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1d3d7242d20dff3a_14_new,"ru.stablex.ui.skins.Skin","new",0x6e02fd45,"ru.stablex.ui.skins.Skin.new","ru/stablex/ui/skins/Skin.hx",14,0x6ccbe44b)
HX_LOCAL_STACK_FRAME(_hx_pos_1d3d7242d20dff3a_30_apply,"ru.stablex.ui.skins.Skin","apply",0xbdbb7593,"ru.stablex.ui.skins.Skin.apply","ru/stablex/ui/skins/Skin.hx",30,0x6ccbe44b)
HX_LOCAL_STACK_FRAME(_hx_pos_1d3d7242d20dff3a_53_draw,"ru.stablex.ui.skins.Skin","draw",0xce08477f,"ru.stablex.ui.skins.Skin.draw","ru/stablex/ui/skins/Skin.hx",53,0x6ccbe44b)
HX_LOCAL_STACK_FRAME(_hx_pos_1d3d7242d20dff3a_60_unDraw,"ru.stablex.ui.skins.Skin","unDraw",0x01908f38,"ru.stablex.ui.skins.Skin.unDraw","ru/stablex/ui/skins/Skin.hx",60,0x6ccbe44b)
HX_LOCAL_STACK_FRAME(_hx_pos_1d3d7242d20dff3a_67_reDraw,"ru.stablex.ui.skins.Skin","reDraw",0x9fe34192,"ru.stablex.ui.skins.Skin.reDraw","ru/stablex/ui/skins/Skin.hx",67,0x6ccbe44b)
HX_LOCAL_STACK_FRAME(_hx_pos_1d3d7242d20dff3a_78_as,"ru.stablex.ui.skins.Skin","as",0xe4f10bad,"ru.stablex.ui.skins.Skin.as","ru/stablex/ui/skins/Skin.hx",78,0x6ccbe44b)
namespace ru{
namespace stablex{
namespace ui{
namespace skins{

void Skin_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1d3d7242d20dff3a_14_new)
HXDLIN(  14)		this->clear = true;
            	}

Dynamic Skin_obj::__CreateEmpty() { return new Skin_obj; }

void *Skin_obj::_hx_vtable = 0;

Dynamic Skin_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Skin_obj > _hx_result = new Skin_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Skin_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x52aafbe5;
}

void Skin_obj::apply( ::ru::stablex::ui::widgets::Widget w){
            	HX_STACKFRAME(&_hx_pos_1d3d7242d20dff3a_30_apply)
HXLINE(  31)		if (this->clear) {
HXLINE(  32)			w->get_graphics()->clear();
            		}
HXLINE(  35)		if (::hx::IsNotNull( w->_appliedSkin )) {
HXLINE(  36)			if (::hx::IsEq( w->_appliedSkin,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  37)				this->reDraw(w);
            			}
            			else {
HXLINE(  39)				w->_appliedSkin->unDraw(w);
HXLINE(  40)				this->draw(w);
            			}
            		}
            		else {
HXLINE(  43)			this->draw(w);
            		}
HXLINE(  45)		w->_appliedSkin = ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Skin_obj,apply,(void))

void Skin_obj::draw( ::ru::stablex::ui::widgets::Widget w){
            	HX_STACKFRAME(&_hx_pos_1d3d7242d20dff3a_53_draw)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Skin_obj,draw,(void))

void Skin_obj::unDraw( ::ru::stablex::ui::widgets::Widget w){
            	HX_STACKFRAME(&_hx_pos_1d3d7242d20dff3a_60_unDraw)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Skin_obj,unDraw,(void))

void Skin_obj::reDraw( ::ru::stablex::ui::widgets::Widget w){
            	HX_STACKFRAME(&_hx_pos_1d3d7242d20dff3a_67_reDraw)
HXLINE(  68)		this->unDraw(w);
HXLINE(  69)		this->draw(w);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Skin_obj,reDraw,(void))

 ::Dynamic Skin_obj::as(::hx::Class cls){
            	HX_STACKFRAME(&_hx_pos_1d3d7242d20dff3a_78_as)
HXDLIN(  78)		if (::Std_obj::isOfType(::hx::ObjectPtr<OBJ_>(this),( ( ::Dynamic)(cls) ))) {
HXDLIN(  78)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXDLIN(  78)			return null();
            		}
HXDLIN(  78)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Skin_obj,as,return )


::hx::ObjectPtr< Skin_obj > Skin_obj::__new() {
	::hx::ObjectPtr< Skin_obj > __this = new Skin_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Skin_obj > Skin_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Skin_obj *__this = (Skin_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Skin_obj), false, "ru.stablex.ui.skins.Skin"));
	*(void **)__this = Skin_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Skin_obj::Skin_obj()
{
}

::hx::Val Skin_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"as") ) { return ::hx::Val( as_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear ); }
		if (HX_FIELD_EQ(inName,"apply") ) { return ::hx::Val( apply_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"unDraw") ) { return ::hx::Val( unDraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"reDraw") ) { return ::hx::Val( reDraw_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Skin_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { clear=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Skin_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("clear",8d,71,5b,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Skin_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Skin_obj,clear),HX_("clear",8d,71,5b,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Skin_obj_sStaticStorageInfo = 0;
#endif

static ::String Skin_obj_sMemberFields[] = {
	HX_("clear",8d,71,5b,48),
	HX_("apply",6e,85,3b,24),
	HX_("draw",04,2c,70,42),
	HX_("unDraw",fd,5e,1e,4b),
	HX_("reDraw",57,11,71,e9),
	HX_("as",f2,54,00,00),
	::String(null()) };

::hx::Class Skin_obj::__mClass;

void Skin_obj::__register()
{
	Skin_obj _hx_dummy;
	Skin_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ru.stablex.ui.skins.Skin",d3,f6,87,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Skin_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Skin_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Skin_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Skin_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
} // end namespace skins
