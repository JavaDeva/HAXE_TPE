// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_UIBuilder
#include <ru/stablex/ui/UIBuilder.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_events_WidgetEvent
#include <ru/stablex/ui/events/WidgetEvent.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_layouts_Layout
#include <ru/stablex/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_skins_Skin
#include <ru/stablex/ui/skins/Skin.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Box
#include <ru/stablex/ui/widgets/Box.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Floating
#include <ru/stablex/ui/widgets/Floating.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Tip
#include <ru/stablex/ui/widgets/Tip.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_22_new,"ru.stablex.ui.widgets.Widget","new",0x9d7992d3,"ru.stablex.ui.widgets.Widget.new","ru/stablex/ui/widgets/Widget.hx",22,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_159__onInitialize,"ru.stablex.ui.widgets.Widget","_onInitialize",0x7603d661,"ru.stablex.ui.widgets.Widget._onInitialize","ru/stablex/ui/widgets/Widget.hx",159,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_170_onInitialize,"ru.stablex.ui.widgets.Widget","onInitialize",0xab84aa7c,"ru.stablex.ui.widgets.Widget.onInitialize","ru/stablex/ui/widgets/Widget.hx",170,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_180__onCreate,"ru.stablex.ui.widgets.Widget","_onCreate",0x1c59ef8d,"ru.stablex.ui.widgets.Widget._onCreate","ru/stablex/ui/widgets/Widget.hx",180,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_200_onCreate,"ru.stablex.ui.widgets.Widget","onCreate",0x2f81da28,"ru.stablex.ui.widgets.Widget.onCreate","ru/stablex/ui/widgets/Widget.hx",200,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_209_free,"ru.stablex.ui.widgets.Widget","free",0x27a6fed9,"ru.stablex.ui.widgets.Widget.free","ru/stablex/ui/widgets/Widget.hx",209,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_225_applySkin,"ru.stablex.ui.widgets.Widget","applySkin",0xaf2bb1be,"ru.stablex.ui.widgets.Widget.applySkin","ru/stablex/ui/widgets/Widget.hx",225,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_236_applyLayout,"ru.stablex.ui.widgets.Widget","applyLayout",0x12dd5c2b,"ru.stablex.ui.widgets.Widget.applyLayout","ru/stablex/ui/widgets/Widget.hx",236,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_246_refresh,"ru.stablex.ui.widgets.Widget","refresh",0x746451ce,"ru.stablex.ui.widgets.Widget.refresh","ru/stablex/ui/widgets/Widget.hx",246,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_257__newParent,"ru.stablex.ui.widgets.Widget","_newParent",0x74710f58,"ru.stablex.ui.widgets.Widget._newParent","ru/stablex/ui/widgets/Widget.hx",257,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_265__resizeWithPercent,"ru.stablex.ui.widgets.Widget","_resizeWithPercent",0x5e81bf79,"ru.stablex.ui.widgets.Widget._resizeWithPercent","ru/stablex/ui/widgets/Widget.hx",265,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_292_onNewParent,"ru.stablex.ui.widgets.Widget","onNewParent",0x4b9ba1fe,"ru.stablex.ui.widgets.Widget.onNewParent","ru/stablex/ui/widgets/Widget.hx",292,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_327__onParentResize,"ru.stablex.ui.widgets.Widget","_onParentResize",0x036dda0f,"ru.stablex.ui.widgets.Widget._onParentResize","ru/stablex/ui/widgets/Widget.hx",327,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_361_resize,"ru.stablex.ui.widgets.Widget","resize",0xf7de6161,"ru.stablex.ui.widgets.Widget.resize","ru/stablex/ui/widgets/Widget.hx",361,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_386__onResize,"ru.stablex.ui.widgets.Widget","_onResize",0xa8c5e285,"ru.stablex.ui.widgets.Widget._onResize","ru/stablex/ui/widgets/Widget.hx",386,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_434_onResize,"ru.stablex.ui.widgets.Widget","onResize",0xbbedcd20,"ru.stablex.ui.widgets.Widget.onResize","ru/stablex/ui/widgets/Widget.hx",434,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_442_addChild,"ru.stablex.ui.widgets.Widget","addChild",0x92dc4c68,"ru.stablex.ui.widgets.Widget.addChild","ru/stablex/ui/widgets/Widget.hx",442,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_461_addChildAt,"ru.stablex.ui.widgets.Widget","addChildAt",0x3bd66f7b,"ru.stablex.ui.widgets.Widget.addChildAt","ru/stablex/ui/widgets/Widget.hx",461,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_480_removeChild,"ru.stablex.ui.widgets.Widget","removeChild",0xc217742b,"ru.stablex.ui.widgets.Widget.removeChild","ru/stablex/ui/widgets/Widget.hx",480,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_494_removeChildAt,"ru.stablex.ui.widgets.Widget","removeChildAt",0x0dfd4dfe,"ru.stablex.ui.widgets.Widget.removeChildAt","ru/stablex/ui/widgets/Widget.hx",494,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_509_getChildAs,"ru.stablex.ui.widgets.Widget","getChildAs",0x23adc9a5,"ru.stablex.ui.widgets.Widget.getChildAs","ru/stablex/ui/widgets/Widget.hx",509,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_520_getChild,"ru.stablex.ui.widgets.Widget","getChild",0x795635d3,"ru.stablex.ui.widgets.Widget.getChild","ru/stablex/ui/widgets/Widget.hx",520,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_528__findChildWidget,"ru.stablex.ui.widgets.Widget","_findChildWidget",0x2226cef5,"ru.stablex.ui.widgets.Widget._findChildWidget","ru/stablex/ui/widgets/Widget.hx",528,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_554_getParent,"ru.stablex.ui.widgets.Widget","getParent",0xe2dc2913,"ru.stablex.ui.widgets.Widget.getParent","ru/stablex/ui/widgets/Widget.hx",554,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_569_getParentAs,"ru.stablex.ui.widgets.Widget","getParentAs",0x71070ce5,"ru.stablex.ui.widgets.Widget.getParentAs","ru/stablex/ui/widgets/Widget.hx",569,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_584_getNearestParent,"ru.stablex.ui.widgets.Widget","getNearestParent",0xca46475f,"ru.stablex.ui.widgets.Widget.getNearestParent","ru/stablex/ui/widgets/Widget.hx",584,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_601_as,"ru.stablex.ui.widgets.Widget","as",0xe1b5e1df,"ru.stablex.ui.widgets.Widget.as","ru/stablex/ui/widgets/Widget.hx",601,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_612_set_overflow,"ru.stablex.ui.widgets.Widget","set_overflow",0xf1d491ec,"ru.stablex.ui.widgets.Widget.set_overflow","ru/stablex/ui/widgets/Widget.hx",612,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_627_set_skinName,"ru.stablex.ui.widgets.Widget","set_skinName",0x491fe612,"ru.stablex.ui.widgets.Widget.set_skinName","ru/stablex/ui/widgets/Widget.hx",627,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_639_get_wparent,"ru.stablex.ui.widgets.Widget","get_wparent",0x461c866b,"ru.stablex.ui.widgets.Widget.get_wparent","ru/stablex/ui/widgets/Widget.hx",639,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_651_set_left,"ru.stablex.ui.widgets.Widget","set_left",0x498d99b1,"ru.stablex.ui.widgets.Widget.set_left","ru/stablex/ui/widgets/Widget.hx",651,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_663_get_left,"ru.stablex.ui.widgets.Widget","get_left",0x9b30403d,"ru.stablex.ui.widgets.Widget.get_left","ru/stablex/ui/widgets/Widget.hx",663,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_671_set_right,"ru.stablex.ui.widgets.Widget","set_right",0x8965eef2,"ru.stablex.ui.widgets.Widget.set_right","ru/stablex/ui/widgets/Widget.hx",671,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_684_get_right,"ru.stablex.ui.widgets.Widget","get_right",0xa61502e6,"ru.stablex.ui.widgets.Widget.get_right","ru/stablex/ui/widgets/Widget.hx",684,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_701_set_leftPt,"ru.stablex.ui.widgets.Widget","set_leftPt",0xfb6c6e15,"ru.stablex.ui.widgets.Widget.set_leftPt","ru/stablex/ui/widgets/Widget.hx",701,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_716_get_leftPt,"ru.stablex.ui.widgets.Widget","get_leftPt",0xf7eecfa1,"ru.stablex.ui.widgets.Widget.get_leftPt","ru/stablex/ui/widgets/Widget.hx",716,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_733_set_rightPt,"ru.stablex.ui.widgets.Widget","set_rightPt",0x21f55596,"ru.stablex.ui.widgets.Widget.set_rightPt","ru/stablex/ui/widgets/Widget.hx",733,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_748_get_rightPt,"ru.stablex.ui.widgets.Widget","get_rightPt",0x17884e8a,"ru.stablex.ui.widgets.Widget.get_rightPt","ru/stablex/ui/widgets/Widget.hx",748,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_765_set_top,"ru.stablex.ui.widgets.Widget","set_top",0xa112382b,"ru.stablex.ui.widgets.Widget.set_top","ru/stablex/ui/widgets/Widget.hx",765,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_777_get_top,"ru.stablex.ui.widgets.Widget","get_top",0xae10a71f,"ru.stablex.ui.widgets.Widget.get_top","ru/stablex/ui/widgets/Widget.hx",777,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_785_set_bottom,"ru.stablex.ui.widgets.Widget","set_bottom",0xc71db715,"ru.stablex.ui.widgets.Widget.set_bottom","ru/stablex/ui/widgets/Widget.hx",785,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_798_get_bottom,"ru.stablex.ui.widgets.Widget","get_bottom",0xc3a018a1,"ru.stablex.ui.widgets.Widget.get_bottom","ru/stablex/ui/widgets/Widget.hx",798,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_815_set_topPt,"ru.stablex.ui.widgets.Widget","set_topPt",0xb4311f0f,"ru.stablex.ui.widgets.Widget.set_topPt","ru/stablex/ui/widgets/Widget.hx",815,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_830_get_topPt,"ru.stablex.ui.widgets.Widget","get_topPt",0xd0e03303,"ru.stablex.ui.widgets.Widget.get_topPt","ru/stablex/ui/widgets/Widget.hx",830,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_847_set_bottomPt,"ru.stablex.ui.widgets.Widget","set_bottomPt",0x1349ac79,"ru.stablex.ui.widgets.Widget.set_bottomPt","ru/stablex/ui/widgets/Widget.hx",847,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_862_get_bottomPt,"ru.stablex.ui.widgets.Widget","get_bottomPt",0xfe508905,"ru.stablex.ui.widgets.Widget.get_bottomPt","ru/stablex/ui/widgets/Widget.hx",862,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_879_set_w,"ru.stablex.ui.widgets.Widget","set_w",0xfe21208d,"ru.stablex.ui.widgets.Widget.set_w","ru/stablex/ui/widgets/Widget.hx",879,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_894_get_w,"ru.stablex.ui.widgets.Widget","get_w",0x15522a81,"ru.stablex.ui.widgets.Widget.get_w","ru/stablex/ui/widgets/Widget.hx",894,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_902_set_h,"ru.stablex.ui.widgets.Widget","set_h",0xfe21207e,"ru.stablex.ui.widgets.Widget.set_h","ru/stablex/ui/widgets/Widget.hx",902,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_917_get_h,"ru.stablex.ui.widgets.Widget","get_h",0x15522a72,"ru.stablex.ui.widgets.Widget.get_h","ru/stablex/ui/widgets/Widget.hx",917,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_926_get_contentHeight,"ru.stablex.ui.widgets.Widget","get_contentHeight",0xeeb54b0a,"ru.stablex.ui.widgets.Widget.get_contentHeight","ru/stablex/ui/widgets/Widget.hx",926,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_935_get_contentWidth,"ru.stablex.ui.widgets.Widget","get_contentWidth",0xd2556843,"ru.stablex.ui.widgets.Widget.get_contentWidth","ru/stablex/ui/widgets/Widget.hx",935,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_943_set_widthPt,"ru.stablex.ui.widgets.Widget","set_widthPt",0x3f925e40,"ru.stablex.ui.widgets.Widget.set_widthPt","ru/stablex/ui/widgets/Widget.hx",943,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_963_get_widthPt,"ru.stablex.ui.widgets.Widget","get_widthPt",0x35255734,"ru.stablex.ui.widgets.Widget.get_widthPt","ru/stablex/ui/widgets/Widget.hx",963,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_979_set_heightPt,"ru.stablex.ui.widgets.Widget","set_heightPt",0xe3e40475,"ru.stablex.ui.widgets.Widget.set_heightPt","ru/stablex/ui/widgets/Widget.hx",979,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_999_get_heightPt,"ru.stablex.ui.widgets.Widget","get_heightPt",0xceeae101,"ru.stablex.ui.widgets.Widget.get_heightPt","ru/stablex/ui/widgets/Widget.hx",999,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_1015_set_id,"ru.stablex.ui.widgets.Widget","set_id",0x5edb4f05,"ru.stablex.ui.widgets.Widget.set_id","ru/stablex/ui/widgets/Widget.hx",1015,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_1038_set_tip,"ru.stablex.ui.widgets.Widget","set_tip",0xa11232f1,"ru.stablex.ui.widgets.Widget.set_tip","ru/stablex/ui/widgets/Widget.hx",1038,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_23_boot,"ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",23,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_24_boot,"ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",24,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_25_boot,"ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",25,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_26_boot,"ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",26,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_28_boot,"ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",28,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_29_boot,"ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",29,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_30_boot,"ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",30,0xb63704bd)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e6fb7fd9c985bf_31_boot,"ru.stablex.ui.widgets.Widget","boot",0x24ffe65f,"ru.stablex.ui.widgets.Widget.boot","ru/stablex/ui/widgets/Widget.hx",31,0xb63704bd)
namespace ru{
namespace stablex{
namespace ui{
namespace widgets{

void Widget_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_22_new)
HXLINE( 124)		this->overflow = true;
HXLINE( 120)		this->_skinQueued = false;
HXLINE( 115)		this->_appliedSkin = null();
HXLINE( 110)		this->_bottomPercent = ((Float)0);
HXLINE( 109)		this->_bottom = ((Float)0);
HXLINE( 103)		this->_topPercent = ((Float)0);
HXLINE( 102)		this->_top = ((Float)0);
HXLINE(  93)		this->_yUse = 5;
HXLINE(  92)		this->_xUse = 1;
HXLINE(  89)		this->_rightPercent = ((Float)0);
HXLINE(  88)		this->_right = ((Float)0);
HXLINE(  82)		this->_leftPercent = ((Float)0);
HXLINE(  81)		this->_left = ((Float)0);
HXLINE(  72)		this->_resizing = false;
HXLINE(  70)		this->_silentResize = false;
HXLINE(  67)		this->_heightUsePercent = false;
HXLINE(  66)		this->_heightPercent = ((Float)0);
HXLINE(  65)		this->_height = ((Float)0);
HXLINE(  57)		this->minHeightByContent = false;
HXLINE(  55)		this->minWidthByContent = false;
HXLINE(  52)		this->_widthUsePercent = false;
HXLINE(  51)		this->_widthPercent = ((Float)0);
HXLINE(  50)		this->_width = ((Float)0);
HXLINE(  42)		this->destroyed = false;
HXLINE(  40)		this->created = false;
HXLINE(  38)		this->initialized = false;
HXLINE(  35)		this->defaults = HX_("Default",a1,00,15,69);
HXLINE( 148)		super::__construct();
HXLINE( 150)		this->set_id((HX_("__widget__",04,ef,09,d5) + ::Std_obj::string(::ru::stablex::ui::UIBuilder_obj::_nextId++)));
            	}

Dynamic Widget_obj::__CreateEmpty() { return new Widget_obj; }

void *Widget_obj::_hx_vtable = 0;

Dynamic Widget_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Widget_obj > _hx_result = new Widget_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Widget_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2383f585) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x2383f585;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x270e5222 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Widget_obj::_onInitialize(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_159__onInitialize)
HXLINE( 160)		this->onInitialize();
HXLINE( 161)		this->initialized = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,_onInitialize,(void))

void Widget_obj::onInitialize(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_170_onInitialize)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,onInitialize,(void))

void Widget_obj::_onCreate(){
            	HX_GC_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_180__onCreate)
HXLINE( 181)		this->onCreate();
HXLINE( 184)		this->refresh();
HXLINE( 187)		this->clearEvent(HX_("widgetInitialResize",34,2f,dc,47));
HXLINE( 189)		this->created = true;
HXLINE( 191)		this->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__alloc( HX_CTX ,HX_("widgetCreate",e0,b5,b2,80),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,_onCreate,(void))

void Widget_obj::onCreate(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_200_onCreate)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,onCreate,(void))

void Widget_obj::free(::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_209_free)
HXLINE( 210)		this->destroyed = true;
HXLINE( 211)		this->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__alloc( HX_CTX ,HX_("widgetFree",90,aa,9b,55),null()));
HXLINE( 213)		this->super::free(recursive);
HXLINE( 216)		::ru::stablex::ui::UIBuilder_obj::_objects->remove(this->id);
            	}


void Widget_obj::applySkin(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_225_applySkin)
HXDLIN( 225)		bool _hx_tmp;
HXDLIN( 225)		if (this->initialized) {
HXDLIN( 225)			_hx_tmp = ::hx::IsNotNull( this->skin );
            		}
            		else {
HXDLIN( 225)			_hx_tmp = false;
            		}
HXDLIN( 225)		if (_hx_tmp) {
HXLINE( 226)			this->skin->apply(::hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,applySkin,(void))

void Widget_obj::applyLayout(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_236_applyLayout)
HXDLIN( 236)		if (::hx::IsNotNull( this->layout )) {
HXLINE( 237)			this->layout->arrangeChildren(::hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,applyLayout,(void))

void Widget_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_246_refresh)
HXLINE( 247)		bool _hx_tmp;
HXDLIN( 247)		if (::hx::IsNotNull( this->skin )) {
HXLINE( 247)			_hx_tmp = !(this->_skinQueued);
            		}
            		else {
HXLINE( 247)			_hx_tmp = false;
            		}
HXDLIN( 247)		if (_hx_tmp) {
HXLINE( 247)			::ru::stablex::ui::UIBuilder_obj::_skinQueue->add(::hx::ObjectPtr<OBJ_>(this));
HXDLIN( 247)			this->_skinQueued = true;
            		}
HXLINE( 248)		this->applyLayout();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,refresh,(void))

void Widget_obj::_newParent( ::ru::stablex::ui::widgets::Widget newParent){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_257__newParent)
HXDLIN( 257)		if (::hx::IsNotEq( newParent,this->parent )) {
HXDLIN( 257)			this->onNewParent(newParent);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,_newParent,(void))

void Widget_obj::_resizeWithPercent( ::ru::stablex::ui::widgets::Widget parent){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_265__resizeWithPercent)
HXLINE( 266)		Float newWidth;
HXDLIN( 266)		if (this->_widthUsePercent) {
HXLINE( 268)			Float newWidth1 = parent->get_contentWidth();
HXLINE( 266)			newWidth = ((newWidth1 * this->_widthPercent) / ( (Float)(100) ));
            		}
            		else {
HXLINE( 266)			newWidth = this->_width;
            		}
HXLINE( 271)		Float newHeight;
HXDLIN( 271)		if (this->_heightUsePercent) {
HXLINE( 273)			Float newHeight1 = parent->get_contentHeight();
HXLINE( 271)			newHeight = ((newHeight1 * this->_heightPercent) / ( (Float)(100) ));
            		}
            		else {
HXLINE( 271)			newHeight = this->_height;
            		}
HXLINE( 277)		bool _hx_tmp;
HXDLIN( 277)		if (this->minWidthByContent) {
HXLINE( 277)			_hx_tmp = (this->get_contentWidth() < newWidth);
            		}
            		else {
HXLINE( 277)			_hx_tmp = false;
            		}
HXDLIN( 277)		if (_hx_tmp) {
HXLINE( 278)			newWidth = this->get_contentWidth();
            		}
HXLINE( 280)		bool _hx_tmp1;
HXDLIN( 280)		if (this->minHeightByContent) {
HXLINE( 280)			_hx_tmp1 = (this->get_contentHeight() < newHeight);
            		}
            		else {
HXLINE( 280)			_hx_tmp1 = false;
            		}
HXDLIN( 280)		if (_hx_tmp1) {
HXLINE( 281)			newHeight = this->get_contentHeight();
            		}
HXLINE( 284)		this->resize(newWidth,newHeight,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,_resizeWithPercent,(void))

void Widget_obj::onNewParent( ::ru::stablex::ui::widgets::Widget newParent){
            	HX_GC_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_292_onNewParent)
HXLINE( 294)		bool _hx_tmp;
HXDLIN( 294)		if (!(this->_widthUsePercent)) {
HXLINE( 294)			_hx_tmp = this->_heightUsePercent;
            		}
            		else {
HXLINE( 294)			_hx_tmp = true;
            		}
HXDLIN( 294)		if (_hx_tmp) {
HXLINE( 295)			this->_resizeWithPercent(newParent);
            		}
HXLINE( 299)		switch((int)(this->_xUse)){
            			case (int)2: {
HXLINE( 305)				this->set_x(((newParent->_width * this->_leftPercent) / ( (Float)(100) )));
            			}
            			break;
            			case (int)3: {
HXLINE( 301)				this->set_x(((newParent->_width - this->_right) - this->_width));
            			}
            			break;
            			case (int)4: {
HXLINE( 303)				this->set_x(((newParent->_width - ((newParent->_width * this->_rightPercent) / ( (Float)(100) ))) - this->_width));
            			}
            			break;
            		}
HXLINE( 308)		switch((int)(this->_yUse)){
            			case (int)6: {
HXLINE( 314)				this->set_y(((newParent->_height * this->_topPercent) / ( (Float)(100) )));
            			}
            			break;
            			case (int)7: {
HXLINE( 310)				this->set_y(((newParent->_height - this->_bottom) - this->_height));
            			}
            			break;
            			case (int)8: {
HXLINE( 312)				this->set_y(((newParent->_height - ((newParent->_height * this->_bottomPercent) / ( (Float)(100) ))) - this->_height));
            			}
            			break;
            		}
HXLINE( 319)		 ::openfl::events::EventDispatcher _hx_tmp1 = ::ru::stablex::ui::UIBuilder_obj::dispatcher;
HXDLIN( 319)		_hx_tmp1->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__alloc( HX_CTX ,HX_("widgetAdded",5c,ee,56,a8),::hx::ObjectPtr<OBJ_>(this)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,onNewParent,(void))

void Widget_obj::_onParentResize( ::ru::stablex::ui::events::WidgetEvent e){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_327__onParentResize)
HXLINE( 328)		 ::ru::stablex::ui::widgets::Widget parent = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(e->currentTarget);
HXLINE( 331)		bool _hx_tmp;
HXDLIN( 331)		if (!(this->_widthUsePercent)) {
HXLINE( 331)			_hx_tmp = this->_heightUsePercent;
            		}
            		else {
HXLINE( 331)			_hx_tmp = true;
            		}
HXDLIN( 331)		if (_hx_tmp) {
HXLINE( 332)			this->_resizeWithPercent(parent);
            		}
HXLINE( 336)		switch((int)(this->_xUse)){
            			case (int)2: {
HXLINE( 342)				this->set_x(((parent->_width * this->_leftPercent) / ( (Float)(100) )));
            			}
            			break;
            			case (int)3: {
HXLINE( 338)				this->set_x(((parent->_width - this->_right) - this->_width));
            			}
            			break;
            			case (int)4: {
HXLINE( 340)				Float _hx_tmp = (parent->_width - ((parent->_width * this->_rightPercent) / ( (Float)(100) )));
HXDLIN( 340)				this->set_x((_hx_tmp - this->get_w()));
            			}
            			break;
            		}
HXLINE( 345)		switch((int)(this->_yUse)){
            			case (int)6: {
HXLINE( 351)				this->set_y(((parent->_height * this->_topPercent) / ( (Float)(100) )));
            			}
            			break;
            			case (int)7: {
HXLINE( 347)				this->set_y(((parent->_height - this->_bottom) - this->_height));
            			}
            			break;
            			case (int)8: {
HXLINE( 349)				this->set_y(((parent->_height - ((parent->_height * this->_bottomPercent) / ( (Float)(100) ))) - this->_height));
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,_onParentResize,(void))

void Widget_obj::resize(Float width,Float height,::hx::Null< bool >  __o_keepPercentage){
            		bool keepPercentage = __o_keepPercentage.Default(false);
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_361_resize)
HXLINE( 362)		bool _hx_tmp;
HXDLIN( 362)		if ((this->_width == width)) {
HXLINE( 362)			_hx_tmp = (this->_height == height);
            		}
            		else {
HXLINE( 362)			_hx_tmp = false;
            		}
HXDLIN( 362)		if (_hx_tmp) {
HXLINE( 363)			return;
            		}
HXLINE( 365)		if (!(keepPercentage)) {
HXLINE( 366)			this->_silentResize = true;
HXLINE( 367)			this->set_w(width);
HXLINE( 368)			this->set_h(height);
HXLINE( 369)			this->_silentResize = false;
            		}
            		else {
HXLINE( 371)			this->_width = width;
HXLINE( 372)			this->_height = height;
            		}
HXLINE( 375)		this->_onResize();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Widget_obj,resize,(void))

void Widget_obj::_onResize(){
            	HX_GC_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_386__onResize)
HXLINE( 388)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 388)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 388)			_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 388)			_hx_tmp = null();
            		}
HXDLIN( 388)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 389)			switch((int)(this->_xUse)){
            				case (int)3: {
HXLINE( 391)					 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 391)					if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 391)						_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            					}
            					else {
HXLINE( 391)						_hx_tmp = null();
            					}
HXDLIN( 391)					this->set_x(((_hx_tmp->_width - this->_right) - this->_width));
            				}
            				break;
            				case (int)4: {
HXLINE( 393)					 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 393)					if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 393)						_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            					}
            					else {
HXLINE( 393)						_hx_tmp = null();
            					}
HXDLIN( 393)					Float _hx_tmp1 = _hx_tmp->_width;
HXDLIN( 393)					 ::ru::stablex::ui::widgets::Widget _hx_tmp2;
HXDLIN( 393)					if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 393)						_hx_tmp2 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            					}
            					else {
HXLINE( 393)						_hx_tmp2 = null();
            					}
HXDLIN( 393)					this->set_x(((_hx_tmp1 - ((_hx_tmp2->_width * this->_rightPercent) / ( (Float)(100) ))) - this->_width));
            				}
            				break;
            			}
HXLINE( 396)			switch((int)(this->_yUse)){
            				case (int)7: {
HXLINE( 398)					 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 398)					if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 398)						_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            					}
            					else {
HXLINE( 398)						_hx_tmp = null();
            					}
HXDLIN( 398)					this->set_y(((_hx_tmp->_height - this->_bottom) - this->_height));
            				}
            				break;
            				case (int)8: {
HXLINE( 400)					 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 400)					if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 400)						_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            					}
            					else {
HXLINE( 400)						_hx_tmp = null();
            					}
HXDLIN( 400)					Float _hx_tmp1 = _hx_tmp->_height;
HXDLIN( 400)					 ::ru::stablex::ui::widgets::Widget _hx_tmp2;
HXDLIN( 400)					if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 400)						_hx_tmp2 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            					}
            					else {
HXLINE( 400)						_hx_tmp2 = null();
            					}
HXDLIN( 400)					this->set_y(((_hx_tmp1 - ((_hx_tmp2->_height * this->_bottomPercent) / ( (Float)(100) ))) - this->_height));
            				}
            				break;
            			}
            		}
HXLINE( 405)		if (!(this->overflow)) {
HXLINE( 406)			this->set_scrollRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->_width,this->_height));
            		}
HXLINE( 410)		if (!(this->_resizing)) {
HXLINE( 411)			this->_resizing = true;
HXLINE( 414)			if (this->created) {
HXLINE( 415)				this->onResize();
            			}
HXLINE( 419)			if (this->initialized) {
HXLINE( 420)				this->refresh();
            			}
HXLINE( 423)			this->_resizing = false;
            		}
HXLINE( 426)		::String _hx_tmp1;
HXDLIN( 426)		if (this->created) {
HXLINE( 426)			_hx_tmp1 = HX_("widgetResize",d8,a8,1e,0d);
            		}
            		else {
HXLINE( 426)			_hx_tmp1 = HX_("widgetInitialResize",34,2f,dc,47);
            		}
HXDLIN( 426)		this->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__alloc( HX_CTX ,_hx_tmp1,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,_onResize,(void))

void Widget_obj::onResize(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_434_onResize)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,onResize,(void))

 ::openfl::display::DisplayObject Widget_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_442_addChild)
HXLINE( 443)		if (::hx::IsNotNull( child->parent )) {
HXLINE( 444)			child->parent->removeChild(child);
            		}
HXLINE( 447)		if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 448)			::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_newParent(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 449)			this->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null(),null(),null());
HXLINE( 450)			this->addUniqueListener(HX_("widgetInitialResize",34,2f,dc,47),::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null(),null(),null());
            		}
HXLINE( 453)		return this->super::addChild(child);
            	}


 ::openfl::display::DisplayObject Widget_obj::addChildAt( ::openfl::display::DisplayObject child,int idx){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_461_addChildAt)
HXLINE( 462)		if (::hx::IsNotNull( child->parent )) {
HXLINE( 463)			child->parent->removeChild(child);
            		}
HXLINE( 466)		if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 467)			::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_newParent(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 468)			this->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null(),null(),null());
HXLINE( 469)			this->addUniqueListener(HX_("widgetInitialResize",34,2f,dc,47),::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null(),null(),null());
            		}
HXLINE( 472)		return this->super::addChildAt(child,idx);
            	}


 ::openfl::display::DisplayObject Widget_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_GC_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_480_removeChild)
HXLINE( 481)		if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 482)			this->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null());
HXLINE( 483)			this->removeEventListener(HX_("widgetInitialResize",34,2f,dc,47),::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null());
HXLINE( 484)			 ::openfl::events::EventDispatcher _hx_tmp = ::ru::stablex::ui::UIBuilder_obj::dispatcher;
HXDLIN( 484)			_hx_tmp->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__alloc( HX_CTX ,HX_("widgetRemoved",3c,d8,41,fd),( ( ::ru::stablex::ui::widgets::Widget)(child) )));
            		}
HXLINE( 486)		return this->super::removeChild(child);
            	}


 ::openfl::display::DisplayObject Widget_obj::removeChildAt(int idx){
            	HX_GC_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_494_removeChildAt)
HXLINE( 495)		 ::openfl::display::DisplayObject child = this->getChildAt(idx);
HXLINE( 496)		if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 497)			this->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null());
HXLINE( 498)			this->removeEventListener(HX_("widgetInitialResize",34,2f,dc,47),::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_onParentResize_dyn(),null());
HXLINE( 499)			 ::openfl::events::EventDispatcher _hx_tmp = ::ru::stablex::ui::UIBuilder_obj::dispatcher;
HXDLIN( 499)			_hx_tmp->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__alloc( HX_CTX ,HX_("widgetRemoved",3c,d8,41,fd),( ( ::ru::stablex::ui::widgets::Widget)(child) )));
            		}
HXLINE( 501)		return this->super::removeChildAt(idx);
            	}


 ::Dynamic Widget_obj::getChildAs(::String name,::hx::Class cls){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_509_getChildAs)
HXLINE( 510)		 ::ru::stablex::ui::widgets::Widget w = this->_findChildWidget(name);
HXLINE( 511)		if (::Std_obj::isOfType(w,( ( ::Dynamic)(cls) ))) {
HXLINE( 511)			return w;
            		}
            		else {
HXLINE( 511)			return null();
            		}
HXDLIN( 511)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Widget_obj,getChildAs,return )

 ::ru::stablex::ui::widgets::Widget Widget_obj::getChild(::String name){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_520_getChild)
HXDLIN( 520)		return this->_findChildWidget(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,getChild,return )

 ::ru::stablex::ui::widgets::Widget Widget_obj::_findChildWidget(::String name){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_528__findChildWidget)
HXLINE( 529)		 ::openfl::display::DisplayObject child = null();
HXLINE( 532)		{
HXLINE( 532)			int _g = 0;
HXDLIN( 532)			int _g1 = this->get_numChildren();
HXDLIN( 532)			while((_g < _g1)){
HXLINE( 532)				_g = (_g + 1);
HXDLIN( 532)				int i = (_g - 1);
HXLINE( 533)				child = this->getChildAt(i);
HXLINE( 535)				if ((child->get_name() == name)) {
HXLINE( 535)					goto _hx_goto_22;
            				}
HXLINE( 538)				if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 539)					child = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->_findChildWidget(name);
HXLINE( 540)					if (::hx::IsNotNull( child )) {
HXLINE( 540)						goto _hx_goto_22;
            					}
            				}
HXLINE( 543)				child = null();
            			}
            			_hx_goto_22:;
            		}
HXLINE( 546)		if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 546)			return ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child);
            		}
            		else {
HXLINE( 546)			return null();
            		}
HXDLIN( 546)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,_findChildWidget,return )

 ::ru::stablex::ui::widgets::Widget Widget_obj::getParent(::String name){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_554_getParent)
HXLINE( 555)		 ::ru::stablex::ui::widgets::Widget p;
HXDLIN( 555)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 555)			p = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 555)			p = null();
            		}
HXLINE( 557)		while(true){
HXLINE( 557)			bool _hx_tmp;
HXDLIN( 557)			if (::hx::IsNotNull( p )) {
HXLINE( 557)				_hx_tmp = (p->get_name() != name);
            			}
            			else {
HXLINE( 557)				_hx_tmp = false;
            			}
HXDLIN( 557)			if (!(_hx_tmp)) {
HXLINE( 557)				goto _hx_goto_24;
            			}
HXLINE( 558)			if (::Std_obj::isOfType(p->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 558)				p = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(p->parent);
            			}
            			else {
HXLINE( 558)				p = null();
            			}
            		}
            		_hx_goto_24:;
HXLINE( 561)		return p;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,getParent,return )

 ::Dynamic Widget_obj::getParentAs(::String name,::hx::Class cls){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_569_getParentAs)
HXLINE( 570)		 ::ru::stablex::ui::widgets::Widget p;
HXDLIN( 570)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 570)			p = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 570)			p = null();
            		}
HXLINE( 572)		while(true){
HXLINE( 572)			bool _hx_tmp;
HXDLIN( 572)			if (::hx::IsNotNull( p )) {
HXLINE( 572)				_hx_tmp = (p->get_name() != name);
            			}
            			else {
HXLINE( 572)				_hx_tmp = false;
            			}
HXDLIN( 572)			if (!(_hx_tmp)) {
HXLINE( 572)				goto _hx_goto_26;
            			}
HXLINE( 573)			if (::Std_obj::isOfType(p->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 573)				p = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(p->parent);
            			}
            			else {
HXLINE( 573)				p = null();
            			}
            		}
            		_hx_goto_26:;
HXLINE( 576)		if (::Std_obj::isOfType(p,( ( ::Dynamic)(cls) ))) {
HXLINE( 576)			return p;
            		}
            		else {
HXLINE( 576)			return null();
            		}
HXDLIN( 576)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Widget_obj,getParentAs,return )

 ::Dynamic Widget_obj::getNearestParent(::hx::Class cls){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_584_getNearestParent)
HXLINE( 585)		 ::openfl::display::DisplayObjectContainer p = this->parent;
HXLINE( 587)		while(::hx::IsNotNull( p )){
HXLINE( 588)			if (::Std_obj::isOfType(p,( ( ::Dynamic)(cls) ))) {
HXLINE( 588)				return p;
            			}
HXLINE( 589)			p = p->parent;
            		}
HXLINE( 592)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,getNearestParent,return )

 ::Dynamic Widget_obj::as(::hx::Class cls){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_601_as)
HXDLIN( 601)		if (::Std_obj::isOfType(::hx::ObjectPtr<OBJ_>(this),( ( ::Dynamic)(cls) ))) {
HXDLIN( 601)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXDLIN( 601)			return null();
            		}
HXDLIN( 601)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,as,return )

bool Widget_obj::set_overflow(bool o){
            	HX_GC_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_612_set_overflow)
HXLINE( 613)		if (!(o)) {
HXLINE( 614)			this->set_scrollRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->_width,this->_height));
            		}
            		else {
HXLINE( 616)			this->set_scrollRect(null());
            		}
HXLINE( 619)		return (this->overflow = o);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_overflow,return )

::String Widget_obj::set_skinName(::String sn){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_627_set_skinName)
HXLINE( 628)		this->skin = ( ( ::ru::stablex::ui::skins::Skin)(::ru::stablex::ui::UIBuilder_obj::skins->get(sn)()) );
HXLINE( 629)		if (this->created) {
HXLINE( 629)			bool _hx_tmp;
HXDLIN( 629)			if (::hx::IsNotNull( this->skin )) {
HXLINE( 629)				_hx_tmp = !(this->_skinQueued);
            			}
            			else {
HXLINE( 629)				_hx_tmp = false;
            			}
HXDLIN( 629)			if (_hx_tmp) {
HXLINE( 629)				::ru::stablex::ui::UIBuilder_obj::_skinQueue->add(::hx::ObjectPtr<OBJ_>(this));
HXDLIN( 629)				this->_skinQueued = true;
            			}
            		}
HXLINE( 630)		return (this->skinName = sn);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_skinName,return )

 ::ru::stablex::ui::widgets::Widget Widget_obj::get_wparent(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_639_get_wparent)
HXDLIN( 639)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 641)			return ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 642)			return null();
            		}
HXLINE( 639)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_wparent,return )

Float Widget_obj::set_left(Float l){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_651_set_left)
HXLINE( 652)		this->_xUse = 1;
HXLINE( 653)		this->set_x(l);
HXLINE( 654)		return (this->_left = l);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_left,return )

Float Widget_obj::get_left(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_663_get_left)
HXDLIN( 663)		return this->get_x();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_left,return )

Float Widget_obj::set_right(Float r){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_671_set_right)
HXLINE( 672)		this->_xUse = 3;
HXLINE( 673)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 673)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 673)			_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 673)			_hx_tmp = null();
            		}
HXDLIN( 673)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 674)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 674)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 674)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 674)				_hx_tmp = null();
            			}
HXDLIN( 674)			Float _hx_tmp1 = (_hx_tmp->_width - r);
HXDLIN( 674)			this->set_x((_hx_tmp1 - this->get_w()));
            		}
HXLINE( 676)		return (this->_right = r);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_right,return )

Float Widget_obj::get_right(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_684_get_right)
HXLINE( 685)		if ((this->_xUse == 3)) {
HXLINE( 686)			return this->_right;
            		}
HXLINE( 689)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 689)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 689)			_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 689)			_hx_tmp = null();
            		}
HXDLIN( 689)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 690)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 690)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 690)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 690)				_hx_tmp = null();
            			}
HXDLIN( 690)			Float _hx_tmp1 = _hx_tmp->_width;
HXDLIN( 690)			Float _hx_tmp2 = (_hx_tmp1 - this->get_x());
HXDLIN( 690)			return (_hx_tmp2 - this->get_w());
            		}
HXLINE( 693)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_right,return )

Float Widget_obj::set_leftPt(Float lp){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_701_set_leftPt)
HXLINE( 702)		this->_xUse = 2;
HXLINE( 704)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 704)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 704)			_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 704)			_hx_tmp = null();
            		}
HXDLIN( 704)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 705)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 705)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 705)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 705)				_hx_tmp = null();
            			}
HXDLIN( 705)			this->set_x(((_hx_tmp->_width * lp) / ( (Float)(100) )));
            		}
HXLINE( 708)		return (this->_leftPercent = lp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_leftPt,return )

Float Widget_obj::get_leftPt(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_716_get_leftPt)
HXLINE( 717)		if ((this->_xUse == 2)) {
HXLINE( 718)			return this->_leftPercent;
            		}
HXLINE( 721)		bool _hx_tmp;
HXDLIN( 721)		 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 721)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 721)			_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 721)			_hx_tmp1 = null();
            		}
HXDLIN( 721)		if (::hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 721)			 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 721)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 721)				_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 721)				_hx_tmp1 = null();
            			}
HXDLIN( 721)			_hx_tmp = (_hx_tmp1->_width != 0);
            		}
            		else {
HXLINE( 721)			_hx_tmp = false;
            		}
HXDLIN( 721)		if (_hx_tmp) {
HXLINE( 722)			Float _hx_tmp = this->get_x();
HXDLIN( 722)			 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 722)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 722)				_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 722)				_hx_tmp1 = null();
            			}
HXDLIN( 722)			return ((_hx_tmp / _hx_tmp1->_width) * ( (Float)(100) ));
            		}
HXLINE( 725)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_leftPt,return )

Float Widget_obj::set_rightPt(Float rp){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_733_set_rightPt)
HXLINE( 734)		this->_xUse = 4;
HXLINE( 736)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 736)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 736)			_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 736)			_hx_tmp = null();
            		}
HXDLIN( 736)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 737)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 737)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 737)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 737)				_hx_tmp = null();
            			}
HXDLIN( 737)			Float _hx_tmp1 = _hx_tmp->_width;
HXDLIN( 737)			 ::ru::stablex::ui::widgets::Widget _hx_tmp2;
HXDLIN( 737)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 737)				_hx_tmp2 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 737)				_hx_tmp2 = null();
            			}
HXDLIN( 737)			Float _hx_tmp3 = (_hx_tmp1 - ((_hx_tmp2->_width * rp) / ( (Float)(100) )));
HXDLIN( 737)			this->set_x((_hx_tmp3 - this->get_w()));
            		}
HXLINE( 740)		return (this->_rightPercent = rp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_rightPt,return )

Float Widget_obj::get_rightPt(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_748_get_rightPt)
HXLINE( 749)		if ((this->_xUse == 4)) {
HXLINE( 750)			return this->_rightPercent;
            		}
HXLINE( 753)		bool _hx_tmp;
HXDLIN( 753)		 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 753)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 753)			_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 753)			_hx_tmp1 = null();
            		}
HXDLIN( 753)		if (::hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 753)			 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 753)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 753)				_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 753)				_hx_tmp1 = null();
            			}
HXDLIN( 753)			_hx_tmp = (_hx_tmp1->_width != 0);
            		}
            		else {
HXLINE( 753)			_hx_tmp = false;
            		}
HXDLIN( 753)		if (_hx_tmp) {
HXLINE( 754)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 754)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 754)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 754)				_hx_tmp = null();
            			}
HXDLIN( 754)			Float _hx_tmp1 = _hx_tmp->_width;
HXDLIN( 754)			Float _hx_tmp2 = (_hx_tmp1 - this->get_x());
HXDLIN( 754)			Float _hx_tmp3 = (_hx_tmp2 - this->_width);
HXDLIN( 754)			 ::ru::stablex::ui::widgets::Widget _hx_tmp4;
HXDLIN( 754)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 754)				_hx_tmp4 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 754)				_hx_tmp4 = null();
            			}
HXDLIN( 754)			return ((_hx_tmp3 / _hx_tmp4->_width) * ( (Float)(100) ));
            		}
HXLINE( 757)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_rightPt,return )

Float Widget_obj::set_top(Float t){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_765_set_top)
HXLINE( 766)		this->_yUse = 5;
HXLINE( 767)		this->set_y(t);
HXLINE( 768)		return (this->_top = t);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_top,return )

Float Widget_obj::get_top(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_777_get_top)
HXDLIN( 777)		return this->get_y();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_top,return )

Float Widget_obj::set_bottom(Float b){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_785_set_bottom)
HXLINE( 786)		this->_yUse = 7;
HXLINE( 787)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 787)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 787)			_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 787)			_hx_tmp = null();
            		}
HXDLIN( 787)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 788)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 788)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 788)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 788)				_hx_tmp = null();
            			}
HXDLIN( 788)			Float _hx_tmp1 = (_hx_tmp->_height - b);
HXDLIN( 788)			this->set_y((_hx_tmp1 - this->get_h()));
            		}
HXLINE( 790)		return (this->_bottom = b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_bottom,return )

Float Widget_obj::get_bottom(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_798_get_bottom)
HXLINE( 799)		if ((this->_yUse == 7)) {
HXLINE( 800)			return this->_bottom;
            		}
HXLINE( 803)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 803)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 803)			_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 803)			_hx_tmp = null();
            		}
HXDLIN( 803)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 804)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 804)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 804)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 804)				_hx_tmp = null();
            			}
HXDLIN( 804)			Float _hx_tmp1 = _hx_tmp->_height;
HXDLIN( 804)			Float _hx_tmp2 = (_hx_tmp1 - this->get_y());
HXDLIN( 804)			return (_hx_tmp2 - this->get_h());
            		}
HXLINE( 807)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_bottom,return )

Float Widget_obj::set_topPt(Float tp){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_815_set_topPt)
HXLINE( 816)		this->_yUse = 6;
HXLINE( 818)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 818)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 818)			_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 818)			_hx_tmp = null();
            		}
HXDLIN( 818)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 819)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 819)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 819)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 819)				_hx_tmp = null();
            			}
HXDLIN( 819)			this->set_y(((_hx_tmp->_height * tp) / ( (Float)(100) )));
            		}
HXLINE( 822)		return (this->_topPercent = tp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_topPt,return )

Float Widget_obj::get_topPt(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_830_get_topPt)
HXLINE( 831)		if ((this->_yUse == 6)) {
HXLINE( 832)			return this->_topPercent;
            		}
HXLINE( 835)		bool _hx_tmp;
HXDLIN( 835)		 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 835)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 835)			_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 835)			_hx_tmp1 = null();
            		}
HXDLIN( 835)		if (::hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 835)			 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 835)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 835)				_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 835)				_hx_tmp1 = null();
            			}
HXDLIN( 835)			_hx_tmp = (_hx_tmp1->_height != 0);
            		}
            		else {
HXLINE( 835)			_hx_tmp = false;
            		}
HXDLIN( 835)		if (_hx_tmp) {
HXLINE( 836)			Float _hx_tmp = this->get_y();
HXDLIN( 836)			 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 836)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 836)				_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 836)				_hx_tmp1 = null();
            			}
HXDLIN( 836)			return ((_hx_tmp / _hx_tmp1->_height) * ( (Float)(100) ));
            		}
HXLINE( 839)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_topPt,return )

Float Widget_obj::set_bottomPt(Float bp){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_847_set_bottomPt)
HXLINE( 848)		this->_yUse = 8;
HXLINE( 850)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 850)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 850)			_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 850)			_hx_tmp = null();
            		}
HXDLIN( 850)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 851)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 851)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 851)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 851)				_hx_tmp = null();
            			}
HXDLIN( 851)			Float _hx_tmp1 = _hx_tmp->_height;
HXDLIN( 851)			 ::ru::stablex::ui::widgets::Widget _hx_tmp2;
HXDLIN( 851)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 851)				_hx_tmp2 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 851)				_hx_tmp2 = null();
            			}
HXDLIN( 851)			Float _hx_tmp3 = (_hx_tmp1 - ((_hx_tmp2->_height * bp) / ( (Float)(100) )));
HXDLIN( 851)			this->set_y((_hx_tmp3 - this->get_h()));
            		}
HXLINE( 854)		return (this->_bottomPercent = bp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_bottomPt,return )

Float Widget_obj::get_bottomPt(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_862_get_bottomPt)
HXLINE( 863)		if ((this->_yUse == 8)) {
HXLINE( 864)			return this->_bottomPercent;
            		}
HXLINE( 867)		bool _hx_tmp;
HXDLIN( 867)		 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 867)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 867)			_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 867)			_hx_tmp1 = null();
            		}
HXDLIN( 867)		if (::hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 867)			 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 867)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 867)				_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 867)				_hx_tmp1 = null();
            			}
HXDLIN( 867)			_hx_tmp = (_hx_tmp1->_height != 0);
            		}
            		else {
HXLINE( 867)			_hx_tmp = false;
            		}
HXDLIN( 867)		if (_hx_tmp) {
HXLINE( 868)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 868)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 868)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 868)				_hx_tmp = null();
            			}
HXDLIN( 868)			Float _hx_tmp1 = _hx_tmp->_height;
HXDLIN( 868)			Float _hx_tmp2 = (_hx_tmp1 - this->get_y());
HXDLIN( 868)			Float _hx_tmp3 = (_hx_tmp2 - this->_height);
HXDLIN( 868)			 ::ru::stablex::ui::widgets::Widget _hx_tmp4;
HXDLIN( 868)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 868)				_hx_tmp4 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 868)				_hx_tmp4 = null();
            			}
HXDLIN( 868)			return ((_hx_tmp3 / _hx_tmp4->_height) * ( (Float)(100) ));
            		}
HXLINE( 871)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_bottomPt,return )

Float Widget_obj::set_w(Float w){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_879_set_w)
HXLINE( 880)		this->_width = w;
HXLINE( 881)		this->_widthUsePercent = false;
HXLINE( 882)		if (!(this->_silentResize)) {
HXLINE( 883)			this->_onResize();
            		}
HXLINE( 885)		return w;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_w,return )

Float Widget_obj::get_w(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_894_get_w)
HXDLIN( 894)		return this->_width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_w,return )

Float Widget_obj::set_h(Float h){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_902_set_h)
HXLINE( 903)		this->_height = h;
HXLINE( 904)		this->_heightUsePercent = false;
HXLINE( 905)		if (!(this->_silentResize)) {
HXLINE( 906)			this->_onResize();
            		}
HXLINE( 908)		return h;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_h,return )

Float Widget_obj::get_h(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_917_get_h)
HXDLIN( 917)		return this->_height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_h,return )

Float Widget_obj::get_contentHeight(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_926_get_contentHeight)
HXDLIN( 926)		return this->get_h();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_contentHeight,return )

Float Widget_obj::get_contentWidth(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_935_get_contentWidth)
HXDLIN( 935)		return this->get_w();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_contentWidth,return )

Float Widget_obj::set_widthPt(Float wp){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_943_set_widthPt)
HXLINE( 944)		this->_widthPercent = wp;
HXLINE( 945)		this->_widthUsePercent = true;
HXLINE( 947)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 947)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 947)			_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 947)			_hx_tmp = null();
            		}
HXDLIN( 947)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 948)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 948)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 948)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 948)				_hx_tmp = null();
            			}
HXDLIN( 948)			this->_width = ((_hx_tmp->get_contentWidth() * wp) / ( (Float)(100) ));
HXLINE( 949)			if (!(this->_silentResize)) {
HXLINE( 950)				this->_onResize();
            			}
            		}
HXLINE( 954)		return wp;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_widthPt,return )

Float Widget_obj::get_widthPt(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_963_get_widthPt)
HXDLIN( 963)		if (this->_widthUsePercent) {
HXLINE( 964)			return this->_widthPercent;
            		}
            		else {
HXLINE( 966)			bool _hx_tmp;
HXDLIN( 966)			 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 966)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 966)				_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 966)				_hx_tmp1 = null();
            			}
HXDLIN( 966)			if (::hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 966)				 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 966)				if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 966)					_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            				}
            				else {
HXLINE( 966)					_hx_tmp1 = null();
            				}
HXDLIN( 966)				_hx_tmp = (_hx_tmp1->_width != 0);
            			}
            			else {
HXLINE( 966)				_hx_tmp = false;
            			}
HXDLIN( 966)			if (_hx_tmp) {
HXLINE( 967)				Float _hx_tmp = this->get_w();
HXDLIN( 967)				 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN( 967)				if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 967)					_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            				}
            				else {
HXLINE( 967)					_hx_tmp1 = null();
            				}
HXDLIN( 967)				return ((_hx_tmp / _hx_tmp1->_width) * ( (Float)(100) ));
            			}
            			else {
HXLINE( 970)				return ( (Float)(0) );
            			}
            		}
HXLINE( 963)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_widthPt,return )

Float Widget_obj::set_heightPt(Float hp){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_979_set_heightPt)
HXLINE( 980)		this->_heightPercent = hp;
HXLINE( 981)		this->_heightUsePercent = true;
HXLINE( 983)		 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 983)		if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 983)			_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            		}
            		else {
HXLINE( 983)			_hx_tmp = null();
            		}
HXDLIN( 983)		if (::hx::IsNotNull( _hx_tmp )) {
HXLINE( 984)			 ::ru::stablex::ui::widgets::Widget _hx_tmp;
HXDLIN( 984)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 984)				_hx_tmp = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE( 984)				_hx_tmp = null();
            			}
HXDLIN( 984)			this->_height = ((_hx_tmp->get_contentHeight() * hp) / ( (Float)(100) ));
HXLINE( 985)			if (!(this->_silentResize)) {
HXLINE( 986)				this->_onResize();
            			}
            		}
HXLINE( 990)		return hp;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_heightPt,return )

Float Widget_obj::get_heightPt(){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_999_get_heightPt)
HXDLIN( 999)		if (this->_heightUsePercent) {
HXLINE(1000)			return this->_heightPercent;
            		}
            		else {
HXLINE(1002)			bool _hx_tmp;
HXDLIN(1002)			 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN(1002)			if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE(1002)				_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            			}
            			else {
HXLINE(1002)				_hx_tmp1 = null();
            			}
HXDLIN(1002)			if (::hx::IsNotNull( _hx_tmp1 )) {
HXLINE(1002)				 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN(1002)				if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE(1002)					_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            				}
            				else {
HXLINE(1002)					_hx_tmp1 = null();
            				}
HXDLIN(1002)				_hx_tmp = (_hx_tmp1->_height != 0);
            			}
            			else {
HXLINE(1002)				_hx_tmp = false;
            			}
HXDLIN(1002)			if (_hx_tmp) {
HXLINE(1003)				Float _hx_tmp = this->_height;
HXDLIN(1003)				 ::ru::stablex::ui::widgets::Widget _hx_tmp1;
HXDLIN(1003)				if (::Std_obj::isOfType(this->parent,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE(1003)					_hx_tmp1 = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(this->parent);
            				}
            				else {
HXLINE(1003)					_hx_tmp1 = null();
            				}
HXDLIN(1003)				return ((_hx_tmp / _hx_tmp1->_height) * ( (Float)(100) ));
            			}
            			else {
HXLINE(1006)				return ( (Float)(0) );
            			}
            		}
HXLINE( 999)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Widget_obj,get_heightPt,return )

::String Widget_obj::set_id(::String id){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_1015_set_id)
HXLINE(1016)		if (::hx::IsNull( id )) {
HXLINE(1017)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Widget id cannot be null",50,d7,5e,5e)));
            		}
HXLINE(1021)		if (::hx::IsNotNull( this->id )) {
HXLINE(1022)			::ru::stablex::ui::UIBuilder_obj::_objects->remove(this->id);
            		}
HXLINE(1025)		this->id = id;
HXLINE(1028)		if (::ru::stablex::ui::UIBuilder_obj::_objects->exists(this->id)) {
HXLINE(1028)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(((HX_("Widget id \"",59,36,9e,8f) + this->id) + HX_("\" is already used",bd,b5,7b,b9))));
            		}
            		else {
HXLINE(1028)			::ru::stablex::ui::UIBuilder_obj::_objects->set(this->id,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1030)		return id;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_id,return )

 ::ru::stablex::ui::widgets::Tip Widget_obj::set_tip( ::ru::stablex::ui::widgets::Tip tip){
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_1038_set_tip)
HXLINE(1039)		if (::hx::IsNotNull( this->tip )) {
HXLINE(1040)			this->tip->free(null());
            		}
HXLINE(1042)		tip->bindTo(::hx::ObjectPtr<OBJ_>(this));
HXLINE(1043)		return (this->tip = tip);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Widget_obj,set_tip,return )

int Widget_obj::_X_USE_LEFT;

int Widget_obj::_X_USE_LEFT_PERCENT;

int Widget_obj::_X_USE_RIGHT;

int Widget_obj::_X_USE_RIGHT_PERCENT;

int Widget_obj::_Y_USE_TOP;

int Widget_obj::_Y_USE_TOP_PERCENT;

int Widget_obj::_Y_USE_BOTTOM;

int Widget_obj::_Y_USE_BOTTOM_PERCENT;


::hx::ObjectPtr< Widget_obj > Widget_obj::__new() {
	::hx::ObjectPtr< Widget_obj > __this = new Widget_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Widget_obj > Widget_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Widget_obj *__this = (Widget_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Widget_obj), true, "ru.stablex.ui.widgets.Widget"));
	*(void **)__this = Widget_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Widget_obj::Widget_obj()
{
}

void Widget_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Widget);
	HX_MARK_MEMBER_NAME(defaults,"defaults");
	HX_MARK_MEMBER_NAME(initialized,"initialized");
	HX_MARK_MEMBER_NAME(created,"created");
	HX_MARK_MEMBER_NAME(destroyed,"destroyed");
	HX_MARK_MEMBER_NAME(contentWidth,"contentWidth");
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_widthPercent,"_widthPercent");
	HX_MARK_MEMBER_NAME(_widthUsePercent,"_widthUsePercent");
	HX_MARK_MEMBER_NAME(minWidthByContent,"minWidthByContent");
	HX_MARK_MEMBER_NAME(minHeightByContent,"minHeightByContent");
	HX_MARK_MEMBER_NAME(contentHeight,"contentHeight");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_heightPercent,"_heightPercent");
	HX_MARK_MEMBER_NAME(_heightUsePercent,"_heightUsePercent");
	HX_MARK_MEMBER_NAME(_silentResize,"_silentResize");
	HX_MARK_MEMBER_NAME(_resizing,"_resizing");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(_left,"_left");
	HX_MARK_MEMBER_NAME(_leftPercent,"_leftPercent");
	HX_MARK_MEMBER_NAME(_right,"_right");
	HX_MARK_MEMBER_NAME(_rightPercent,"_rightPercent");
	HX_MARK_MEMBER_NAME(_xUse,"_xUse");
	HX_MARK_MEMBER_NAME(_yUse,"_yUse");
	HX_MARK_MEMBER_NAME(_top,"_top");
	HX_MARK_MEMBER_NAME(_topPercent,"_topPercent");
	HX_MARK_MEMBER_NAME(_bottom,"_bottom");
	HX_MARK_MEMBER_NAME(_bottomPercent,"_bottomPercent");
	HX_MARK_MEMBER_NAME(skin,"skin");
	HX_MARK_MEMBER_NAME(_appliedSkin,"_appliedSkin");
	HX_MARK_MEMBER_NAME(_skinQueued,"_skinQueued");
	HX_MARK_MEMBER_NAME(skinName,"skinName");
	HX_MARK_MEMBER_NAME(overflow,"overflow");
	HX_MARK_MEMBER_NAME(tip,"tip");
	HX_MARK_MEMBER_NAME(layout,"layout");
	 ::ru::stablex::TweenSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Widget_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(defaults,"defaults");
	HX_VISIT_MEMBER_NAME(initialized,"initialized");
	HX_VISIT_MEMBER_NAME(created,"created");
	HX_VISIT_MEMBER_NAME(destroyed,"destroyed");
	HX_VISIT_MEMBER_NAME(contentWidth,"contentWidth");
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_widthPercent,"_widthPercent");
	HX_VISIT_MEMBER_NAME(_widthUsePercent,"_widthUsePercent");
	HX_VISIT_MEMBER_NAME(minWidthByContent,"minWidthByContent");
	HX_VISIT_MEMBER_NAME(minHeightByContent,"minHeightByContent");
	HX_VISIT_MEMBER_NAME(contentHeight,"contentHeight");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_heightPercent,"_heightPercent");
	HX_VISIT_MEMBER_NAME(_heightUsePercent,"_heightUsePercent");
	HX_VISIT_MEMBER_NAME(_silentResize,"_silentResize");
	HX_VISIT_MEMBER_NAME(_resizing,"_resizing");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(_left,"_left");
	HX_VISIT_MEMBER_NAME(_leftPercent,"_leftPercent");
	HX_VISIT_MEMBER_NAME(_right,"_right");
	HX_VISIT_MEMBER_NAME(_rightPercent,"_rightPercent");
	HX_VISIT_MEMBER_NAME(_xUse,"_xUse");
	HX_VISIT_MEMBER_NAME(_yUse,"_yUse");
	HX_VISIT_MEMBER_NAME(_top,"_top");
	HX_VISIT_MEMBER_NAME(_topPercent,"_topPercent");
	HX_VISIT_MEMBER_NAME(_bottom,"_bottom");
	HX_VISIT_MEMBER_NAME(_bottomPercent,"_bottomPercent");
	HX_VISIT_MEMBER_NAME(skin,"skin");
	HX_VISIT_MEMBER_NAME(_appliedSkin,"_appliedSkin");
	HX_VISIT_MEMBER_NAME(_skinQueued,"_skinQueued");
	HX_VISIT_MEMBER_NAME(skinName,"skinName");
	HX_VISIT_MEMBER_NAME(overflow,"overflow");
	HX_VISIT_MEMBER_NAME(tip,"tip");
	HX_VISIT_MEMBER_NAME(layout,"layout");
	 ::ru::stablex::TweenSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Widget_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_w() ); }
		if (HX_FIELD_EQ(inName,"h") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_h() ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		if (HX_FIELD_EQ(inName,"as") ) { return ::hx::Val( as_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_top() ); }
		if (HX_FIELD_EQ(inName,"tip") ) { return ::hx::Val( tip ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_left() ); }
		if (HX_FIELD_EQ(inName,"_top") ) { return ::hx::Val( _top ); }
		if (HX_FIELD_EQ(inName,"skin") ) { return ::hx::Val( skin ); }
		if (HX_FIELD_EQ(inName,"free") ) { return ::hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { return ::hx::Val( _left ); }
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_right() ); }
		if (HX_FIELD_EQ(inName,"_xUse") ) { return ::hx::Val( _xUse ); }
		if (HX_FIELD_EQ(inName,"_yUse") ) { return ::hx::Val( _yUse ); }
		if (HX_FIELD_EQ(inName,"topPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_topPt() ); }
		if (HX_FIELD_EQ(inName,"set_w") ) { return ::hx::Val( set_w_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_w") ) { return ::hx::Val( get_w_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_h") ) { return ::hx::Val( set_h_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_h") ) { return ::hx::Val( get_h_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { return ::hx::Val( _width ); }
		if (HX_FIELD_EQ(inName,"leftPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_leftPt() ); }
		if (HX_FIELD_EQ(inName,"_right") ) { return ::hx::Val( _right ); }
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bottom() ); }
		if (HX_FIELD_EQ(inName,"layout") ) { return ::hx::Val( layout ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_id") ) { return ::hx::Val( set_id_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"created") ) { return ::hx::Val( created ); }
		if (HX_FIELD_EQ(inName,"widthPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_widthPt() ); }
		if (HX_FIELD_EQ(inName,"_height") ) { return ::hx::Val( _height ); }
		if (HX_FIELD_EQ(inName,"rightPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_rightPt() ); }
		if (HX_FIELD_EQ(inName,"wparent") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_wparent() ); }
		if (HX_FIELD_EQ(inName,"_bottom") ) { return ::hx::Val( _bottom ); }
		if (HX_FIELD_EQ(inName,"refresh") ) { return ::hx::Val( refresh_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_top") ) { return ::hx::Val( set_top_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_top") ) { return ::hx::Val( get_top_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tip") ) { return ::hx::Val( set_tip_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"defaults") ) { return ::hx::Val( defaults ); }
		if (HX_FIELD_EQ(inName,"heightPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_heightPt() ); }
		if (HX_FIELD_EQ(inName,"bottomPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bottomPt() ); }
		if (HX_FIELD_EQ(inName,"skinName") ) { return ::hx::Val( skinName ); }
		if (HX_FIELD_EQ(inName,"overflow") ) { return ::hx::Val( overflow ); }
		if (HX_FIELD_EQ(inName,"onCreate") ) { return ::hx::Val( onCreate_dyn() ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return ::hx::Val( onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"addChild") ) { return ::hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChild") ) { return ::hx::Val( getChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_left") ) { return ::hx::Val( set_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_left") ) { return ::hx::Val( get_left_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { return ::hx::Val( destroyed ); }
		if (HX_FIELD_EQ(inName,"_resizing") ) { return ::hx::Val( _resizing ); }
		if (HX_FIELD_EQ(inName,"_onCreate") ) { return ::hx::Val( _onCreate_dyn() ); }
		if (HX_FIELD_EQ(inName,"applySkin") ) { return ::hx::Val( applySkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"_onResize") ) { return ::hx::Val( _onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"getParent") ) { return ::hx::Val( getParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_right") ) { return ::hx::Val( set_right_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_right") ) { return ::hx::Val( get_right_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_topPt") ) { return ::hx::Val( set_topPt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_topPt") ) { return ::hx::Val( get_topPt_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_newParent") ) { return ::hx::Val( _newParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return ::hx::Val( addChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildAs") ) { return ::hx::Val( getChildAs_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_leftPt") ) { return ::hx::Val( set_leftPt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_leftPt") ) { return ::hx::Val( get_leftPt_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottom") ) { return ::hx::Val( set_bottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottom") ) { return ::hx::Val( get_bottom_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { return ::hx::Val( initialized ); }
		if (HX_FIELD_EQ(inName,"_topPercent") ) { return ::hx::Val( _topPercent ); }
		if (HX_FIELD_EQ(inName,"_skinQueued") ) { return ::hx::Val( _skinQueued ); }
		if (HX_FIELD_EQ(inName,"applyLayout") ) { return ::hx::Val( applyLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"onNewParent") ) { return ::hx::Val( onNewParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return ::hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"getParentAs") ) { return ::hx::Val( getParentAs_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wparent") ) { return ::hx::Val( get_wparent_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rightPt") ) { return ::hx::Val( set_rightPt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rightPt") ) { return ::hx::Val( get_rightPt_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_widthPt") ) { return ::hx::Val( set_widthPt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_widthPt") ) { return ::hx::Val( get_widthPt_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"contentWidth") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_contentWidth() : contentWidth ); }
		if (HX_FIELD_EQ(inName,"_leftPercent") ) { return ::hx::Val( _leftPercent ); }
		if (HX_FIELD_EQ(inName,"_appliedSkin") ) { return ::hx::Val( _appliedSkin ); }
		if (HX_FIELD_EQ(inName,"onInitialize") ) { return ::hx::Val( onInitialize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_overflow") ) { return ::hx::Val( set_overflow_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_skinName") ) { return ::hx::Val( set_skinName_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottomPt") ) { return ::hx::Val( set_bottomPt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomPt") ) { return ::hx::Val( get_bottomPt_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_heightPt") ) { return ::hx::Val( set_heightPt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_heightPt") ) { return ::hx::Val( get_heightPt_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_widthPercent") ) { return ::hx::Val( _widthPercent ); }
		if (HX_FIELD_EQ(inName,"contentHeight") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_contentHeight() : contentHeight ); }
		if (HX_FIELD_EQ(inName,"_silentResize") ) { return ::hx::Val( _silentResize ); }
		if (HX_FIELD_EQ(inName,"_rightPercent") ) { return ::hx::Val( _rightPercent ); }
		if (HX_FIELD_EQ(inName,"_onInitialize") ) { return ::hx::Val( _onInitialize_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return ::hx::Val( removeChildAt_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_heightPercent") ) { return ::hx::Val( _heightPercent ); }
		if (HX_FIELD_EQ(inName,"_bottomPercent") ) { return ::hx::Val( _bottomPercent ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_onParentResize") ) { return ::hx::Val( _onParentResize_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_widthUsePercent") ) { return ::hx::Val( _widthUsePercent ); }
		if (HX_FIELD_EQ(inName,"_findChildWidget") ) { return ::hx::Val( _findChildWidget_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNearestParent") ) { return ::hx::Val( getNearestParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_contentWidth") ) { return ::hx::Val( get_contentWidth_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"minWidthByContent") ) { return ::hx::Val( minWidthByContent ); }
		if (HX_FIELD_EQ(inName,"_heightUsePercent") ) { return ::hx::Val( _heightUsePercent ); }
		if (HX_FIELD_EQ(inName,"get_contentHeight") ) { return ::hx::Val( get_contentHeight_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"minHeightByContent") ) { return ::hx::Val( minHeightByContent ); }
		if (HX_FIELD_EQ(inName,"_resizeWithPercent") ) { return ::hx::Val( _resizeWithPercent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Widget_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_w(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"h") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_h(inValue.Cast< Float >()) ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_id(inValue.Cast< ::String >()) );id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_top(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"tip") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_tip(inValue.Cast<  ::ru::stablex::ui::widgets::Tip >()) );tip=inValue.Cast<  ::ru::stablex::ui::widgets::Tip >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_left(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_top") ) { _top=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skin") ) { skin=inValue.Cast<  ::ru::stablex::ui::skins::Skin >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_right(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_xUse") ) { _xUse=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_yUse") ) { _yUse=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"topPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_topPt(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_leftPt(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_right") ) { _right=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"layout") ) { layout=inValue.Cast<  ::ru::stablex::ui::layouts::Layout >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"created") ) { created=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"widthPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_widthPt(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_rightPt(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_bottom") ) { _bottom=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"defaults") ) { defaults=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"heightPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_heightPt(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"bottomPt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bottomPt(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"skinName") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_skinName(inValue.Cast< ::String >()) );skinName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"overflow") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_overflow(inValue.Cast< bool >()) );overflow=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { destroyed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_resizing") ) { _resizing=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_topPercent") ) { _topPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_skinQueued") ) { _skinQueued=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"contentWidth") ) { contentWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftPercent") ) { _leftPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_appliedSkin") ) { _appliedSkin=inValue.Cast<  ::ru::stablex::ui::skins::Skin >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_widthPercent") ) { _widthPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"contentHeight") ) { contentHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_silentResize") ) { _silentResize=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightPercent") ) { _rightPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_heightPercent") ) { _heightPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bottomPercent") ) { _bottomPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_widthUsePercent") ) { _widthUsePercent=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"minWidthByContent") ) { minWidthByContent=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_heightUsePercent") ) { _heightUsePercent=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"minHeightByContent") ) { minHeightByContent=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Widget_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("defaults",92,d0,99,af));
	outFields->push(HX_("initialized",14,f5,0f,37));
	outFields->push(HX_("created",e8,b5,6a,11));
	outFields->push(HX_("destroyed",d9,37,27,f4));
	outFields->push(HX_("w",77,00,00,00));
	outFields->push(HX_("contentWidth",0d,0a,f1,b0));
	outFields->push(HX_("widthPt",aa,09,01,31));
	outFields->push(HX_("_width",47,fd,49,c6));
	outFields->push(HX_("_widthPercent",3e,1c,c9,82));
	outFields->push(HX_("_widthUsePercent",65,cd,76,db));
	outFields->push(HX_("minWidthByContent",6e,92,38,c1));
	outFields->push(HX_("minHeightByContent",c9,85,56,b4));
	outFields->push(HX_("h",68,00,00,00));
	outFields->push(HX_("contentHeight",00,3a,47,d8));
	outFields->push(HX_("heightPt",cb,55,4b,33));
	outFields->push(HX_("_height",86,19,c3,70));
	outFields->push(HX_("_heightPercent",df,95,55,a1));
	outFields->push(HX_("_heightUsePercent",64,4e,a7,c1));
	outFields->push(HX_("_silentResize",48,75,c6,47));
	outFields->push(HX_("_resizing",90,1f,16,e9));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("leftPt",eb,9d,c7,99));
	outFields->push(HX_("_left",e6,23,c1,fa));
	outFields->push(HX_("_leftPercent",7f,97,77,de));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("rightPt",00,01,64,13));
	outFields->push(HX_("_right",1d,53,4b,e5));
	outFields->push(HX_("_rightPercent",28,cd,f7,45));
	outFields->push(HX_("_xUse",8e,9a,a3,02));
	outFields->push(HX_("_yUse",2d,d1,4c,03));
	outFields->push(HX_("wparent",e1,38,f8,41));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("topPt",f9,3b,2f,14));
	outFields->push(HX_("_top",96,ab,23,3f));
	outFields->push(HX_("_topPercent",cf,65,32,b7));
	outFields->push(HX_("bottom",eb,e6,78,65));
	outFields->push(HX_("bottomPt",cf,fd,b0,62));
	outFields->push(HX_("_bottom",8a,f8,ef,d3));
	outFields->push(HX_("_bottomPercent",5b,5f,dc,11));
	outFields->push(HX_("skin",7d,16,55,4c));
	outFields->push(HX_("_appliedSkin",5b,44,64,01));
	outFields->push(HX_("_skinQueued",2f,25,b4,b6));
	outFields->push(HX_("skinName",68,37,87,98));
	outFields->push(HX_("overflow",42,e3,3b,41));
	outFields->push(HX_("tip",5b,61,58,00));
	outFields->push(HX_("layout",aa,ae,b8,58));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Widget_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Widget_obj,defaults),HX_("defaults",92,d0,99,af)},
	{::hx::fsBool,(int)offsetof(Widget_obj,initialized),HX_("initialized",14,f5,0f,37)},
	{::hx::fsBool,(int)offsetof(Widget_obj,created),HX_("created",e8,b5,6a,11)},
	{::hx::fsBool,(int)offsetof(Widget_obj,destroyed),HX_("destroyed",d9,37,27,f4)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,contentWidth),HX_("contentWidth",0d,0a,f1,b0)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_width),HX_("_width",47,fd,49,c6)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_widthPercent),HX_("_widthPercent",3e,1c,c9,82)},
	{::hx::fsBool,(int)offsetof(Widget_obj,_widthUsePercent),HX_("_widthUsePercent",65,cd,76,db)},
	{::hx::fsBool,(int)offsetof(Widget_obj,minWidthByContent),HX_("minWidthByContent",6e,92,38,c1)},
	{::hx::fsBool,(int)offsetof(Widget_obj,minHeightByContent),HX_("minHeightByContent",c9,85,56,b4)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,contentHeight),HX_("contentHeight",00,3a,47,d8)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_height),HX_("_height",86,19,c3,70)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_heightPercent),HX_("_heightPercent",df,95,55,a1)},
	{::hx::fsBool,(int)offsetof(Widget_obj,_heightUsePercent),HX_("_heightUsePercent",64,4e,a7,c1)},
	{::hx::fsBool,(int)offsetof(Widget_obj,_silentResize),HX_("_silentResize",48,75,c6,47)},
	{::hx::fsBool,(int)offsetof(Widget_obj,_resizing),HX_("_resizing",90,1f,16,e9)},
	{::hx::fsString,(int)offsetof(Widget_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_left),HX_("_left",e6,23,c1,fa)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_leftPercent),HX_("_leftPercent",7f,97,77,de)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_right),HX_("_right",1d,53,4b,e5)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_rightPercent),HX_("_rightPercent",28,cd,f7,45)},
	{::hx::fsInt,(int)offsetof(Widget_obj,_xUse),HX_("_xUse",8e,9a,a3,02)},
	{::hx::fsInt,(int)offsetof(Widget_obj,_yUse),HX_("_yUse",2d,d1,4c,03)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_top),HX_("_top",96,ab,23,3f)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_topPercent),HX_("_topPercent",cf,65,32,b7)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_bottom),HX_("_bottom",8a,f8,ef,d3)},
	{::hx::fsFloat,(int)offsetof(Widget_obj,_bottomPercent),HX_("_bottomPercent",5b,5f,dc,11)},
	{::hx::fsObject /*  ::ru::stablex::ui::skins::Skin */ ,(int)offsetof(Widget_obj,skin),HX_("skin",7d,16,55,4c)},
	{::hx::fsObject /*  ::ru::stablex::ui::skins::Skin */ ,(int)offsetof(Widget_obj,_appliedSkin),HX_("_appliedSkin",5b,44,64,01)},
	{::hx::fsBool,(int)offsetof(Widget_obj,_skinQueued),HX_("_skinQueued",2f,25,b4,b6)},
	{::hx::fsString,(int)offsetof(Widget_obj,skinName),HX_("skinName",68,37,87,98)},
	{::hx::fsBool,(int)offsetof(Widget_obj,overflow),HX_("overflow",42,e3,3b,41)},
	{::hx::fsObject /*  ::ru::stablex::ui::widgets::Tip */ ,(int)offsetof(Widget_obj,tip),HX_("tip",5b,61,58,00)},
	{::hx::fsObject /*  ::ru::stablex::ui::layouts::Layout */ ,(int)offsetof(Widget_obj,layout),HX_("layout",aa,ae,b8,58)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Widget_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Widget_obj::_X_USE_LEFT,HX_("_X_USE_LEFT",85,2f,10,29)},
	{::hx::fsInt,(void *) &Widget_obj::_X_USE_LEFT_PERCENT,HX_("_X_USE_LEFT_PERCENT",ab,94,29,d5)},
	{::hx::fsInt,(void *) &Widget_obj::_X_USE_RIGHT,HX_("_X_USE_RIGHT",7e,72,26,3c)},
	{::hx::fsInt,(void *) &Widget_obj::_X_USE_RIGHT_PERCENT,HX_("_X_USE_RIGHT_PERCENT",a4,f8,20,58)},
	{::hx::fsInt,(void *) &Widget_obj::_Y_USE_TOP,HX_("_Y_USE_TOP",b8,05,39,e3)},
	{::hx::fsInt,(void *) &Widget_obj::_Y_USE_TOP_PERCENT,HX_("_Y_USE_TOP_PERCENT",de,55,30,cb)},
	{::hx::fsInt,(void *) &Widget_obj::_Y_USE_BOTTOM,HX_("_Y_USE_BOTTOM",88,bb,8f,be)},
	{::hx::fsInt,(void *) &Widget_obj::_Y_USE_BOTTOM_PERCENT,HX_("_Y_USE_BOTTOM_PERCENT",ae,5b,e9,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Widget_obj_sMemberFields[] = {
	HX_("defaults",92,d0,99,af),
	HX_("initialized",14,f5,0f,37),
	HX_("created",e8,b5,6a,11),
	HX_("destroyed",d9,37,27,f4),
	HX_("contentWidth",0d,0a,f1,b0),
	HX_("_width",47,fd,49,c6),
	HX_("_widthPercent",3e,1c,c9,82),
	HX_("_widthUsePercent",65,cd,76,db),
	HX_("minWidthByContent",6e,92,38,c1),
	HX_("minHeightByContent",c9,85,56,b4),
	HX_("contentHeight",00,3a,47,d8),
	HX_("_height",86,19,c3,70),
	HX_("_heightPercent",df,95,55,a1),
	HX_("_heightUsePercent",64,4e,a7,c1),
	HX_("_silentResize",48,75,c6,47),
	HX_("_resizing",90,1f,16,e9),
	HX_("id",db,5b,00,00),
	HX_("_left",e6,23,c1,fa),
	HX_("_leftPercent",7f,97,77,de),
	HX_("_right",1d,53,4b,e5),
	HX_("_rightPercent",28,cd,f7,45),
	HX_("_xUse",8e,9a,a3,02),
	HX_("_yUse",2d,d1,4c,03),
	HX_("_top",96,ab,23,3f),
	HX_("_topPercent",cf,65,32,b7),
	HX_("_bottom",8a,f8,ef,d3),
	HX_("_bottomPercent",5b,5f,dc,11),
	HX_("skin",7d,16,55,4c),
	HX_("_appliedSkin",5b,44,64,01),
	HX_("_skinQueued",2f,25,b4,b6),
	HX_("skinName",68,37,87,98),
	HX_("overflow",42,e3,3b,41),
	HX_("tip",5b,61,58,00),
	HX_("layout",aa,ae,b8,58),
	HX_("_onInitialize",2e,66,6d,a7),
	HX_("onInitialize",4f,d3,fe,c4),
	HX_("_onCreate",da,54,52,a3),
	HX_("onCreate",7b,5d,bc,5b),
	HX_("free",ac,9c,c2,43),
	HX_("applySkin",0b,17,24,36),
	HX_("applyLayout",b8,6e,b3,94),
	HX_("refresh",db,d9,20,ed),
	HX_("_newParent",6b,4d,d1,06),
	HX_("_resizeWithPercent",8c,c8,3a,70),
	HX_("onNewParent",8b,b4,71,cd),
	HX_("_onParentResize",1c,b7,34,8e),
	HX_("resize",f4,59,7b,08),
	HX_("_onResize",d2,47,be,2f),
	HX_("onResize",73,50,28,e8),
	HX_("addChild",bb,cf,16,bf),
	HX_("addChildAt",8e,ad,36,ce),
	HX_("removeChild",b8,86,ed,43),
	HX_("removeChildAt",cb,dd,66,3f),
	HX_("getChildAs",b8,07,0e,b6),
	HX_("getChild",26,b9,90,a5),
	HX_("_findChildWidget",48,5d,61,05),
	HX_("getParent",60,8e,d4,69),
	HX_("getParentAs",72,1f,dd,f2),
	HX_("getNearestParent",b2,d5,80,ad),
	HX_("as",f2,54,00,00),
	HX_("set_overflow",bf,ba,4e,0b),
	HX_("set_skinName",e5,0e,9a,62),
	HX_("get_wparent",f8,98,f2,c7),
	HX_("set_left",04,1d,c8,75),
	HX_("get_left",90,c3,6a,c7),
	HX_("set_right",3f,54,5e,10),
	HX_("get_right",33,68,0d,2d),
	HX_("set_leftPt",28,ac,cc,8d),
	HX_("get_leftPt",b4,0d,4f,8a),
	HX_("set_rightPt",23,68,cb,a3),
	HX_("get_rightPt",17,61,5e,99),
	HX_("set_top",38,c0,ce,19),
	HX_("get_top",2c,2f,cd,26),
	HX_("set_bottom",28,f5,7d,59),
	HX_("get_bottom",b4,56,00,56),
	HX_("set_topPt",5c,84,29,3b),
	HX_("get_topPt",50,98,d8,57),
	HX_("set_bottomPt",4c,d5,c3,2c),
	HX_("get_bottomPt",d8,b1,ca,17),
	HX_("set_w",5a,9b,2f,7a),
	HX_("get_w",4e,a5,60,91),
	HX_("set_h",4b,9b,2f,7a),
	HX_("get_h",3f,a5,60,91),
	HX_("get_contentHeight",57,45,b7,de),
	HX_("get_contentWidth",96,f6,8f,b5),
	HX_("set_widthPt",cd,70,68,c1),
	HX_("get_widthPt",c1,69,fb,b6),
	HX_("set_heightPt",48,2d,5e,fd),
	HX_("get_heightPt",d4,09,65,e8),
	HX_("set_id",98,47,78,6f),
	HX_("set_tip",fe,ba,ce,19),
	::String(null()) };

static void Widget_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Widget_obj::_X_USE_LEFT,"_X_USE_LEFT");
	HX_MARK_MEMBER_NAME(Widget_obj::_X_USE_LEFT_PERCENT,"_X_USE_LEFT_PERCENT");
	HX_MARK_MEMBER_NAME(Widget_obj::_X_USE_RIGHT,"_X_USE_RIGHT");
	HX_MARK_MEMBER_NAME(Widget_obj::_X_USE_RIGHT_PERCENT,"_X_USE_RIGHT_PERCENT");
	HX_MARK_MEMBER_NAME(Widget_obj::_Y_USE_TOP,"_Y_USE_TOP");
	HX_MARK_MEMBER_NAME(Widget_obj::_Y_USE_TOP_PERCENT,"_Y_USE_TOP_PERCENT");
	HX_MARK_MEMBER_NAME(Widget_obj::_Y_USE_BOTTOM,"_Y_USE_BOTTOM");
	HX_MARK_MEMBER_NAME(Widget_obj::_Y_USE_BOTTOM_PERCENT,"_Y_USE_BOTTOM_PERCENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Widget_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Widget_obj::_X_USE_LEFT,"_X_USE_LEFT");
	HX_VISIT_MEMBER_NAME(Widget_obj::_X_USE_LEFT_PERCENT,"_X_USE_LEFT_PERCENT");
	HX_VISIT_MEMBER_NAME(Widget_obj::_X_USE_RIGHT,"_X_USE_RIGHT");
	HX_VISIT_MEMBER_NAME(Widget_obj::_X_USE_RIGHT_PERCENT,"_X_USE_RIGHT_PERCENT");
	HX_VISIT_MEMBER_NAME(Widget_obj::_Y_USE_TOP,"_Y_USE_TOP");
	HX_VISIT_MEMBER_NAME(Widget_obj::_Y_USE_TOP_PERCENT,"_Y_USE_TOP_PERCENT");
	HX_VISIT_MEMBER_NAME(Widget_obj::_Y_USE_BOTTOM,"_Y_USE_BOTTOM");
	HX_VISIT_MEMBER_NAME(Widget_obj::_Y_USE_BOTTOM_PERCENT,"_Y_USE_BOTTOM_PERCENT");
};

#endif

::hx::Class Widget_obj::__mClass;

static ::String Widget_obj_sStaticFields[] = {
	HX_("_X_USE_LEFT",85,2f,10,29),
	HX_("_X_USE_LEFT_PERCENT",ab,94,29,d5),
	HX_("_X_USE_RIGHT",7e,72,26,3c),
	HX_("_X_USE_RIGHT_PERCENT",a4,f8,20,58),
	HX_("_Y_USE_TOP",b8,05,39,e3),
	HX_("_Y_USE_TOP_PERCENT",de,55,30,cb),
	HX_("_Y_USE_BOTTOM",88,bb,8f,be),
	HX_("_Y_USE_BOTTOM_PERCENT",ae,5b,e9,ff),
	::String(null())
};

void Widget_obj::__register()
{
	Widget_obj _hx_dummy;
	Widget_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ru.stablex.ui.widgets.Widget",61,2d,45,96);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Widget_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Widget_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Widget_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Widget_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Widget_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Widget_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Widget_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Widget_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_23_boot)
HXDLIN(  23)		_X_USE_LEFT = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_24_boot)
HXDLIN(  24)		_X_USE_LEFT_PERCENT = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_25_boot)
HXDLIN(  25)		_X_USE_RIGHT = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_26_boot)
HXDLIN(  26)		_X_USE_RIGHT_PERCENT = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_28_boot)
HXDLIN(  28)		_Y_USE_TOP = 5;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_29_boot)
HXDLIN(  29)		_Y_USE_TOP_PERCENT = 6;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_30_boot)
HXDLIN(  30)		_Y_USE_BOTTOM = 7;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a3e6fb7fd9c985bf_31_boot)
HXDLIN(  31)		_Y_USE_BOTTOM_PERCENT = 8;
            	}
}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
} // end namespace widgets
