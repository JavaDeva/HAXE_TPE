// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_events_WidgetEvent
#include <ru/stablex/ui/events/WidgetEvent.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Box
#include <ru/stablex/ui/widgets/Box.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Text
#include <ru/stablex/ui/widgets/Text.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c60ac8c47ad49c97_16_new,"ru.stablex.ui.widgets.Text","new",0x9900a6fc,"ru.stablex.ui.widgets.Text.new","ru/stablex/ui/widgets/Text.hx",16,0x2782b8b4)
HX_LOCAL_STACK_FRAME(_hx_pos_c60ac8c47ad49c97_53_get_highlightFormat,"ru.stablex.ui.widgets.Text","get_highlightFormat",0x613b963e,"ru.stablex.ui.widgets.Text.get_highlightFormat","ru/stablex/ui/widgets/Text.hx",53,0x2782b8b4)
HX_LOCAL_STACK_FRAME(_hx_pos_c60ac8c47ad49c97_88_set_highlightFormat,"ru.stablex.ui.widgets.Text","set_highlightFormat",0x9dd8894a,"ru.stablex.ui.widgets.Text.set_highlightFormat","ru/stablex/ui/widgets/Text.hx",88,0x2782b8b4)
HX_LOCAL_STACK_FRAME(_hx_pos_c60ac8c47ad49c97_96_refresh,"ru.stablex.ui.widgets.Text","refresh",0xde732e77,"ru.stablex.ui.widgets.Text.refresh","ru/stablex/ui/widgets/Text.hx",96,0x2782b8b4)
HX_LOCAL_STACK_FRAME(_hx_pos_c60ac8c47ad49c97_113_setLabelTextFormat,"ru.stablex.ui.widgets.Text","setLabelTextFormat",0x0711663a,"ru.stablex.ui.widgets.Text.setLabelTextFormat","ru/stablex/ui/widgets/Text.hx",113,0x2782b8b4)
HX_LOCAL_STACK_FRAME(_hx_pos_c60ac8c47ad49c97_129_highlight,"ru.stablex.ui.widgets.Text","highlight",0x970609d0,"ru.stablex.ui.widgets.Text.highlight","ru/stablex/ui/widgets/Text.hx",129,0x2782b8b4)
HX_LOCAL_STACK_FRAME(_hx_pos_c60ac8c47ad49c97_138_unhighlight,"ru.stablex.ui.widgets.Text","unhighlight",0xf035af57,"ru.stablex.ui.widgets.Text.unhighlight","ru/stablex/ui/widgets/Text.hx",138,0x2782b8b4)
HX_LOCAL_STACK_FRAME(_hx_pos_c60ac8c47ad49c97_149_get_text,"ru.stablex.ui.widgets.Text","get_text",0x036c3c1a,"ru.stablex.ui.widgets.Text.get_text","ru/stablex/ui/widgets/Text.hx",149,0x2782b8b4)
HX_LOCAL_STACK_FRAME(_hx_pos_c60ac8c47ad49c97_157_set_text,"ru.stablex.ui.widgets.Text","set_text",0xb1c9958e,"ru.stablex.ui.widgets.Text.set_text","ru/stablex/ui/widgets/Text.hx",157,0x2782b8b4)
HX_LOCAL_STACK_FRAME(_hx_pos_c60ac8c47ad49c97_182_html5TextFieldSizeWorkaround,"ru.stablex.ui.widgets.Text","html5TextFieldSizeWorkaround",0x5684dd46,"ru.stablex.ui.widgets.Text.html5TextFieldSizeWorkaround","ru/stablex/ui/widgets/Text.hx",182,0x2782b8b4)
namespace ru{
namespace stablex{
namespace ui{
namespace widgets{

void Text_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_c60ac8c47ad49c97_16_new)
HXLINE(  25)		this->highlighted = false;
HXLINE(  35)		super::__construct();
HXLINE(  37)		this->label = ::hx::TCast<  ::openfl::text::TextField >::cast(this->addChild( ::openfl::text::TextField_obj::__alloc( HX_CTX )));
HXLINE(  38)		this->label->set_autoSize(1);
HXLINE(  39)		this->label->set_multiline(true);
HXLINE(  42)		this->format = this->label->get_defaultTextFormat();
HXLINE(  44)		this->align = HX_("top,left",7e,2b,f4,57);
            	}

Dynamic Text_obj::__CreateEmpty() { return new Text_obj; }

void *Text_obj::_hx_vtable = 0;

Dynamic Text_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Text_obj > _hx_result = new Text_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Text_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2383f585) {
		if (inClassId<=(int)0x1210c5aa) {
			if (inClassId<=(int)0x0c89e854) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x0c89e854;
				}
			} else {
				return inClassId==(int)0x1210c5aa;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x2383f585;
		}
	} else {
		if (inClassId<=(int)0x5a9290f6) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x270e5222 || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x5a9290f6;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::openfl::text::TextFormat Text_obj::get_highlightFormat(){
            	HX_GC_STACKFRAME(&_hx_pos_c60ac8c47ad49c97_53_get_highlightFormat)
HXLINE(  54)		if (::hx::IsNull( this->_hightlightFormat )) {
HXLINE(  56)			this->_hightlightFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,this->format->font,this->format->size,this->format->color,this->format->bold,this->format->italic,this->format->underline,this->format->url,this->format->target,this->format->align,this->format->leftMargin,this->format->rightMargin,this->format->indent,this->format->leading);
            		}
HXLINE(  79)		return this->_hightlightFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_highlightFormat,return )

 ::openfl::text::TextFormat Text_obj::set_highlightFormat( ::openfl::text::TextFormat hl){
            	HX_STACKFRAME(&_hx_pos_c60ac8c47ad49c97_88_set_highlightFormat)
HXDLIN(  88)		return (this->_hightlightFormat = hl);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_highlightFormat,return )

void Text_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_c60ac8c47ad49c97_96_refresh)
HXLINE(  97)		this->setLabelTextFormat();
HXLINE(  99)		bool _hx_tmp;
HXDLIN(  99)		if (!(this->autoWidth)) {
HXLINE(  99)			_hx_tmp = this->label->get_wordWrap();
            		}
            		else {
HXLINE(  99)			_hx_tmp = false;
            		}
HXDLIN(  99)		if (_hx_tmp) {
HXLINE( 100)			this->label->set_width(this->_width);
            		}
HXLINE( 103)		this->super::refresh();
            	}


void Text_obj::setLabelTextFormat(){
            	HX_STACKFRAME(&_hx_pos_c60ac8c47ad49c97_113_setLabelTextFormat)
HXDLIN( 113)		if (this->highlighted) {
HXLINE( 114)			 ::openfl::text::TextField _hx_tmp = this->label;
HXDLIN( 114)			_hx_tmp->set_defaultTextFormat(this->get_highlightFormat());
HXLINE( 115)			if ((this->label->get_text().length > 0)) {
HXLINE( 116)				 ::openfl::text::TextField _hx_tmp = this->label;
HXDLIN( 116)				 ::openfl::text::TextFormat _hx_tmp1 = this->get_highlightFormat();
HXDLIN( 116)				_hx_tmp->setTextFormat(_hx_tmp1,0,this->get_text().length);
            			}
            		}
            		else {
HXLINE( 119)			this->label->set_defaultTextFormat(this->format);
HXLINE( 120)			if ((this->label->get_text().length > 0)) {
HXLINE( 121)				 ::openfl::text::TextField _hx_tmp = this->label;
HXDLIN( 121)				 ::openfl::text::TextFormat _hx_tmp1 = this->format;
HXDLIN( 121)				_hx_tmp->setTextFormat(_hx_tmp1,0,this->get_text().length);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,setLabelTextFormat,(void))

void Text_obj::highlight(){
            	HX_STACKFRAME(&_hx_pos_c60ac8c47ad49c97_129_highlight)
HXLINE( 130)		this->highlighted = true;
HXLINE( 131)		this->refresh();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,highlight,(void))

void Text_obj::unhighlight(){
            	HX_STACKFRAME(&_hx_pos_c60ac8c47ad49c97_138_unhighlight)
HXLINE( 139)		this->highlighted = false;
HXLINE( 140)		this->refresh();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,unhighlight,(void))

::String Text_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_c60ac8c47ad49c97_149_get_text)
HXDLIN( 149)		return this->label->get_text();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_text,return )

::String Text_obj::set_text(::String txt){
            	HX_GC_STACKFRAME(&_hx_pos_c60ac8c47ad49c97_157_set_text)
HXLINE( 158)		this->label->set_text((HX_("",00,00,00,00) + txt));
HXLINE( 163)		bool _hx_tmp;
HXDLIN( 163)		if (!(this->autoWidth)) {
HXLINE( 163)			_hx_tmp = this->autoHeight;
            		}
            		else {
HXLINE( 163)			_hx_tmp = true;
            		}
HXDLIN( 163)		if (_hx_tmp) {
HXLINE( 164)			this->refresh();
            		}
            		else {
HXLINE( 167)			this->alignElements();
            		}
HXLINE( 170)		if (this->created) {
HXLINE( 171)			this->dispatchEvent( ::ru::stablex::ui::events::WidgetEvent_obj::__alloc( HX_CTX ,HX_("widgetTextChange",e1,a2,21,09),null()));
            		}
HXLINE( 174)		return txt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_text,return )

void Text_obj::html5TextFieldSizeWorkaround(){
            	HX_STACKFRAME(&_hx_pos_c60ac8c47ad49c97_182_html5TextFieldSizeWorkaround)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,html5TextFieldSizeWorkaround,(void))


::hx::ObjectPtr< Text_obj > Text_obj::__new() {
	::hx::ObjectPtr< Text_obj > __this = new Text_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Text_obj > Text_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Text_obj *__this = (Text_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Text_obj), true, "ru.stablex.ui.widgets.Text"));
	*(void **)__this = Text_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Text_obj::Text_obj()
{
}

void Text_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Text);
	HX_MARK_MEMBER_NAME(label,"label");
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_MEMBER_NAME(_hightlightFormat,"_hightlightFormat");
	HX_MARK_MEMBER_NAME(highlighted,"highlighted");
	 ::ru::stablex::ui::widgets::Box_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Text_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(label,"label");
	HX_VISIT_MEMBER_NAME(format,"format");
	HX_VISIT_MEMBER_NAME(_hightlightFormat,"_hightlightFormat");
	HX_VISIT_MEMBER_NAME(highlighted,"highlighted");
	 ::ru::stablex::ui::widgets::Box_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Text_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_text() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { return ::hx::Val( label ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { return ::hx::Val( format ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"refresh") ) { return ::hx::Val( refresh_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"highlight") ) { return ::hx::Val( highlight_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"highlighted") ) { return ::hx::Val( highlighted ); }
		if (HX_FIELD_EQ(inName,"unhighlight") ) { return ::hx::Val( unhighlight_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"highlightFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_highlightFormat() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_hightlightFormat") ) { return ::hx::Val( _hightlightFormat ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setLabelTextFormat") ) { return ::hx::Val( setLabelTextFormat_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_highlightFormat") ) { return ::hx::Val( get_highlightFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_highlightFormat") ) { return ::hx::Val( set_highlightFormat_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"html5TextFieldSizeWorkaround") ) { return ::hx::Val( html5TextFieldSizeWorkaround_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Text_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { label=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"highlighted") ) { highlighted=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"highlightFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_highlightFormat(inValue.Cast<  ::openfl::text::TextFormat >()) ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_hightlightFormat") ) { _hightlightFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Text_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("label",f4,0d,af,6f));
	outFields->push(HX_("format",37,8f,8e,fd));
	outFields->push(HX_("highlightFormat",8b,f8,63,87));
	outFields->push(HX_("_hightlightFormat",7a,35,ca,75));
	outFields->push(HX_("highlighted",93,a3,69,6e));
	outFields->push(HX_("text",ad,cc,f9,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Text_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(Text_obj,label),HX_("label",f4,0d,af,6f)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(Text_obj,format),HX_("format",37,8f,8e,fd)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(Text_obj,_hightlightFormat),HX_("_hightlightFormat",7a,35,ca,75)},
	{::hx::fsBool,(int)offsetof(Text_obj,highlighted),HX_("highlighted",93,a3,69,6e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Text_obj_sStaticStorageInfo = 0;
#endif

static ::String Text_obj_sMemberFields[] = {
	HX_("label",f4,0d,af,6f),
	HX_("format",37,8f,8e,fd),
	HX_("_hightlightFormat",7a,35,ca,75),
	HX_("highlighted",93,a3,69,6e),
	HX_("get_highlightFormat",a2,c7,6e,12),
	HX_("set_highlightFormat",ae,ba,0b,4f),
	HX_("refresh",db,d9,20,ed),
	HX_("setLabelTextFormat",56,6d,84,5a),
	HX_("highlight",34,56,00,ed),
	HX_("unhighlight",bb,dc,a6,72),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("html5TextFieldSizeWorkaround",62,5f,fa,c4),
	::String(null()) };

::hx::Class Text_obj::__mClass;

void Text_obj::__register()
{
	Text_obj _hx_dummy;
	Text_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ru.stablex.ui.widgets.Text",0a,b9,f2,b5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Text_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Text_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Text_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Text_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
} // end namespace widgets
