// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_UIBuilder
#include <ru/stablex/ui/UIBuilder.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_skins_Skin
#include <ru/stablex/ui/skins/Skin.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Bmp
#include <ru/stablex/ui/widgets/Bmp.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Box
#include <ru/stablex/ui/widgets/Box.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Button
#include <ru/stablex/ui/widgets/Button.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Text
#include <ru/stablex/ui/widgets/Text.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c75fe13fd35c2192_13_new,"ru.stablex.ui.widgets.Button","new",0xf596f401,"ru.stablex.ui.widgets.Button.new","ru/stablex/ui/widgets/Button.hx",13,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_209___default_onPress,"ru.stablex.ui.widgets.Button","__default_onPress",0x08ce5967,"ru.stablex.ui.widgets.Button.__default_onPress","ru/stablex/ui/widgets/Button.hx",209,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_220___default_onRelease,"ru.stablex.ui.widgets.Button","__default_onRelease",0xbb2bccab,"ru.stablex.ui.widgets.Button.__default_onRelease","ru/stablex/ui/widgets/Button.hx",220,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_231___default_onHover,"ru.stablex.ui.widgets.Button","__default_onHover",0x6baaeba0,"ru.stablex.ui.widgets.Button.__default_onHover","ru/stablex/ui/widgets/Button.hx",231,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_240___default_onHout,"ru.stablex.ui.widgets.Button","__default_onHout",0xca8713c2,"ru.stablex.ui.widgets.Button.__default_onHout","ru/stablex/ui/widgets/Button.hx",240,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_249_set_disabled,"ru.stablex.ui.widgets.Button","set_disabled",0x2dacf938,"ru.stablex.ui.widgets.Button.set_disabled","ru/stablex/ui/widgets/Button.hx",249,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_277_set_icoBeforeLabel,"ru.stablex.ui.widgets.Button","set_icoBeforeLabel",0xef16845c,"ru.stablex.ui.widgets.Button.set_icoBeforeLabel","ru/stablex/ui/widgets/Button.hx",277,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_292_get_ico,"ru.stablex.ui.widgets.Button","get_ico",0x3358d40d,"ru.stablex.ui.widgets.Button.get_ico","ru/stablex/ui/widgets/Button.hx",292,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_307_set_ico,"ru.stablex.ui.widgets.Button","set_ico",0x265a6519,"ru.stablex.ui.widgets.Button.set_ico","ru/stablex/ui/widgets/Button.hx",307,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_325_get_icoHovered,"ru.stablex.ui.widgets.Button","get_icoHovered",0x5dc1c48e,"ru.stablex.ui.widgets.Button.get_icoHovered","ru/stablex/ui/widgets/Button.hx",325,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_341_set_icoHovered,"ru.stablex.ui.widgets.Button","set_icoHovered",0x7de1ad02,"ru.stablex.ui.widgets.Button.set_icoHovered","ru/stablex/ui/widgets/Button.hx",341,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_359_get_icoPressed,"ru.stablex.ui.widgets.Button","get_icoPressed",0x1cf17215,"ru.stablex.ui.widgets.Button.get_icoPressed","ru/stablex/ui/widgets/Button.hx",359,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_375_set_icoPressed,"ru.stablex.ui.widgets.Button","set_icoPressed",0x3d115a89,"ru.stablex.ui.widgets.Button.set_icoPressed","ru/stablex/ui/widgets/Button.hx",375,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_393_get_icoDisabled,"ru.stablex.ui.widgets.Button","get_icoDisabled",0x424526a9,"ru.stablex.ui.widgets.Button.get_icoDisabled","ru/stablex/ui/widgets/Button.hx",393,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_409_set_icoDisabled,"ru.stablex.ui.widgets.Button","set_icoDisabled",0x3e10a3b5,"ru.stablex.ui.widgets.Button.set_icoDisabled","ru/stablex/ui/widgets/Button.hx",409,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_426_set_skinHoveredName,"ru.stablex.ui.widgets.Button","set_skinHoveredName",0xa531ad4d,"ru.stablex.ui.widgets.Button.set_skinHoveredName","ru/stablex/ui/widgets/Button.hx",426,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_436_set_skinPressedName,"ru.stablex.ui.widgets.Button","set_skinPressedName",0x35542a54,"ru.stablex.ui.widgets.Button.set_skinPressedName","ru/stablex/ui/widgets/Button.hx",436,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_445_set_skinDisabledName,"ru.stablex.ui.widgets.Button","set_skinDisabledName",0xe1efcbc0,"ru.stablex.ui.widgets.Button.set_skinDisabledName","ru/stablex/ui/widgets/Button.hx",445,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_455__addIco,"ru.stablex.ui.widgets.Button","_addIco",0x1a0c2d74,"ru.stablex.ui.widgets.Button._addIco","ru/stablex/ui/widgets/Button.hx",455,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_467__switchIco,"ru.stablex.ui.widgets.Button","_switchIco",0xd14da001,"ru.stablex.ui.widgets.Button._switchIco","ru/stablex/ui/widgets/Button.hx",467,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_488__switchSkin,"ru.stablex.ui.widgets.Button","_switchSkin",0x59409051,"ru.stablex.ui.widgets.Button._switchSkin","ru/stablex/ui/widgets/Button.hx",488,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_500_refresh,"ru.stablex.ui.widgets.Button","refresh",0xf9b4e1fc,"ru.stablex.ui.widgets.Button.refresh","ru/stablex/ui/widgets/Button.hx",500,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_514_applySkin,"ru.stablex.ui.widgets.Button","applySkin",0x95e3296c,"ru.stablex.ui.widgets.Button.applySkin","ru/stablex/ui/widgets/Button.hx",514,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_537_alignElements,"ru.stablex.ui.widgets.Button","alignElements",0x20a16cfd,"ru.stablex.ui.widgets.Button.alignElements","ru/stablex/ui/widgets/Button.hx",537,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_550__moveApart,"ru.stablex.ui.widgets.Button","_moveApart",0xa50a7643,"ru.stablex.ui.widgets.Button._moveApart","ru/stablex/ui/widgets/Button.hx",550,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_67__onHover,"ru.stablex.ui.widgets.Button","_onHover",0xf04df25d,"ru.stablex.ui.widgets.Button._onHover","ru/stablex/ui/widgets/Button.hx",67,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_91__onHout,"ru.stablex.ui.widgets.Button","_onHout",0x62a7f3a5,"ru.stablex.ui.widgets.Button._onHout","ru/stablex/ui/widgets/Button.hx",91,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_115__onPress,"ru.stablex.ui.widgets.Button","_onPress",0x8d716024,"ru.stablex.ui.widgets.Button._onPress","ru/stablex/ui/widgets/Button.hx",115,0xa0cc634f)
HX_LOCAL_STACK_FRAME(_hx_pos_c75fe13fd35c2192_139__onRelease,"ru.stablex.ui.widgets.Button","_onRelease",0xf3abbca8,"ru.stablex.ui.widgets.Button._onRelease","ru/stablex/ui/widgets/Button.hx",139,0xa0cc634f)
namespace ru{
namespace stablex{
namespace ui{
namespace widgets{

void Button_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_13_new)
HXLINE(  57)		this->apart = false;
HXLINE(  43)		this->icoBeforeLabel = true;
HXLINE(  24)		this->_mouseChildrenBeforeDisabled = false;
HXLINE(  22)		this->disabledFormatColor = 0;
HXLINE(  20)		this->disabled = false;
HXLINE(  18)		this->hovered = false;
HXLINE(  16)		this->pressed = false;
HXLINE( 175)		super::__construct();
HXLINE( 177)		this->vertical = false;
HXLINE( 179)		this->set_padding(( (Float)(2) ));
HXLINE( 180)		this->childPadding = ( (Float)(5) );
HXLINE( 181)		this->label->set_selectable(false);
HXLINE( 183)		this->set_buttonMode((this->useHandCursor = true));
HXLINE( 184)		this->mouseChildren = false;
HXLINE( 187)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),::ru::stablex::ui::widgets::Button_obj::_onHover_dyn(),null(),null(),null());
HXLINE( 188)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),::ru::stablex::ui::widgets::Button_obj::_onHout_dyn(),null(),null(),null());
HXLINE( 189)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),::ru::stablex::ui::widgets::Button_obj::_onPress_dyn(),null(),null(),null());
HXLINE( 190)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),::ru::stablex::ui::widgets::Button_obj::_onRelease_dyn(),null(),null(),null());
HXLINE( 191)		this->addEventListener(HX_("mouseUp",e0,f3,72,c0),::ru::stablex::ui::widgets::Button_obj::_onRelease_dyn(),null(),null(),null());
HXLINE( 197)		this->pressed = false;
HXLINE( 198)		this->hovered = false;
HXLINE( 199)		this->set_disabled(false);
HXLINE( 201)		this->align = HX_("center,middle",4c,ab,0b,8f);
            	}

Dynamic Button_obj::__CreateEmpty() { return new Button_obj; }

void *Button_obj::_hx_vtable = 0;

Dynamic Button_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Button_obj > _hx_result = new Button_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Button_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x1210c5aa) {
			if (inClassId<=(int)0x0c89e854) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x0c89e854;
				}
			} else {
				return inClassId==(int)0x1210c5aa;
			}
		} else {
			return inClassId==(int)0x12698a7b || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			if (inClassId<=(int)0x270e5222) {
				return inClassId==(int)0x2383f585 || inClassId==(int)0x270e5222;
			} else {
				return inClassId==(int)0x4af7dd8e;
			}
		} else {
			return inClassId==(int)0x5a9290f6 || inClassId==(int)0x6b353933;
		}
	}
}

HX_BEGIN_DEFAULT_FUNC(__default_onPress,Button_obj)
void _hx_run( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_209___default_onPress)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onRelease,Button_obj)
void _hx_run( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_220___default_onRelease)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onHover,Button_obj)
void _hx_run( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_231___default_onHover)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onHout,Button_obj)
void _hx_run( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_240___default_onHout)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

bool Button_obj::set_disabled(bool disabled){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_249_set_disabled)
HXLINE( 250)		if (disabled) {
HXLINE( 251)			if (!(this->disabled)) {
HXLINE( 252)				this->_mouseChildrenBeforeDisabled = this->mouseChildren;
HXLINE( 253)				this->_formatColorBeforeDisabled = ( (int)(this->format->color) );
            			}
HXLINE( 255)			this->mouseEnabled = false;
HXLINE( 256)			this->format->color = this->disabledFormatColor;
HXLINE( 257)			{
HXLINE( 257)				 ::ru::stablex::ui::widgets::Bmp ico = this->_icoDisabled;
HXDLIN( 257)				if (::hx::IsNotNull( this->_ico )) {
HXLINE( 257)					this->_ico->set_visible(false);
            				}
HXDLIN( 257)				if (::hx::IsNotNull( this->_icoHovered )) {
HXLINE( 257)					this->_icoHovered->set_visible(false);
            				}
HXDLIN( 257)				if (::hx::IsNotNull( this->_icoPressed )) {
HXLINE( 257)					this->_icoPressed->set_visible(false);
            				}
HXDLIN( 257)				if (::hx::IsNotNull( this->_icoDisabled )) {
HXLINE( 257)					this->_icoDisabled->set_visible(false);
            				}
HXDLIN( 257)				if (::hx::IsNotNull( ico )) {
HXLINE( 257)					ico->set_visible(true);
            				}
            				else {
HXLINE( 257)					if (::hx::IsNotNull( this->_ico )) {
HXLINE( 257)						this->_ico->set_visible(true);
            					}
            				}
HXDLIN( 257)				this->alignElements();
            			}
HXLINE( 258)			{
HXLINE( 258)				 ::ru::stablex::ui::skins::Skin skin = this->skinDisabled;
HXDLIN( 258)				if (::hx::IsNotNull( skin )) {
HXLINE( 258)					skin->apply(::hx::ObjectPtr<OBJ_>(this));
            				}
            				else {
HXLINE( 258)					bool _hx_tmp;
HXDLIN( 258)					if (::hx::IsNull( skin )) {
HXLINE( 258)						_hx_tmp = ::hx::IsNotNull( this->skin );
            					}
            					else {
HXLINE( 258)						_hx_tmp = false;
            					}
HXDLIN( 258)					if (_hx_tmp) {
HXLINE( 258)						this->skin->apply(::hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
            		else {
HXLINE( 260)			if (this->disabled) {
HXLINE( 261)				this->mouseChildren = this->_mouseChildrenBeforeDisabled;
HXLINE( 262)				this->format->color = this->_formatColorBeforeDisabled;
            			}
HXLINE( 264)			this->mouseEnabled = true;
HXLINE( 265)			{
HXLINE( 265)				 ::ru::stablex::ui::widgets::Bmp ico = this->_ico;
HXDLIN( 265)				if (::hx::IsNotNull( this->_ico )) {
HXLINE( 265)					this->_ico->set_visible(false);
            				}
HXDLIN( 265)				if (::hx::IsNotNull( this->_icoHovered )) {
HXLINE( 265)					this->_icoHovered->set_visible(false);
            				}
HXDLIN( 265)				if (::hx::IsNotNull( this->_icoPressed )) {
HXLINE( 265)					this->_icoPressed->set_visible(false);
            				}
HXDLIN( 265)				if (::hx::IsNotNull( this->_icoDisabled )) {
HXLINE( 265)					this->_icoDisabled->set_visible(false);
            				}
HXDLIN( 265)				if (::hx::IsNotNull( ico )) {
HXLINE( 265)					ico->set_visible(true);
            				}
            				else {
HXLINE( 265)					if (::hx::IsNotNull( this->_ico )) {
HXLINE( 265)						this->_ico->set_visible(true);
            					}
            				}
HXDLIN( 265)				this->alignElements();
            			}
HXLINE( 266)			{
HXLINE( 266)				 ::ru::stablex::ui::skins::Skin skin = this->skin;
HXDLIN( 266)				if (::hx::IsNotNull( skin )) {
HXLINE( 266)					skin->apply(::hx::ObjectPtr<OBJ_>(this));
            				}
            				else {
HXLINE( 266)					bool _hx_tmp;
HXDLIN( 266)					if (::hx::IsNull( skin )) {
HXLINE( 266)						_hx_tmp = ::hx::IsNotNull( this->skin );
            					}
            					else {
HXLINE( 266)						_hx_tmp = false;
            					}
HXDLIN( 266)					if (_hx_tmp) {
HXLINE( 266)						this->skin->apply(::hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE( 268)		this->setLabelTextFormat();
HXLINE( 269)		return (this->disabled = disabled);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_disabled,return )

bool Button_obj::set_icoBeforeLabel(bool ibl){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_277_set_icoBeforeLabel)
HXLINE( 278)		if (ibl) {
HXLINE( 279)			 ::openfl::text::TextField _hx_tmp = this->label;
HXDLIN( 279)			this->setChildIndex(_hx_tmp,(this->get_numChildren() - 1));
            		}
            		else {
HXLINE( 281)			this->setChildIndex(this->label,0);
            		}
HXLINE( 284)		return (this->icoBeforeLabel = ibl);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_icoBeforeLabel,return )

 ::ru::stablex::ui::widgets::Bmp Button_obj::get_ico(){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_292_get_ico)
HXLINE( 294)		if (::hx::IsNull( this->_ico )) {
HXLINE( 295)			this->_ico = ( ( ::ru::stablex::ui::widgets::Bmp)(::ru::stablex::ui::UIBuilder_obj::create(::hx::ClassOf< ::ru::stablex::ui::widgets::Bmp >(),null(),null())) );
HXLINE( 296)			{
HXLINE( 296)				 ::ru::stablex::ui::widgets::Bmp ico = this->_ico;
HXDLIN( 296)				if (this->icoBeforeLabel) {
HXLINE( 296)					this->addChildAt(ico,0);
            				}
            				else {
HXLINE( 296)					this->addChild(ico);
            				}
            			}
            		}
HXLINE( 299)		return this->_ico;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,get_ico,return )

 ::ru::stablex::ui::widgets::Bmp Button_obj::set_ico( ::ru::stablex::ui::widgets::Bmp ico){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_307_set_ico)
HXLINE( 309)		if (::hx::IsNotNull( this->_ico )) {
HXLINE( 310)			this->_ico->free(null());
            		}
HXLINE( 313)		if (::hx::IsNotNull( ico )) {
HXLINE( 314)			if (this->icoBeforeLabel) {
HXLINE( 314)				this->addChildAt(ico,0);
            			}
            			else {
HXLINE( 314)				this->addChild(ico);
            			}
            		}
HXLINE( 317)		return (this->_ico = ico);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_ico,return )

 ::ru::stablex::ui::widgets::Bmp Button_obj::get_icoHovered(){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_325_get_icoHovered)
HXLINE( 327)		if (::hx::IsNull( this->_icoHovered )) {
HXLINE( 328)			this->_icoHovered = ( ( ::ru::stablex::ui::widgets::Bmp)(::ru::stablex::ui::UIBuilder_obj::create(::hx::ClassOf< ::ru::stablex::ui::widgets::Bmp >(),null(),null())) );
HXLINE( 329)			this->_icoHovered->set_visible(false);
HXLINE( 330)			{
HXLINE( 330)				 ::ru::stablex::ui::widgets::Bmp ico = this->_icoHovered;
HXDLIN( 330)				if (this->icoBeforeLabel) {
HXLINE( 330)					this->addChildAt(ico,0);
            				}
            				else {
HXLINE( 330)					this->addChild(ico);
            				}
            			}
            		}
HXLINE( 333)		return this->_icoHovered;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,get_icoHovered,return )

 ::ru::stablex::ui::widgets::Bmp Button_obj::set_icoHovered( ::ru::stablex::ui::widgets::Bmp ico){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_341_set_icoHovered)
HXLINE( 343)		if (::hx::IsNotNull( this->_icoHovered )) {
HXLINE( 344)			this->_icoHovered->free(null());
            		}
HXLINE( 347)		if (::hx::IsNotNull( ico )) {
HXLINE( 348)			if (this->icoBeforeLabel) {
HXLINE( 348)				this->addChildAt(ico,0);
            			}
            			else {
HXLINE( 348)				this->addChild(ico);
            			}
            		}
HXLINE( 351)		return (this->_icoHovered = ico);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_icoHovered,return )

 ::ru::stablex::ui::widgets::Bmp Button_obj::get_icoPressed(){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_359_get_icoPressed)
HXLINE( 361)		if (::hx::IsNull( this->_icoPressed )) {
HXLINE( 362)			this->_icoPressed = ( ( ::ru::stablex::ui::widgets::Bmp)(::ru::stablex::ui::UIBuilder_obj::create(::hx::ClassOf< ::ru::stablex::ui::widgets::Bmp >(),null(),null())) );
HXLINE( 363)			this->_icoPressed->set_visible(false);
HXLINE( 364)			{
HXLINE( 364)				 ::ru::stablex::ui::widgets::Bmp ico = this->_icoPressed;
HXDLIN( 364)				if (this->icoBeforeLabel) {
HXLINE( 364)					this->addChildAt(ico,0);
            				}
            				else {
HXLINE( 364)					this->addChild(ico);
            				}
            			}
            		}
HXLINE( 367)		return this->_icoPressed;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,get_icoPressed,return )

 ::ru::stablex::ui::widgets::Bmp Button_obj::set_icoPressed( ::ru::stablex::ui::widgets::Bmp ico){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_375_set_icoPressed)
HXLINE( 377)		if (::hx::IsNotNull( this->_icoPressed )) {
HXLINE( 378)			this->_icoPressed->free(null());
            		}
HXLINE( 381)		if (::hx::IsNotNull( ico )) {
HXLINE( 382)			if (this->icoBeforeLabel) {
HXLINE( 382)				this->addChildAt(ico,0);
            			}
            			else {
HXLINE( 382)				this->addChild(ico);
            			}
            		}
HXLINE( 385)		return (this->_icoPressed = ico);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_icoPressed,return )

 ::ru::stablex::ui::widgets::Bmp Button_obj::get_icoDisabled(){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_393_get_icoDisabled)
HXLINE( 395)		if (::hx::IsNull( this->_icoDisabled )) {
HXLINE( 396)			this->_icoDisabled = ( ( ::ru::stablex::ui::widgets::Bmp)(::ru::stablex::ui::UIBuilder_obj::create(::hx::ClassOf< ::ru::stablex::ui::widgets::Bmp >(),null(),null())) );
HXLINE( 397)			this->_icoDisabled->set_visible(false);
HXLINE( 398)			{
HXLINE( 398)				 ::ru::stablex::ui::widgets::Bmp ico = this->_icoDisabled;
HXDLIN( 398)				if (this->icoBeforeLabel) {
HXLINE( 398)					this->addChildAt(ico,0);
            				}
            				else {
HXLINE( 398)					this->addChild(ico);
            				}
            			}
            		}
HXLINE( 401)		return this->_icoDisabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,get_icoDisabled,return )

 ::ru::stablex::ui::widgets::Bmp Button_obj::set_icoDisabled( ::ru::stablex::ui::widgets::Bmp ico){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_409_set_icoDisabled)
HXLINE( 411)		if (::hx::IsNotNull( this->_icoDisabled )) {
HXLINE( 412)			this->_icoDisabled->free(null());
            		}
HXLINE( 415)		if (::hx::IsNotNull( ico )) {
HXLINE( 416)			if (this->icoBeforeLabel) {
HXLINE( 416)				this->addChildAt(ico,0);
            			}
            			else {
HXLINE( 416)				this->addChild(ico);
            			}
            		}
HXLINE( 418)		return (this->_icoDisabled = ico);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_icoDisabled,return )

::String Button_obj::set_skinHoveredName(::String s){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_426_set_skinHoveredName)
HXLINE( 427)		this->skinHovered = ( ( ::ru::stablex::ui::skins::Skin)(::ru::stablex::ui::UIBuilder_obj::skins->get(s)()) );
HXLINE( 428)		return (this->skinHoveredName = s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_skinHoveredName,return )

::String Button_obj::set_skinPressedName(::String s){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_436_set_skinPressedName)
HXLINE( 437)		this->skinPressed = ( ( ::ru::stablex::ui::skins::Skin)(::ru::stablex::ui::UIBuilder_obj::skins->get(s)()) );
HXLINE( 438)		return (this->skinPressedName = s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_skinPressedName,return )

::String Button_obj::set_skinDisabledName(::String s){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_445_set_skinDisabledName)
HXLINE( 446)		this->skinDisabled = ( ( ::ru::stablex::ui::skins::Skin)(::ru::stablex::ui::UIBuilder_obj::skins->get(s)()) );
HXLINE( 447)		return (this->skinDisabledName = s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,set_skinDisabledName,return )

void Button_obj::_addIco( ::ru::stablex::ui::widgets::Bmp ico){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_455__addIco)
HXDLIN( 455)		if (this->icoBeforeLabel) {
HXLINE( 456)			this->addChildAt(ico,0);
            		}
            		else {
HXLINE( 458)			this->addChild(ico);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,_addIco,(void))

void Button_obj::_switchIco( ::ru::stablex::ui::widgets::Bmp ico){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_467__switchIco)
HXLINE( 468)		if (::hx::IsNotNull( this->_ico )) {
HXLINE( 468)			this->_ico->set_visible(false);
            		}
HXLINE( 469)		if (::hx::IsNotNull( this->_icoHovered )) {
HXLINE( 469)			this->_icoHovered->set_visible(false);
            		}
HXLINE( 470)		if (::hx::IsNotNull( this->_icoPressed )) {
HXLINE( 470)			this->_icoPressed->set_visible(false);
            		}
HXLINE( 471)		if (::hx::IsNotNull( this->_icoDisabled )) {
HXLINE( 471)			this->_icoDisabled->set_visible(false);
            		}
HXLINE( 473)		if (::hx::IsNotNull( ico )) {
HXLINE( 474)			ico->set_visible(true);
            		}
            		else {
HXLINE( 475)			if (::hx::IsNotNull( this->_ico )) {
HXLINE( 476)				this->_ico->set_visible(true);
            			}
            		}
HXLINE( 479)		this->alignElements();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,_switchIco,(void))

void Button_obj::_switchSkin( ::ru::stablex::ui::skins::Skin skin){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_488__switchSkin)
HXDLIN( 488)		if (::hx::IsNotNull( skin )) {
HXLINE( 489)			skin->apply(::hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE( 490)			bool _hx_tmp;
HXDLIN( 490)			if (::hx::IsNull( skin )) {
HXLINE( 490)				_hx_tmp = ::hx::IsNotNull( this->skin );
            			}
            			else {
HXLINE( 490)				_hx_tmp = false;
            			}
HXDLIN( 490)			if (_hx_tmp) {
HXLINE( 491)				this->skin->apply(::hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Button_obj,_switchSkin,(void))

void Button_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_500_refresh)
HXLINE( 501)		if (::hx::IsNotNull( this->_ico )) {
HXLINE( 501)			this->_ico->refresh();
            		}
HXLINE( 502)		if (::hx::IsNotNull( this->_icoHovered )) {
HXLINE( 502)			this->_icoHovered->refresh();
            		}
HXLINE( 503)		if (::hx::IsNotNull( this->_icoPressed )) {
HXLINE( 503)			this->_icoPressed->refresh();
            		}
HXLINE( 504)		if (::hx::IsNotNull( this->_icoDisabled )) {
HXLINE( 504)			this->_icoDisabled->refresh();
            		}
HXLINE( 506)		this->super::refresh();
            	}


void Button_obj::applySkin(){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_514_applySkin)
HXDLIN( 514)		if (this->initialized) {
HXLINE( 515)			if (this->disabled) {
HXLINE( 516)				{
HXLINE( 516)					 ::ru::stablex::ui::skins::Skin skin = this->skinDisabled;
HXDLIN( 516)					if (::hx::IsNotNull( skin )) {
HXLINE( 516)						skin->apply(::hx::ObjectPtr<OBJ_>(this));
            					}
            					else {
HXLINE( 516)						bool _hx_tmp;
HXDLIN( 516)						if (::hx::IsNull( skin )) {
HXLINE( 516)							_hx_tmp = ::hx::IsNotNull( this->skin );
            						}
            						else {
HXLINE( 516)							_hx_tmp = false;
            						}
HXDLIN( 516)						if (_hx_tmp) {
HXLINE( 516)							this->skin->apply(::hx::ObjectPtr<OBJ_>(this));
            						}
            					}
            				}
HXLINE( 517)				return;
            			}
HXLINE( 519)			if (this->pressed) {
HXLINE( 520)				{
HXLINE( 520)					 ::ru::stablex::ui::skins::Skin skin = this->skinPressed;
HXDLIN( 520)					if (::hx::IsNotNull( skin )) {
HXLINE( 520)						skin->apply(::hx::ObjectPtr<OBJ_>(this));
            					}
            					else {
HXLINE( 520)						bool _hx_tmp;
HXDLIN( 520)						if (::hx::IsNull( skin )) {
HXLINE( 520)							_hx_tmp = ::hx::IsNotNull( this->skin );
            						}
            						else {
HXLINE( 520)							_hx_tmp = false;
            						}
HXDLIN( 520)						if (_hx_tmp) {
HXLINE( 520)							this->skin->apply(::hx::ObjectPtr<OBJ_>(this));
            						}
            					}
            				}
HXLINE( 521)				return;
            			}
HXLINE( 523)			if (this->hovered) {
HXLINE( 524)				{
HXLINE( 524)					 ::ru::stablex::ui::skins::Skin skin = this->skinHovered;
HXDLIN( 524)					if (::hx::IsNotNull( skin )) {
HXLINE( 524)						skin->apply(::hx::ObjectPtr<OBJ_>(this));
            					}
            					else {
HXLINE( 524)						bool _hx_tmp;
HXDLIN( 524)						if (::hx::IsNull( skin )) {
HXLINE( 524)							_hx_tmp = ::hx::IsNotNull( this->skin );
            						}
            						else {
HXLINE( 524)							_hx_tmp = false;
            						}
HXDLIN( 524)						if (_hx_tmp) {
HXLINE( 524)							this->skin->apply(::hx::ObjectPtr<OBJ_>(this));
            						}
            					}
            				}
HXLINE( 525)				return;
            			}
HXLINE( 528)			this->super::applySkin();
            		}
            	}


void Button_obj::alignElements(){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_537_alignElements)
HXLINE( 538)		this->super::alignElements();
HXLINE( 540)		if (this->apart) {
HXLINE( 541)			 ::openfl::display::DisplayObject child;
HXDLIN( 541)			if (this->icoBeforeLabel) {
HXLINE( 541)				{
HXLINE( 541)					int _g = 0;
HXDLIN( 541)					int _g1 = this->get_numChildren();
HXDLIN( 541)					while((_g < _g1)){
HXLINE( 541)						_g = (_g + 1);
HXDLIN( 541)						int i = (_g - 1);
HXDLIN( 541)						child = this->getChildAt(i);
HXDLIN( 541)						if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Bmp >()) ))) {
HXLINE( 541)							::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->set_left(this->paddingLeft);
            						}
            					}
            				}
HXDLIN( 541)				 ::openfl::text::TextField _hx_tmp = this->label;
HXDLIN( 541)				Float _hx_tmp1 = (this->_width - this->paddingRight);
HXDLIN( 541)				this->_setObjX(_hx_tmp,(_hx_tmp1 - this->_objWidth(this->label)));
            			}
            			else {
HXLINE( 541)				{
HXLINE( 541)					int _g = 0;
HXDLIN( 541)					int _g1 = this->get_numChildren();
HXDLIN( 541)					while((_g < _g1)){
HXLINE( 541)						_g = (_g + 1);
HXDLIN( 541)						int i = (_g - 1);
HXDLIN( 541)						child = this->getChildAt(i);
HXDLIN( 541)						if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Bmp >()) ))) {
HXLINE( 541)							::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->set_right(this->paddingRight);
            						}
            					}
            				}
HXDLIN( 541)				this->_setObjX(this->label,this->paddingLeft);
            			}
            		}
            	}


void Button_obj::_moveApart(){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_550__moveApart)
HXLINE( 551)		 ::openfl::display::DisplayObject child;
HXLINE( 554)		if (this->icoBeforeLabel) {
HXLINE( 556)			{
HXLINE( 556)				int _g = 0;
HXDLIN( 556)				int _g1 = this->get_numChildren();
HXDLIN( 556)				while((_g < _g1)){
HXLINE( 556)					_g = (_g + 1);
HXDLIN( 556)					int i = (_g - 1);
HXLINE( 557)					child = this->getChildAt(i);
HXLINE( 559)					if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Bmp >()) ))) {
HXLINE( 560)						::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->set_left(this->paddingLeft);
            					}
            				}
            			}
HXLINE( 564)			 ::openfl::text::TextField _hx_tmp = this->label;
HXDLIN( 564)			Float _hx_tmp1 = (this->_width - this->paddingRight);
HXDLIN( 564)			this->_setObjX(_hx_tmp,(_hx_tmp1 - this->_objWidth(this->label)));
            		}
            		else {
HXLINE( 569)			{
HXLINE( 569)				int _g = 0;
HXDLIN( 569)				int _g1 = this->get_numChildren();
HXDLIN( 569)				while((_g < _g1)){
HXLINE( 569)					_g = (_g + 1);
HXDLIN( 569)					int i = (_g - 1);
HXLINE( 570)					child = this->getChildAt(i);
HXLINE( 572)					if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Bmp >()) ))) {
HXLINE( 573)						::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->set_right(this->paddingRight);
            					}
            				}
            			}
HXLINE( 577)			this->_setObjX(this->label,this->paddingLeft);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,_moveApart,(void))

void Button_obj::_onHover( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_67__onHover)
HXLINE(  68)		 ::ru::stablex::ui::widgets::Button btn = ::hx::TCast<  ::ru::stablex::ui::widgets::Button >::cast(e->currentTarget);
HXLINE(  69)		if (btn->disabled) {
HXLINE(  70)			return;
            		}
HXLINE(  74)		if (btn->hovered) {
HXLINE(  74)			return;
            		}
HXLINE(  77)		{
HXLINE(  77)			 ::ru::stablex::ui::widgets::Bmp ico = btn->_icoHovered;
HXDLIN(  77)			if (::hx::IsNotNull( btn->_ico )) {
HXLINE(  77)				btn->_ico->set_visible(false);
            			}
HXDLIN(  77)			if (::hx::IsNotNull( btn->_icoHovered )) {
HXLINE(  77)				btn->_icoHovered->set_visible(false);
            			}
HXDLIN(  77)			if (::hx::IsNotNull( btn->_icoPressed )) {
HXLINE(  77)				btn->_icoPressed->set_visible(false);
            			}
HXDLIN(  77)			if (::hx::IsNotNull( btn->_icoDisabled )) {
HXLINE(  77)				btn->_icoDisabled->set_visible(false);
            			}
HXDLIN(  77)			if (::hx::IsNotNull( ico )) {
HXLINE(  77)				ico->set_visible(true);
            			}
            			else {
HXLINE(  77)				if (::hx::IsNotNull( btn->_ico )) {
HXLINE(  77)					btn->_ico->set_visible(true);
            				}
            			}
HXDLIN(  77)			btn->alignElements();
            		}
HXLINE(  80)		{
HXLINE(  80)			 ::ru::stablex::ui::skins::Skin skin = btn->skinHovered;
HXDLIN(  80)			if (::hx::IsNotNull( skin )) {
HXLINE(  80)				skin->apply(btn);
            			}
            			else {
HXLINE(  80)				bool _hx_tmp;
HXDLIN(  80)				if (::hx::IsNull( skin )) {
HXLINE(  80)					_hx_tmp = ::hx::IsNotNull( btn->skin );
            				}
            				else {
HXLINE(  80)					_hx_tmp = false;
            				}
HXDLIN(  80)				if (_hx_tmp) {
HXLINE(  80)					btn->skin->apply(btn);
            				}
            			}
            		}
HXLINE(  82)		btn->hovered = true;
HXLINE(  83)		btn->onHover(e);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Button_obj,_onHover,(void))

void Button_obj::_onHout( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_91__onHout)
HXLINE(  92)		 ::ru::stablex::ui::widgets::Button btn = ::hx::TCast<  ::ru::stablex::ui::widgets::Button >::cast(e->currentTarget);
HXLINE(  93)		if (btn->disabled) {
HXLINE(  94)			return;
            		}
HXLINE(  98)		if (!(btn->hovered)) {
HXLINE(  98)			return;
            		}
HXLINE( 101)		{
HXLINE( 101)			 ::ru::stablex::ui::widgets::Bmp ico = btn->_ico;
HXDLIN( 101)			if (::hx::IsNotNull( btn->_ico )) {
HXLINE( 101)				btn->_ico->set_visible(false);
            			}
HXDLIN( 101)			if (::hx::IsNotNull( btn->_icoHovered )) {
HXLINE( 101)				btn->_icoHovered->set_visible(false);
            			}
HXDLIN( 101)			if (::hx::IsNotNull( btn->_icoPressed )) {
HXLINE( 101)				btn->_icoPressed->set_visible(false);
            			}
HXDLIN( 101)			if (::hx::IsNotNull( btn->_icoDisabled )) {
HXLINE( 101)				btn->_icoDisabled->set_visible(false);
            			}
HXDLIN( 101)			if (::hx::IsNotNull( ico )) {
HXLINE( 101)				ico->set_visible(true);
            			}
            			else {
HXLINE( 101)				if (::hx::IsNotNull( btn->_ico )) {
HXLINE( 101)					btn->_ico->set_visible(true);
            				}
            			}
HXDLIN( 101)			btn->alignElements();
            		}
HXLINE( 104)		{
HXLINE( 104)			 ::ru::stablex::ui::skins::Skin skin = btn->skin;
HXDLIN( 104)			if (::hx::IsNotNull( skin )) {
HXLINE( 104)				skin->apply(btn);
            			}
            			else {
HXLINE( 104)				bool _hx_tmp;
HXDLIN( 104)				if (::hx::IsNull( skin )) {
HXLINE( 104)					_hx_tmp = ::hx::IsNotNull( btn->skin );
            				}
            				else {
HXLINE( 104)					_hx_tmp = false;
            				}
HXDLIN( 104)				if (_hx_tmp) {
HXLINE( 104)					btn->skin->apply(btn);
            				}
            			}
            		}
HXLINE( 106)		btn->hovered = false;
HXLINE( 107)		btn->onHout(e);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Button_obj,_onHout,(void))

void Button_obj::_onPress( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_115__onPress)
HXLINE( 116)		 ::ru::stablex::ui::widgets::Button btn = ::hx::TCast<  ::ru::stablex::ui::widgets::Button >::cast(e->currentTarget);
HXLINE( 117)		if (btn->disabled) {
HXLINE( 118)			return;
            		}
HXLINE( 122)		if (btn->pressed) {
HXLINE( 122)			return;
            		}
HXLINE( 125)		{
HXLINE( 125)			 ::ru::stablex::ui::widgets::Bmp ico = btn->_icoPressed;
HXDLIN( 125)			if (::hx::IsNotNull( btn->_ico )) {
HXLINE( 125)				btn->_ico->set_visible(false);
            			}
HXDLIN( 125)			if (::hx::IsNotNull( btn->_icoHovered )) {
HXLINE( 125)				btn->_icoHovered->set_visible(false);
            			}
HXDLIN( 125)			if (::hx::IsNotNull( btn->_icoPressed )) {
HXLINE( 125)				btn->_icoPressed->set_visible(false);
            			}
HXDLIN( 125)			if (::hx::IsNotNull( btn->_icoDisabled )) {
HXLINE( 125)				btn->_icoDisabled->set_visible(false);
            			}
HXDLIN( 125)			if (::hx::IsNotNull( ico )) {
HXLINE( 125)				ico->set_visible(true);
            			}
            			else {
HXLINE( 125)				if (::hx::IsNotNull( btn->_ico )) {
HXLINE( 125)					btn->_ico->set_visible(true);
            				}
            			}
HXDLIN( 125)			btn->alignElements();
            		}
HXLINE( 128)		{
HXLINE( 128)			 ::ru::stablex::ui::skins::Skin skin = btn->skinPressed;
HXDLIN( 128)			if (::hx::IsNotNull( skin )) {
HXLINE( 128)				skin->apply(btn);
            			}
            			else {
HXLINE( 128)				bool _hx_tmp;
HXDLIN( 128)				if (::hx::IsNull( skin )) {
HXLINE( 128)					_hx_tmp = ::hx::IsNotNull( btn->skin );
            				}
            				else {
HXLINE( 128)					_hx_tmp = false;
            				}
HXDLIN( 128)				if (_hx_tmp) {
HXLINE( 128)					btn->skin->apply(btn);
            				}
            			}
            		}
HXLINE( 130)		btn->pressed = true;
HXLINE( 131)		btn->onPress(e);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Button_obj,_onPress,(void))

void Button_obj::_onRelease( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_c75fe13fd35c2192_139__onRelease)
HXLINE( 140)		 ::ru::stablex::ui::widgets::Button btn = ::hx::TCast<  ::ru::stablex::ui::widgets::Button >::cast(e->currentTarget);
HXLINE( 141)		if (btn->disabled) {
HXLINE( 142)			return;
            		}
HXLINE( 146)		if (!(btn->pressed)) {
HXLINE( 146)			return;
            		}
HXLINE( 149)		if (btn->hovered) {
HXLINE( 150)			 ::ru::stablex::ui::widgets::Bmp ico = btn->_icoHovered;
HXDLIN( 150)			if (::hx::IsNotNull( btn->_ico )) {
HXLINE( 150)				btn->_ico->set_visible(false);
            			}
HXDLIN( 150)			if (::hx::IsNotNull( btn->_icoHovered )) {
HXLINE( 150)				btn->_icoHovered->set_visible(false);
            			}
HXDLIN( 150)			if (::hx::IsNotNull( btn->_icoPressed )) {
HXLINE( 150)				btn->_icoPressed->set_visible(false);
            			}
HXDLIN( 150)			if (::hx::IsNotNull( btn->_icoDisabled )) {
HXLINE( 150)				btn->_icoDisabled->set_visible(false);
            			}
HXDLIN( 150)			if (::hx::IsNotNull( ico )) {
HXLINE( 150)				ico->set_visible(true);
            			}
            			else {
HXLINE( 150)				if (::hx::IsNotNull( btn->_ico )) {
HXLINE( 150)					btn->_ico->set_visible(true);
            				}
            			}
HXDLIN( 150)			btn->alignElements();
            		}
            		else {
HXLINE( 152)			 ::ru::stablex::ui::widgets::Bmp ico = btn->_ico;
HXDLIN( 152)			if (::hx::IsNotNull( btn->_ico )) {
HXLINE( 152)				btn->_ico->set_visible(false);
            			}
HXDLIN( 152)			if (::hx::IsNotNull( btn->_icoHovered )) {
HXLINE( 152)				btn->_icoHovered->set_visible(false);
            			}
HXDLIN( 152)			if (::hx::IsNotNull( btn->_icoPressed )) {
HXLINE( 152)				btn->_icoPressed->set_visible(false);
            			}
HXDLIN( 152)			if (::hx::IsNotNull( btn->_icoDisabled )) {
HXLINE( 152)				btn->_icoDisabled->set_visible(false);
            			}
HXDLIN( 152)			if (::hx::IsNotNull( ico )) {
HXLINE( 152)				ico->set_visible(true);
            			}
            			else {
HXLINE( 152)				if (::hx::IsNotNull( btn->_ico )) {
HXLINE( 152)					btn->_ico->set_visible(true);
            				}
            			}
HXDLIN( 152)			btn->alignElements();
            		}
HXLINE( 156)		if (btn->hovered) {
HXLINE( 157)			 ::ru::stablex::ui::skins::Skin skin = btn->skinHovered;
HXDLIN( 157)			if (::hx::IsNotNull( skin )) {
HXLINE( 157)				skin->apply(btn);
            			}
            			else {
HXLINE( 157)				bool _hx_tmp;
HXDLIN( 157)				if (::hx::IsNull( skin )) {
HXLINE( 157)					_hx_tmp = ::hx::IsNotNull( btn->skin );
            				}
            				else {
HXLINE( 157)					_hx_tmp = false;
            				}
HXDLIN( 157)				if (_hx_tmp) {
HXLINE( 157)					btn->skin->apply(btn);
            				}
            			}
            		}
            		else {
HXLINE( 159)			 ::ru::stablex::ui::skins::Skin skin = btn->skin;
HXDLIN( 159)			if (::hx::IsNotNull( skin )) {
HXLINE( 159)				skin->apply(btn);
            			}
            			else {
HXLINE( 159)				bool _hx_tmp;
HXDLIN( 159)				if (::hx::IsNull( skin )) {
HXLINE( 159)					_hx_tmp = ::hx::IsNotNull( btn->skin );
            				}
            				else {
HXLINE( 159)					_hx_tmp = false;
            				}
HXDLIN( 159)				if (_hx_tmp) {
HXLINE( 159)					btn->skin->apply(btn);
            				}
            			}
            		}
HXLINE( 162)		btn->pressed = false;
HXLINE( 163)		btn->onRelease(e);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Button_obj,_onRelease,(void))


void Button_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,Button_obj *_hx_obj) {
	if (!_hx_obj->onHout.mPtr) _hx_obj->onHout = new __default_onHout(_hx_obj);
	if (!_hx_obj->onHover.mPtr) _hx_obj->onHover = new __default_onHover(_hx_obj);
	if (!_hx_obj->onRelease.mPtr) _hx_obj->onRelease = new __default_onRelease(_hx_obj);
	if (!_hx_obj->onPress.mPtr) _hx_obj->onPress = new __default_onPress(_hx_obj);
}
::hx::ObjectPtr< Button_obj > Button_obj::__new() {
	::hx::ObjectPtr< Button_obj > __this = new Button_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Button_obj > Button_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Button_obj *__this = (Button_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Button_obj), true, "ru.stablex.ui.widgets.Button"));
	*(void **)__this = Button_obj::_hx_vtable;
	ru::stablex::ui::widgets::Button_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct();
	return __this;
}

Button_obj::Button_obj()
{
	onHout = new __default_onHout(this);
	onHover = new __default_onHover(this);
	onRelease = new __default_onRelease(this);
	onPress = new __default_onPress(this);
}

void Button_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Button);
	HX_MARK_MEMBER_NAME(pressed,"pressed");
	HX_MARK_MEMBER_NAME(hovered,"hovered");
	HX_MARK_MEMBER_NAME(disabled,"disabled");
	HX_MARK_MEMBER_NAME(disabledFormatColor,"disabledFormatColor");
	HX_MARK_MEMBER_NAME(_mouseChildrenBeforeDisabled,"_mouseChildrenBeforeDisabled");
	HX_MARK_MEMBER_NAME(_formatColorBeforeDisabled,"_formatColorBeforeDisabled");
	HX_MARK_MEMBER_NAME(_ico,"_ico");
	HX_MARK_MEMBER_NAME(_icoHovered,"_icoHovered");
	HX_MARK_MEMBER_NAME(_icoPressed,"_icoPressed");
	HX_MARK_MEMBER_NAME(_icoDisabled,"_icoDisabled");
	HX_MARK_MEMBER_NAME(icoBeforeLabel,"icoBeforeLabel");
	HX_MARK_MEMBER_NAME(skinHoveredName,"skinHoveredName");
	HX_MARK_MEMBER_NAME(skinHovered,"skinHovered");
	HX_MARK_MEMBER_NAME(skinPressedName,"skinPressedName");
	HX_MARK_MEMBER_NAME(skinPressed,"skinPressed");
	HX_MARK_MEMBER_NAME(skinDisabledName,"skinDisabledName");
	HX_MARK_MEMBER_NAME(skinDisabled,"skinDisabled");
	HX_MARK_MEMBER_NAME(apart,"apart");
	HX_MARK_MEMBER_NAME(onPress,"onPress");
	HX_MARK_MEMBER_NAME(onRelease,"onRelease");
	HX_MARK_MEMBER_NAME(onHover,"onHover");
	HX_MARK_MEMBER_NAME(onHout,"onHout");
	 ::ru::stablex::ui::widgets::Text_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Button_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pressed,"pressed");
	HX_VISIT_MEMBER_NAME(hovered,"hovered");
	HX_VISIT_MEMBER_NAME(disabled,"disabled");
	HX_VISIT_MEMBER_NAME(disabledFormatColor,"disabledFormatColor");
	HX_VISIT_MEMBER_NAME(_mouseChildrenBeforeDisabled,"_mouseChildrenBeforeDisabled");
	HX_VISIT_MEMBER_NAME(_formatColorBeforeDisabled,"_formatColorBeforeDisabled");
	HX_VISIT_MEMBER_NAME(_ico,"_ico");
	HX_VISIT_MEMBER_NAME(_icoHovered,"_icoHovered");
	HX_VISIT_MEMBER_NAME(_icoPressed,"_icoPressed");
	HX_VISIT_MEMBER_NAME(_icoDisabled,"_icoDisabled");
	HX_VISIT_MEMBER_NAME(icoBeforeLabel,"icoBeforeLabel");
	HX_VISIT_MEMBER_NAME(skinHoveredName,"skinHoveredName");
	HX_VISIT_MEMBER_NAME(skinHovered,"skinHovered");
	HX_VISIT_MEMBER_NAME(skinPressedName,"skinPressedName");
	HX_VISIT_MEMBER_NAME(skinPressed,"skinPressed");
	HX_VISIT_MEMBER_NAME(skinDisabledName,"skinDisabledName");
	HX_VISIT_MEMBER_NAME(skinDisabled,"skinDisabled");
	HX_VISIT_MEMBER_NAME(apart,"apart");
	HX_VISIT_MEMBER_NAME(onPress,"onPress");
	HX_VISIT_MEMBER_NAME(onRelease,"onRelease");
	HX_VISIT_MEMBER_NAME(onHover,"onHover");
	HX_VISIT_MEMBER_NAME(onHout,"onHout");
	 ::ru::stablex::ui::widgets::Text_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Button_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ico") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_ico() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_ico") ) { return ::hx::Val( _ico ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"apart") ) { return ::hx::Val( apart ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onHout") ) { return ::hx::Val( onHout ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pressed") ) { return ::hx::Val( pressed ); }
		if (HX_FIELD_EQ(inName,"hovered") ) { return ::hx::Val( hovered ); }
		if (HX_FIELD_EQ(inName,"onPress") ) { return ::hx::Val( onPress ); }
		if (HX_FIELD_EQ(inName,"onHover") ) { return ::hx::Val( onHover ); }
		if (HX_FIELD_EQ(inName,"get_ico") ) { return ::hx::Val( get_ico_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_ico") ) { return ::hx::Val( set_ico_dyn() ); }
		if (HX_FIELD_EQ(inName,"_addIco") ) { return ::hx::Val( _addIco_dyn() ); }
		if (HX_FIELD_EQ(inName,"refresh") ) { return ::hx::Val( refresh_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"disabled") ) { return ::hx::Val( disabled ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onRelease") ) { return ::hx::Val( onRelease ); }
		if (HX_FIELD_EQ(inName,"applySkin") ) { return ::hx::Val( applySkin_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"icoHovered") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_icoHovered() ); }
		if (HX_FIELD_EQ(inName,"icoPressed") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_icoPressed() ); }
		if (HX_FIELD_EQ(inName,"_switchIco") ) { return ::hx::Val( _switchIco_dyn() ); }
		if (HX_FIELD_EQ(inName,"_moveApart") ) { return ::hx::Val( _moveApart_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_icoHovered") ) { return ::hx::Val( _icoHovered ); }
		if (HX_FIELD_EQ(inName,"_icoPressed") ) { return ::hx::Val( _icoPressed ); }
		if (HX_FIELD_EQ(inName,"icoDisabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_icoDisabled() ); }
		if (HX_FIELD_EQ(inName,"skinHovered") ) { return ::hx::Val( skinHovered ); }
		if (HX_FIELD_EQ(inName,"skinPressed") ) { return ::hx::Val( skinPressed ); }
		if (HX_FIELD_EQ(inName,"_switchSkin") ) { return ::hx::Val( _switchSkin_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_icoDisabled") ) { return ::hx::Val( _icoDisabled ); }
		if (HX_FIELD_EQ(inName,"skinDisabled") ) { return ::hx::Val( skinDisabled ); }
		if (HX_FIELD_EQ(inName,"set_disabled") ) { return ::hx::Val( set_disabled_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"alignElements") ) { return ::hx::Val( alignElements_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"icoBeforeLabel") ) { return ::hx::Val( icoBeforeLabel ); }
		if (HX_FIELD_EQ(inName,"get_icoHovered") ) { return ::hx::Val( get_icoHovered_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_icoHovered") ) { return ::hx::Val( set_icoHovered_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_icoPressed") ) { return ::hx::Val( get_icoPressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_icoPressed") ) { return ::hx::Val( set_icoPressed_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"skinHoveredName") ) { return ::hx::Val( skinHoveredName ); }
		if (HX_FIELD_EQ(inName,"skinPressedName") ) { return ::hx::Val( skinPressedName ); }
		if (HX_FIELD_EQ(inName,"get_icoDisabled") ) { return ::hx::Val( get_icoDisabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_icoDisabled") ) { return ::hx::Val( set_icoDisabled_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skinDisabledName") ) { return ::hx::Val( skinDisabledName ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"set_icoBeforeLabel") ) { return ::hx::Val( set_icoBeforeLabel_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"disabledFormatColor") ) { return ::hx::Val( disabledFormatColor ); }
		if (HX_FIELD_EQ(inName,"set_skinHoveredName") ) { return ::hx::Val( set_skinHoveredName_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_skinPressedName") ) { return ::hx::Val( set_skinPressedName_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"set_skinDisabledName") ) { return ::hx::Val( set_skinDisabledName_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_formatColorBeforeDisabled") ) { return ::hx::Val( _formatColorBeforeDisabled ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"_mouseChildrenBeforeDisabled") ) { return ::hx::Val( _mouseChildrenBeforeDisabled ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Button_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_onHout") ) { outValue = _onHout_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_onHover") ) { outValue = _onHover_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_onPress") ) { outValue = _onPress_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_onRelease") ) { outValue = _onRelease_dyn(); return true; }
	}
	return false;
}

::hx::Val Button_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ico") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_ico(inValue.Cast<  ::ru::stablex::ui::widgets::Bmp >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_ico") ) { _ico=inValue.Cast<  ::ru::stablex::ui::widgets::Bmp >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"apart") ) { apart=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onHout") ) { onHout=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pressed") ) { pressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hovered") ) { hovered=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPress") ) { onPress=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onHover") ) { onHover=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"disabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_disabled(inValue.Cast< bool >()) );disabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onRelease") ) { onRelease=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"icoHovered") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_icoHovered(inValue.Cast<  ::ru::stablex::ui::widgets::Bmp >()) ); }
		if (HX_FIELD_EQ(inName,"icoPressed") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_icoPressed(inValue.Cast<  ::ru::stablex::ui::widgets::Bmp >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_icoHovered") ) { _icoHovered=inValue.Cast<  ::ru::stablex::ui::widgets::Bmp >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_icoPressed") ) { _icoPressed=inValue.Cast<  ::ru::stablex::ui::widgets::Bmp >(); return inValue; }
		if (HX_FIELD_EQ(inName,"icoDisabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_icoDisabled(inValue.Cast<  ::ru::stablex::ui::widgets::Bmp >()) ); }
		if (HX_FIELD_EQ(inName,"skinHovered") ) { skinHovered=inValue.Cast<  ::ru::stablex::ui::skins::Skin >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skinPressed") ) { skinPressed=inValue.Cast<  ::ru::stablex::ui::skins::Skin >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_icoDisabled") ) { _icoDisabled=inValue.Cast<  ::ru::stablex::ui::widgets::Bmp >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skinDisabled") ) { skinDisabled=inValue.Cast<  ::ru::stablex::ui::skins::Skin >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"icoBeforeLabel") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_icoBeforeLabel(inValue.Cast< bool >()) );icoBeforeLabel=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"skinHoveredName") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_skinHoveredName(inValue.Cast< ::String >()) );skinHoveredName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skinPressedName") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_skinPressedName(inValue.Cast< ::String >()) );skinPressedName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skinDisabledName") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_skinDisabledName(inValue.Cast< ::String >()) );skinDisabledName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"disabledFormatColor") ) { disabledFormatColor=inValue.Cast< int >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_formatColorBeforeDisabled") ) { _formatColorBeforeDisabled=inValue.Cast< int >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"_mouseChildrenBeforeDisabled") ) { _mouseChildrenBeforeDisabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Button_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pressed",a2,d2,e6,39));
	outFields->push(HX_("hovered",1b,25,b7,7a));
	outFields->push(HX_("disabled",7c,41,04,7c));
	outFields->push(HX_("disabledFormatColor",90,da,b2,15));
	outFields->push(HX_("_mouseChildrenBeforeDisabled",c0,f4,91,69));
	outFields->push(HX_("_formatColorBeforeDisabled",a8,6a,21,03));
	outFields->push(HX_("ico",55,03,50,00));
	outFields->push(HX_("_ico",56,48,1b,3f));
	outFields->push(HX_("icoHovered",46,8e,ce,86));
	outFields->push(HX_("_icoHovered",65,5b,58,59));
	outFields->push(HX_("icoPressed",cd,3b,fe,45));
	outFields->push(HX_("_icoPressed",ec,08,88,18));
	outFields->push(HX_("icoDisabled",f1,dd,68,04));
	outFields->push(HX_("_icoDisabled",f2,8b,72,6a));
	outFields->push(HX_("icoBeforeLabel",a0,57,c7,2d));
	outFields->push(HX_("skinHoveredName",89,b5,39,41));
	outFields->push(HX_("skinHovered",1e,b0,c3,a3));
	outFields->push(HX_("skinPressedName",90,32,5c,d1));
	outFields->push(HX_("skinPressed",a5,5d,f3,62));
	outFields->push(HX_("skinDisabledName",04,f8,ee,cc));
	outFields->push(HX_("skinDisabled",19,59,f1,3d));
	outFields->push(HX_("apart",d4,28,30,24));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Button_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Button_obj,pressed),HX_("pressed",a2,d2,e6,39)},
	{::hx::fsBool,(int)offsetof(Button_obj,hovered),HX_("hovered",1b,25,b7,7a)},
	{::hx::fsBool,(int)offsetof(Button_obj,disabled),HX_("disabled",7c,41,04,7c)},
	{::hx::fsInt,(int)offsetof(Button_obj,disabledFormatColor),HX_("disabledFormatColor",90,da,b2,15)},
	{::hx::fsBool,(int)offsetof(Button_obj,_mouseChildrenBeforeDisabled),HX_("_mouseChildrenBeforeDisabled",c0,f4,91,69)},
	{::hx::fsInt,(int)offsetof(Button_obj,_formatColorBeforeDisabled),HX_("_formatColorBeforeDisabled",a8,6a,21,03)},
	{::hx::fsObject /*  ::ru::stablex::ui::widgets::Bmp */ ,(int)offsetof(Button_obj,_ico),HX_("_ico",56,48,1b,3f)},
	{::hx::fsObject /*  ::ru::stablex::ui::widgets::Bmp */ ,(int)offsetof(Button_obj,_icoHovered),HX_("_icoHovered",65,5b,58,59)},
	{::hx::fsObject /*  ::ru::stablex::ui::widgets::Bmp */ ,(int)offsetof(Button_obj,_icoPressed),HX_("_icoPressed",ec,08,88,18)},
	{::hx::fsObject /*  ::ru::stablex::ui::widgets::Bmp */ ,(int)offsetof(Button_obj,_icoDisabled),HX_("_icoDisabled",f2,8b,72,6a)},
	{::hx::fsBool,(int)offsetof(Button_obj,icoBeforeLabel),HX_("icoBeforeLabel",a0,57,c7,2d)},
	{::hx::fsString,(int)offsetof(Button_obj,skinHoveredName),HX_("skinHoveredName",89,b5,39,41)},
	{::hx::fsObject /*  ::ru::stablex::ui::skins::Skin */ ,(int)offsetof(Button_obj,skinHovered),HX_("skinHovered",1e,b0,c3,a3)},
	{::hx::fsString,(int)offsetof(Button_obj,skinPressedName),HX_("skinPressedName",90,32,5c,d1)},
	{::hx::fsObject /*  ::ru::stablex::ui::skins::Skin */ ,(int)offsetof(Button_obj,skinPressed),HX_("skinPressed",a5,5d,f3,62)},
	{::hx::fsString,(int)offsetof(Button_obj,skinDisabledName),HX_("skinDisabledName",04,f8,ee,cc)},
	{::hx::fsObject /*  ::ru::stablex::ui::skins::Skin */ ,(int)offsetof(Button_obj,skinDisabled),HX_("skinDisabled",19,59,f1,3d)},
	{::hx::fsBool,(int)offsetof(Button_obj,apart),HX_("apart",d4,28,30,24)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Button_obj,onPress),HX_("onPress",e4,f1,c5,5e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Button_obj,onRelease),HX_("onRelease",68,3e,98,30)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Button_obj,onHover),HX_("onHover",1d,84,a2,c1)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Button_obj,onHout),HX_("onHout",e5,d9,9c,e7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Button_obj_sStaticStorageInfo = 0;
#endif

static ::String Button_obj_sMemberFields[] = {
	HX_("pressed",a2,d2,e6,39),
	HX_("hovered",1b,25,b7,7a),
	HX_("disabled",7c,41,04,7c),
	HX_("disabledFormatColor",90,da,b2,15),
	HX_("_mouseChildrenBeforeDisabled",c0,f4,91,69),
	HX_("_formatColorBeforeDisabled",a8,6a,21,03),
	HX_("_ico",56,48,1b,3f),
	HX_("_icoHovered",65,5b,58,59),
	HX_("_icoPressed",ec,08,88,18),
	HX_("_icoDisabled",f2,8b,72,6a),
	HX_("icoBeforeLabel",a0,57,c7,2d),
	HX_("skinHoveredName",89,b5,39,41),
	HX_("skinHovered",1e,b0,c3,a3),
	HX_("skinPressedName",90,32,5c,d1),
	HX_("skinPressed",a5,5d,f3,62),
	HX_("skinDisabledName",04,f8,ee,cc),
	HX_("skinDisabled",19,59,f1,3d),
	HX_("apart",d4,28,30,24),
	HX_("onPress",e4,f1,c5,5e),
	HX_("onRelease",68,3e,98,30),
	HX_("onHover",1d,84,a2,c1),
	HX_("onHout",e5,d9,9c,e7),
	HX_("set_disabled",f9,18,17,46),
	HX_("set_icoBeforeLabel",dd,6a,10,a6),
	HX_("get_ico",ec,cb,c4,26),
	HX_("set_ico",f8,5c,c6,19),
	HX_("get_icoHovered",8f,16,c4,fc),
	HX_("set_icoHovered",03,ff,e3,1c),
	HX_("get_icoPressed",16,c4,f3,bb),
	HX_("set_icoPressed",8a,ac,13,dc),
	HX_("get_icoDisabled",88,95,4a,c5),
	HX_("set_icoDisabled",94,12,16,c1),
	HX_("set_skinHoveredName",ac,77,e1,08),
	HX_("set_skinPressedName",b3,f4,03,99),
	HX_("set_skinDisabledName",81,14,11,b8),
	HX_("_addIco",53,25,78,0d),
	HX_("_switchIco",82,9d,dc,69),
	HX_("_switchSkin",b0,63,cf,3d),
	HX_("refresh",db,d9,20,ed),
	HX_("applySkin",0b,17,24,36),
	HX_("alignElements",1c,16,13,65),
	HX_("_moveApart",c4,73,99,3d),
	::String(null()) };

::hx::Class Button_obj::__mClass;

static ::String Button_obj_sStaticFields[] = {
	HX_("_onHover",9e,dd,5a,fb),
	HX_("_onHout",84,eb,13,56),
	HX_("_onPress",65,4b,7e,98),
	HX_("_onRelease",29,ba,3a,8c),
	::String(null())
};

void Button_obj::__register()
{
	Button_obj _hx_dummy;
	Button_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ru.stablex.ui.widgets.Button",8f,df,32,24);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Button_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Button_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Button_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Button_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Button_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Button_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
} // end namespace widgets
