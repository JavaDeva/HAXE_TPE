// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_events_WidgetEvent
#include <ru/stablex/ui/events/WidgetEvent.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_layouts_Layout
#include <ru/stablex/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Box
#include <ru/stablex/ui/widgets/Box.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e70dc50e244ccd09_13_new,"ru.stablex.ui.widgets.Box","new",0x41812c40,"ru.stablex.ui.widgets.Box.new","ru/stablex/ui/widgets/Box.hx",13,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_63__objWidth,"ru.stablex.ui.widgets.Box","_objWidth",0x23fcd1ce,"ru.stablex.ui.widgets.Box._objWidth","ru/stablex/ui/widgets/Box.hx",63,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_72__objHeight,"ru.stablex.ui.widgets.Box","_objHeight",0x0f8a3b1f,"ru.stablex.ui.widgets.Box._objHeight","ru/stablex/ui/widgets/Box.hx",72,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_80__setObjX,"ru.stablex.ui.widgets.Box","_setObjX",0xae5f9ae4,"ru.stablex.ui.widgets.Box._setObjX","ru/stablex/ui/widgets/Box.hx",80,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_93__setObjY,"ru.stablex.ui.widgets.Box","_setObjY",0xae5f9ae5,"ru.stablex.ui.widgets.Box._setObjY","ru/stablex/ui/widgets/Box.hx",93,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_111_refresh,"ru.stablex.ui.widgets.Box","refresh",0x3959a5bb,"ru.stablex.ui.widgets.Box.refresh","ru/stablex/ui/widgets/Box.hx",111,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_135__calcWidth,"ru.stablex.ui.widgets.Box","_calcWidth",0x02362d12,"ru.stablex.ui.widgets.Box._calcWidth","ru/stablex/ui/widgets/Box.hx",135,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_177__calcHeight,"ru.stablex.ui.widgets.Box","_calcHeight",0xa380bb5b,"ru.stablex.ui.widgets.Box._calcHeight","ru/stablex/ui/widgets/Box.hx",177,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_219__resizeWithPercent,"ru.stablex.ui.widgets.Box","_resizeWithPercent",0xf26fc8ac,"ru.stablex.ui.widgets.Box._resizeWithPercent","ru/stablex/ui/widgets/Box.hx",219,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_246_alignElements,"ru.stablex.ui.widgets.Box","alignElements",0x933e09fc,"ru.stablex.ui.widgets.Box.alignElements","ru/stablex/ui/widgets/Box.hx",246,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_274__unifyChildren,"ru.stablex.ui.widgets.Box","_unifyChildren",0x0e130e03,"ru.stablex.ui.widgets.Box._unifyChildren","ru/stablex/ui/widgets/Box.hx",274,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_334__vAlignTop,"ru.stablex.ui.widgets.Box","_vAlignTop",0x23a20f47,"ru.stablex.ui.widgets.Box._vAlignTop","ru/stablex/ui/widgets/Box.hx",334,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_360__vAlignMiddle,"ru.stablex.ui.widgets.Box","_vAlignMiddle",0x1e3625e3,"ru.stablex.ui.widgets.Box._vAlignMiddle","ru/stablex/ui/widgets/Box.hx",360,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_403__vAlignBottom,"ru.stablex.ui.widgets.Box","_vAlignBottom",0x37503979,"ru.stablex.ui.widgets.Box._vAlignBottom","ru/stablex/ui/widgets/Box.hx",403,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_431__hAlignLeft,"ru.stablex.ui.widgets.Box","_hAlignLeft",0x80c76ce3,"ru.stablex.ui.widgets.Box._hAlignLeft","ru/stablex/ui/widgets/Box.hx",431,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_457__hAlignRight,"ru.stablex.ui.widgets.Box","_hAlignRight",0xa4c4e780,"ru.stablex.ui.widgets.Box._hAlignRight","ru/stablex/ui/widgets/Box.hx",457,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_485__hAlignCenter,"ru.stablex.ui.widgets.Box","_hAlignCenter",0x3f3a79b1,"ru.stablex.ui.widgets.Box._hAlignCenter","ru/stablex/ui/widgets/Box.hx",485,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_526_addChild,"ru.stablex.ui.widgets.Box","addChild",0x249067db,"ru.stablex.ui.widgets.Box.addChild","ru/stablex/ui/widgets/Box.hx",526,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_540_addChildAt,"ru.stablex.ui.widgets.Box","addChildAt",0xb75e8dae,"ru.stablex.ui.widgets.Box.addChildAt","ru/stablex/ui/widgets/Box.hx",540,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_554_removeChild,"ru.stablex.ui.widgets.Box","removeChild",0x5da9c298,"ru.stablex.ui.widgets.Box.removeChild","ru/stablex/ui/widgets/Box.hx",554,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_568_removeChildAt,"ru.stablex.ui.widgets.Box","removeChildAt",0x6d91d1ab,"ru.stablex.ui.widgets.Box.removeChildAt","ru/stablex/ui/widgets/Box.hx",568,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_582__onChildResize,"ru.stablex.ui.widgets.Box","_onChildResize",0xeea91232,"ru.stablex.ui.widgets.Box._onChildResize","ru/stablex/ui/widgets/Box.hx",582,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_622_get_contentHeight,"ru.stablex.ui.widgets.Box","get_contentHeight",0xc299a937,"ru.stablex.ui.widgets.Box.get_contentHeight","ru/stablex/ui/widgets/Box.hx",622,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_631_get_contentWidth,"ru.stablex.ui.widgets.Box","get_contentWidth",0x708eaeb6,"ru.stablex.ui.widgets.Box.get_contentWidth","ru/stablex/ui/widgets/Box.hx",631,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_640_set_autoSize,"ru.stablex.ui.widgets.Box","set_autoSize",0x64848f6d,"ru.stablex.ui.widgets.Box.set_autoSize","ru/stablex/ui/widgets/Box.hx",640,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_648_set_w,"ru.stablex.ui.widgets.Box","set_w",0x6653af3a,"ru.stablex.ui.widgets.Box.set_w","ru/stablex/ui/widgets/Box.hx",648,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_658_set_widthPt,"ru.stablex.ui.widgets.Box","set_widthPt",0xdb24acad,"ru.stablex.ui.widgets.Box.set_widthPt","ru/stablex/ui/widgets/Box.hx",658,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_668_set_heightPt,"ru.stablex.ui.widgets.Box","set_heightPt",0x68565568,"ru.stablex.ui.widgets.Box.set_heightPt","ru/stablex/ui/widgets/Box.hx",668,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_678_set_h,"ru.stablex.ui.widgets.Box","set_h",0x6653af2b,"ru.stablex.ui.widgets.Box.set_h","ru/stablex/ui/widgets/Box.hx",678,0x607c8670)
HX_LOCAL_STACK_FRAME(_hx_pos_e70dc50e244ccd09_688_set_padding,"ru.stablex.ui.widgets.Box","set_padding",0x7aa0fcd4,"ru.stablex.ui.widgets.Box.set_padding","ru/stablex/ui/widgets/Box.hx",688,0x607c8670)
namespace ru{
namespace stablex{
namespace ui{
namespace widgets{

void Box_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_13_new)
HXLINE(  46)		this->_processingChildResize = false;
HXLINE(  44)		this->intPositions = false;
HXLINE(  42)		this->unifyChildren = false;
HXLINE(  40)		this->autoHeight = true;
HXLINE(  38)		this->autoWidth = true;
HXLINE(  34)		this->align = HX_("center,middle",4c,ab,0b,8f);
HXLINE(  28)		this->childPadding = ((Float)0);
HXLINE(  26)		this->paddingBottom = ((Float)0);
HXLINE(  24)		this->paddingTop = ((Float)0);
HXLINE(  22)		this->paddingRight = ((Float)0);
HXLINE(  20)		this->paddingLeft = ((Float)0);
HXLINE(  16)		this->vertical = true;
HXLINE(  13)		super::__construct();
            	}

Dynamic Box_obj::__CreateEmpty() { return new Box_obj; }

void *Box_obj::_hx_vtable = 0;

Dynamic Box_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Box_obj > _hx_result = new Box_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Box_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1210c5aa || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			if (inClassId<=(int)0x270e5222) {
				return inClassId==(int)0x2383f585 || inClassId==(int)0x270e5222;
			} else {
				return inClassId==(int)0x4af7dd8e;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

Float Box_obj::_objWidth( ::openfl::display::DisplayObject obj){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_63__objWidth)
HXDLIN(  63)		if (::Std_obj::isOfType(obj,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXDLIN(  63)			return ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(obj)->get_w();
            		}
            		else {
HXDLIN(  63)			if (::Std_obj::isOfType(obj,( ( ::Dynamic)(::hx::ClassOf< ::openfl::text::TextField >()) ))) {
HXDLIN(  63)				return (::hx::TCast<  ::openfl::text::TextField >::cast(obj)->get_textWidth() + 4);
            			}
            			else {
HXDLIN(  63)				return obj->get_width();
            			}
            		}
HXDLIN(  63)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Box_obj,_objWidth,return )

Float Box_obj::_objHeight( ::openfl::display::DisplayObject obj){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_72__objHeight)
HXDLIN(  72)		if (::Std_obj::isOfType(obj,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXDLIN(  72)			return ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(obj)->get_h();
            		}
            		else {
HXDLIN(  72)			if (::Std_obj::isOfType(obj,( ( ::Dynamic)(::hx::ClassOf< ::openfl::text::TextField >()) ))) {
HXDLIN(  72)				return (::hx::TCast<  ::openfl::text::TextField >::cast(obj)->get_textHeight() + 4);
            			}
            			else {
HXDLIN(  72)				return obj->get_height();
            			}
            		}
HXDLIN(  72)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Box_obj,_objHeight,return )

void Box_obj::_setObjX( ::openfl::display::DisplayObject obj,Float x){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_80__setObjX)
HXLINE(  81)		obj->set_x(x);
HXLINE(  83)		if (this->intPositions) {
HXLINE(  84)			obj->set_x(( (Float)(::Std_obj::_hx_int(obj->get_x())) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Box_obj,_setObjX,(void))

void Box_obj::_setObjY( ::openfl::display::DisplayObject obj,Float y){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_93__setObjY)
HXLINE(  94)		obj->set_y(y);
HXLINE(  96)		if (this->intPositions) {
HXLINE(  97)			obj->set_y(( (Float)(::Std_obj::_hx_int(obj->get_y())) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Box_obj,_setObjY,(void))

void Box_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_111_refresh)
HXLINE( 112)		bool _hx_tmp;
HXDLIN( 112)		if (!(this->autoWidth)) {
HXLINE( 112)			_hx_tmp = this->autoHeight;
            		}
            		else {
HXLINE( 112)			_hx_tmp = true;
            		}
HXDLIN( 112)		if (_hx_tmp) {
HXLINE( 113)			Float w;
HXDLIN( 113)			if (this->autoWidth) {
HXLINE( 113)				w = this->_calcWidth();
            			}
            			else {
HXLINE( 113)				w = this->_width;
            			}
HXLINE( 114)			Float h;
HXDLIN( 114)			if (this->autoHeight) {
HXLINE( 114)				h = this->_calcHeight();
            			}
            			else {
HXLINE( 114)				h = this->_height;
            			}
HXLINE( 116)			bool _hx_tmp;
HXDLIN( 116)			if ((this->_width == w)) {
HXLINE( 116)				_hx_tmp = (this->_height != h);
            			}
            			else {
HXLINE( 116)				_hx_tmp = true;
            			}
HXDLIN( 116)			if (_hx_tmp) {
HXLINE( 117)				this->resize(w,h,true);
            			}
            		}
HXLINE( 121)		this->super::refresh();
HXLINE( 123)		if (::hx::IsNull( this->layout )) {
HXLINE( 124)			this->alignElements();
            		}
            	}


Float Box_obj::_calcWidth(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_135__calcWidth)
HXDLIN( 135)		if (this->vertical) {
HXLINE( 137)			Float w = ( (Float)(0) );
HXLINE( 138)			 ::openfl::display::DisplayObject child;
HXLINE( 139)			Float childW = ( (Float)(0) );
HXLINE( 141)			{
HXLINE( 141)				int _g = 0;
HXDLIN( 141)				int _g1 = this->get_numChildren();
HXDLIN( 141)				while((_g < _g1)){
HXLINE( 141)					_g = (_g + 1);
HXDLIN( 141)					int i = (_g - 1);
HXLINE( 142)					child = this->getChildAt(i);
HXLINE( 143)					if (child->get_visible()) {
HXLINE( 144)						childW = this->_objWidth(child);
HXLINE( 145)						if ((childW > w)) {
HXLINE( 146)							w = childW;
            						}
            					}
            				}
            			}
HXLINE( 151)			return ((w + this->paddingLeft) + this->paddingRight);
            		}
            		else {
HXLINE( 154)			Float w = (this->paddingLeft + this->paddingRight);
HXLINE( 155)			 ::openfl::display::DisplayObject child;
HXLINE( 156)			int visibleChildren = 0;
HXLINE( 158)			{
HXLINE( 158)				int _g = 0;
HXDLIN( 158)				int _g1 = this->get_numChildren();
HXDLIN( 158)				while((_g < _g1)){
HXLINE( 158)					_g = (_g + 1);
HXDLIN( 158)					int i = (_g - 1);
HXLINE( 159)					child = this->getChildAt(i);
HXLINE( 160)					if (child->get_visible()) {
HXLINE( 161)						w = (w + this->_objWidth(child));
HXLINE( 162)						visibleChildren = (visibleChildren + 1);
            					}
            				}
            			}
HXLINE( 166)			return (w + (( (Float)((visibleChildren - 1)) ) * this->childPadding));
            		}
HXLINE( 135)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_calcWidth,return )

Float Box_obj::_calcHeight(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_177__calcHeight)
HXDLIN( 177)		if (this->vertical) {
HXLINE( 179)			Float h = (this->paddingTop + this->paddingBottom);
HXLINE( 180)			 ::openfl::display::DisplayObject child;
HXLINE( 181)			int visibleChildren = 0;
HXLINE( 183)			{
HXLINE( 183)				int _g = 0;
HXDLIN( 183)				int _g1 = this->get_numChildren();
HXDLIN( 183)				while((_g < _g1)){
HXLINE( 183)					_g = (_g + 1);
HXDLIN( 183)					int i = (_g - 1);
HXLINE( 184)					child = this->getChildAt(i);
HXLINE( 185)					if (child->get_visible()) {
HXLINE( 186)						h = (h + this->_objHeight(child));
HXLINE( 187)						visibleChildren = (visibleChildren + 1);
            					}
            				}
            			}
HXLINE( 191)			return (h + (( (Float)((visibleChildren - 1)) ) * this->childPadding));
            		}
            		else {
HXLINE( 196)			Float h = ( (Float)(0) );
HXLINE( 197)			Float childH = ( (Float)(0) );
HXLINE( 198)			 ::openfl::display::DisplayObject child;
HXLINE( 200)			{
HXLINE( 200)				int _g = 0;
HXDLIN( 200)				int _g1 = this->get_numChildren();
HXDLIN( 200)				while((_g < _g1)){
HXLINE( 200)					_g = (_g + 1);
HXDLIN( 200)					int i = (_g - 1);
HXLINE( 201)					child = this->getChildAt(i);
HXLINE( 202)					if (child->get_visible()) {
HXLINE( 203)						childH = this->_objHeight(child);
HXLINE( 204)						if ((childH > h)) {
HXLINE( 205)							h = childH;
            						}
            					}
            				}
            			}
HXLINE( 210)			return ((h + this->paddingTop) + this->paddingBottom);
            		}
HXLINE( 177)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_calcHeight,return )

void Box_obj::_resizeWithPercent( ::ru::stablex::ui::widgets::Widget parent){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_219__resizeWithPercent)
HXLINE( 220)		Float newWidth;
HXDLIN( 220)		if (this->_widthUsePercent) {
HXLINE( 222)			Float newWidth1 = parent->get_contentWidth();
HXLINE( 220)			newWidth = ((newWidth1 * this->_widthPercent) / ( (Float)(100) ));
            		}
            		else {
HXLINE( 220)			newWidth = this->_width;
            		}
HXLINE( 225)		Float newHeight;
HXDLIN( 225)		if (this->_heightUsePercent) {
HXLINE( 227)			Float newHeight1 = parent->get_contentHeight();
HXLINE( 225)			newHeight = ((newHeight1 * this->_heightPercent) / ( (Float)(100) ));
            		}
            		else {
HXLINE( 225)			newHeight = this->_height;
            		}
HXLINE( 231)		if (this->minWidthByContent) {
HXLINE( 232)			newWidth = ::Math_obj::max(newWidth,this->_calcWidth());
            		}
HXLINE( 234)		if (this->minHeightByContent) {
HXLINE( 235)			newHeight = ::Math_obj::max(newHeight,this->_calcHeight());
            		}
HXLINE( 238)		this->resize(newWidth,newHeight,true);
            	}


void Box_obj::alignElements(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_246_alignElements)
HXLINE( 247)		if (this->unifyChildren) {
HXLINE( 248)			this->_unifyChildren();
            		}
HXLINE( 252)		if ((this->get_numChildren() == 0)) {
HXLINE( 252)			return;
            		}
HXLINE( 254)		::Array< ::String > alignments = this->align.split(HX_(",",2c,00,00,00));
HXLINE( 257)		{
HXLINE( 257)			int _g = 0;
HXDLIN( 257)			while((_g < alignments->length)){
HXLINE( 257)				::String align = alignments->__get(_g);
HXDLIN( 257)				_g = (_g + 1);
HXLINE( 258)				::String _hx_switch_0 = align;
            				if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ){
HXLINE( 261)					this->_vAlignBottom();
HXDLIN( 261)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE( 263)					this->_hAlignCenter();
HXDLIN( 263)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 262)					this->_hAlignLeft();
HXDLIN( 262)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_0==HX_("middle",55,d3,5e,4c)) ){
HXLINE( 260)					this->_vAlignMiddle();
HXDLIN( 260)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 264)					this->_hAlignRight();
HXDLIN( 264)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE( 259)					this->_vAlignTop();
HXDLIN( 259)					goto _hx_goto_14;
            				}
            				_hx_goto_14:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,alignElements,(void))

void Box_obj::_unifyChildren(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_274__unifyChildren)
HXLINE( 288)		int visibleChildren = 0;
HXLINE( 289)		{
HXLINE( 289)			int _g = 0;
HXDLIN( 289)			int _g1 = this->get_numChildren();
HXDLIN( 289)			while((_g < _g1)){
HXLINE( 289)				_g = (_g + 1);
HXDLIN( 289)				int i = (_g - 1);
HXLINE( 290)				if (this->getChildAt(i)->get_visible()) {
HXLINE( 291)					visibleChildren = (visibleChildren + 1);
            				}
            			}
            		}
HXLINE( 295)		 ::openfl::display::DisplayObject child;
HXLINE( 298)		if (this->vertical) {
HXLINE( 299)			Float childWidth = ((this->_width - this->paddingLeft) - this->paddingRight);
HXLINE( 300)			Float childHeight = ((((this->_height - this->paddingTop) - this->paddingBottom) - (this->childPadding * ( (Float)((visibleChildren - 1)) ))) / ( (Float)(visibleChildren) ));
HXLINE( 302)			{
HXLINE( 302)				int _g = 0;
HXDLIN( 302)				int _g1 = this->get_numChildren();
HXDLIN( 302)				while((_g < _g1)){
HXLINE( 302)					_g = (_g + 1);
HXDLIN( 302)					int i = (_g - 1);
HXLINE( 303)					child = this->getChildAt(i);
HXLINE( 304)					if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 305)						::hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null());
HXLINE( 306)						::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->resize(childWidth,childHeight,null());
HXLINE( 307)						::hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null(),null(),null());
            					}
            				}
            			}
            		}
            		else {
HXLINE( 313)			Float childWidth = ((((this->_width - this->paddingLeft) - this->paddingRight) - (this->childPadding * ( (Float)((visibleChildren - 1)) ))) / ( (Float)(visibleChildren) ));
HXLINE( 314)			Float childHeight = ((this->_height - this->paddingTop) - this->paddingBottom);
HXLINE( 316)			{
HXLINE( 316)				int _g = 0;
HXDLIN( 316)				int _g1 = this->get_numChildren();
HXDLIN( 316)				while((_g < _g1)){
HXLINE( 316)					_g = (_g + 1);
HXDLIN( 316)					int i = (_g - 1);
HXLINE( 317)					child = this->getChildAt(i);
HXLINE( 318)					if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 319)						::hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null());
HXLINE( 320)						::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(child)->resize(childWidth,childHeight,null());
HXLINE( 321)						::hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null(),null(),null());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_unifyChildren,(void))

void Box_obj::_vAlignTop(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_334__vAlignTop)
HXDLIN( 334)		if (this->vertical) {
HXLINE( 335)			Float lastY = this->paddingTop;
HXLINE( 336)			 ::openfl::display::DisplayObject child;
HXLINE( 338)			{
HXLINE( 338)				int _g = 0;
HXDLIN( 338)				int _g1 = this->get_numChildren();
HXDLIN( 338)				while((_g < _g1)){
HXLINE( 338)					_g = (_g + 1);
HXDLIN( 338)					int i = (_g - 1);
HXLINE( 339)					child = this->getChildAt(i);
HXLINE( 340)					if (!(child->get_visible())) {
HXLINE( 340)						continue;
            					}
HXLINE( 341)					this->_setObjY(child,lastY);
HXLINE( 342)					Float lastY1 = this->_objHeight(child);
HXDLIN( 342)					lastY = (lastY + (lastY1 + this->childPadding));
            				}
            			}
            		}
            		else {
HXLINE( 347)			int _g = 0;
HXDLIN( 347)			int _g1 = this->get_numChildren();
HXDLIN( 347)			while((_g < _g1)){
HXLINE( 347)				_g = (_g + 1);
HXDLIN( 347)				int i = (_g - 1);
HXLINE( 348)				 ::openfl::display::DisplayObject _hx_tmp = this->getChildAt(i);
HXDLIN( 348)				this->_setObjY(_hx_tmp,this->paddingTop);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_vAlignTop,(void))

void Box_obj::_vAlignMiddle(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_360__vAlignMiddle)
HXDLIN( 360)		if (this->vertical) {
HXLINE( 362)			Float height = ( (Float)(0) );
HXLINE( 363)			 ::openfl::display::DisplayObject child;
HXLINE( 364)			int visibleChildren = 0;
HXLINE( 366)			{
HXLINE( 366)				int _g = 0;
HXDLIN( 366)				int _g1 = this->get_numChildren();
HXDLIN( 366)				while((_g < _g1)){
HXLINE( 366)					_g = (_g + 1);
HXDLIN( 366)					int i = (_g - 1);
HXLINE( 367)					child = this->getChildAt(i);
HXLINE( 368)					if (!(child->get_visible())) {
HXLINE( 368)						continue;
            					}
HXLINE( 369)					visibleChildren = (visibleChildren + 1);
HXLINE( 370)					height = (height + this->_objHeight(child));
            				}
            			}
HXLINE( 374)			height = (height + (( (Float)((visibleChildren - 1)) ) * this->childPadding));
HXLINE( 377)			Float lastY = this->get_h();
HXDLIN( 377)			Float lastY1 = (((((lastY - this->paddingTop) - this->paddingBottom) - height) / ( (Float)(2) )) + this->paddingTop);
HXLINE( 379)			{
HXLINE( 379)				int _g2 = 0;
HXDLIN( 379)				int _g3 = this->get_numChildren();
HXDLIN( 379)				while((_g2 < _g3)){
HXLINE( 379)					_g2 = (_g2 + 1);
HXDLIN( 379)					int i = (_g2 - 1);
HXLINE( 380)					child = this->getChildAt(i);
HXLINE( 381)					if (!(child->get_visible())) {
HXLINE( 381)						continue;
            					}
HXLINE( 382)					this->_setObjY(child,lastY1);
HXLINE( 383)					Float lastY = this->_objHeight(child);
HXDLIN( 383)					lastY1 = (lastY1 + (lastY + this->childPadding));
            				}
            			}
            		}
            		else {
HXLINE( 388)			 ::openfl::display::DisplayObject child;
HXLINE( 389)			{
HXLINE( 389)				int _g = 0;
HXDLIN( 389)				int _g1 = this->get_numChildren();
HXDLIN( 389)				while((_g < _g1)){
HXLINE( 389)					_g = (_g + 1);
HXDLIN( 389)					int i = (_g - 1);
HXLINE( 390)					child = this->getChildAt(i);
HXLINE( 391)					Float _hx_tmp = this->get_h();
HXDLIN( 391)					Float _hx_tmp1 = ((_hx_tmp - this->paddingTop) - this->paddingBottom);
HXDLIN( 391)					Float _hx_tmp2 = ((_hx_tmp1 - this->_objHeight(child)) / ( (Float)(2) ));
HXDLIN( 391)					this->_setObjY(child,(_hx_tmp2 + this->paddingTop));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_vAlignMiddle,(void))

void Box_obj::_vAlignBottom(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_403__vAlignBottom)
HXDLIN( 403)		if (this->vertical) {
HXLINE( 404)			Float lastY = this->get_h();
HXDLIN( 404)			Float lastY1 = (lastY - this->paddingBottom);
HXLINE( 405)			 ::openfl::display::DisplayObject child;
HXLINE( 407)			{
HXLINE( 407)				int _g = 0;
HXDLIN( 407)				int _g1 = this->get_numChildren();
HXDLIN( 407)				while((_g < _g1)){
HXLINE( 407)					_g = (_g + 1);
HXDLIN( 407)					int i = (_g - 1);
HXLINE( 408)					child = this->getChildAt(((this->get_numChildren() - 1) - i));
HXLINE( 409)					if (!(child->get_visible())) {
HXLINE( 409)						continue;
            					}
HXLINE( 410)					this->_setObjY(child,(lastY1 - this->_objHeight(child)));
HXLINE( 411)					Float lastY = child->get_y();
HXDLIN( 411)					lastY1 = (lastY - this->childPadding);
            				}
            			}
            		}
            		else {
HXLINE( 416)			 ::openfl::display::DisplayObject child;
HXLINE( 417)			{
HXLINE( 417)				int _g = 0;
HXDLIN( 417)				int _g1 = this->get_numChildren();
HXDLIN( 417)				while((_g < _g1)){
HXLINE( 417)					_g = (_g + 1);
HXDLIN( 417)					int i = (_g - 1);
HXLINE( 418)					child = this->getChildAt(i);
HXLINE( 419)					Float _hx_tmp = this->get_h();
HXDLIN( 419)					Float _hx_tmp1 = (_hx_tmp - this->paddingBottom);
HXDLIN( 419)					this->_setObjY(child,(_hx_tmp1 - this->_objHeight(child)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_vAlignBottom,(void))

void Box_obj::_hAlignLeft(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_431__hAlignLeft)
HXDLIN( 431)		if (this->vertical) {
HXLINE( 432)			int _g = 0;
HXDLIN( 432)			int _g1 = this->get_numChildren();
HXDLIN( 432)			while((_g < _g1)){
HXLINE( 432)				_g = (_g + 1);
HXDLIN( 432)				int i = (_g - 1);
HXLINE( 433)				 ::openfl::display::DisplayObject _hx_tmp = this->getChildAt(i);
HXDLIN( 433)				this->_setObjX(_hx_tmp,this->paddingLeft);
            			}
            		}
            		else {
HXLINE( 438)			Float lastX = this->paddingLeft;
HXLINE( 439)			 ::openfl::display::DisplayObject child;
HXLINE( 441)			{
HXLINE( 441)				int _g = 0;
HXDLIN( 441)				int _g1 = this->get_numChildren();
HXDLIN( 441)				while((_g < _g1)){
HXLINE( 441)					_g = (_g + 1);
HXDLIN( 441)					int i = (_g - 1);
HXLINE( 442)					child = this->getChildAt(i);
HXLINE( 443)					if (!(child->get_visible())) {
HXLINE( 443)						continue;
            					}
HXLINE( 444)					this->_setObjX(child,lastX);
HXLINE( 445)					Float lastX1 = this->_objWidth(child);
HXDLIN( 445)					lastX = (lastX + (lastX1 + this->childPadding));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_hAlignLeft,(void))

void Box_obj::_hAlignRight(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_457__hAlignRight)
HXDLIN( 457)		if (this->vertical) {
HXLINE( 458)			 ::openfl::display::DisplayObject child;
HXLINE( 459)			{
HXLINE( 459)				int _g = 0;
HXDLIN( 459)				int _g1 = this->get_numChildren();
HXDLIN( 459)				while((_g < _g1)){
HXLINE( 459)					_g = (_g + 1);
HXDLIN( 459)					int i = (_g - 1);
HXLINE( 460)					child = this->getChildAt(i);
HXLINE( 461)					Float _hx_tmp = this->get_w();
HXDLIN( 461)					Float _hx_tmp1 = (_hx_tmp - this->paddingRight);
HXDLIN( 461)					this->_setObjX(child,(_hx_tmp1 - this->_objWidth(child)));
            				}
            			}
            		}
            		else {
HXLINE( 466)			Float lastX = this->get_w();
HXDLIN( 466)			Float lastX1 = (lastX - this->paddingRight);
HXLINE( 467)			 ::openfl::display::DisplayObject child;
HXLINE( 469)			{
HXLINE( 469)				int _g = 0;
HXDLIN( 469)				int _g1 = this->get_numChildren();
HXDLIN( 469)				while((_g < _g1)){
HXLINE( 469)					_g = (_g + 1);
HXDLIN( 469)					int i = (_g - 1);
HXLINE( 470)					child = this->getChildAt(((this->get_numChildren() - 1) - i));
HXLINE( 471)					if (!(child->get_visible())) {
HXLINE( 471)						continue;
            					}
HXLINE( 472)					this->_setObjX(child,(lastX1 - this->_objWidth(child)));
HXLINE( 473)					Float lastX = child->get_x();
HXDLIN( 473)					lastX1 = (lastX - this->childPadding);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_hAlignRight,(void))

void Box_obj::_hAlignCenter(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_485__hAlignCenter)
HXDLIN( 485)		if (this->vertical) {
HXLINE( 486)			 ::openfl::display::DisplayObject child;
HXLINE( 487)			{
HXLINE( 487)				int _g = 0;
HXDLIN( 487)				int _g1 = this->get_numChildren();
HXDLIN( 487)				while((_g < _g1)){
HXLINE( 487)					_g = (_g + 1);
HXDLIN( 487)					int i = (_g - 1);
HXLINE( 488)					child = this->getChildAt(i);
HXLINE( 489)					Float _hx_tmp = this->get_w();
HXDLIN( 489)					Float _hx_tmp1 = ((_hx_tmp - this->paddingLeft) - this->paddingRight);
HXDLIN( 489)					Float _hx_tmp2 = ((_hx_tmp1 - this->_objWidth(child)) / ( (Float)(2) ));
HXDLIN( 489)					this->_setObjX(child,(_hx_tmp2 + this->paddingLeft));
            				}
            			}
            		}
            		else {
HXLINE( 495)			 ::openfl::display::DisplayObject child;
HXLINE( 496)			Float width = ( (Float)(0) );
HXLINE( 497)			int visibleChildren = 0;
HXLINE( 499)			{
HXLINE( 499)				int _g = 0;
HXDLIN( 499)				int _g1 = this->get_numChildren();
HXDLIN( 499)				while((_g < _g1)){
HXLINE( 499)					_g = (_g + 1);
HXDLIN( 499)					int i = (_g - 1);
HXLINE( 500)					child = this->getChildAt(i);
HXLINE( 501)					if (!(child->get_visible())) {
HXLINE( 501)						continue;
            					}
HXLINE( 502)					visibleChildren = (visibleChildren + 1);
HXLINE( 503)					width = (width + this->_objWidth(child));
            				}
            			}
HXLINE( 507)			width = (width + (( (Float)((visibleChildren - 1)) ) * this->childPadding));
HXLINE( 510)			Float lastX = this->get_w();
HXDLIN( 510)			Float lastX1 = (((((lastX - this->paddingLeft) - this->paddingRight) - width) / ( (Float)(2) )) + this->paddingLeft);
HXLINE( 512)			{
HXLINE( 512)				int _g2 = 0;
HXDLIN( 512)				int _g3 = this->get_numChildren();
HXDLIN( 512)				while((_g2 < _g3)){
HXLINE( 512)					_g2 = (_g2 + 1);
HXDLIN( 512)					int i = (_g2 - 1);
HXLINE( 513)					child = this->getChildAt(i);
HXLINE( 514)					if (!(child->get_visible())) {
HXLINE( 514)						continue;
            					}
HXLINE( 515)					this->_setObjX(child,lastX1);
HXLINE( 516)					Float lastX = this->_objWidth(child);
HXDLIN( 516)					lastX1 = (lastX1 + (lastX + this->childPadding));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Box_obj,_hAlignCenter,(void))

 ::openfl::display::DisplayObject Box_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_526_addChild)
HXLINE( 527)		this->super::addChild(child);
HXLINE( 528)		if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 529)			::hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null(),null(),null());
HXLINE( 530)			this->_onChildResize(null());
            		}
HXLINE( 532)		return child;
            	}


 ::openfl::display::DisplayObject Box_obj::addChildAt( ::openfl::display::DisplayObject child,int idx){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_540_addChildAt)
HXLINE( 541)		this->super::addChildAt(child,idx);
HXLINE( 542)		if (::Std_obj::isOfType(child,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 543)			::hx::TCast<  ::ru::stablex::TweenSprite >::cast(child)->addUniqueListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null(),null(),null());
HXLINE( 544)			this->_onChildResize(null());
            		}
HXLINE( 546)		return child;
            	}


 ::openfl::display::DisplayObject Box_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_554_removeChild)
HXLINE( 555)		this->super::removeChild(child);
HXLINE( 556)		child->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null());
HXLINE( 557)		if (!(this->destroyed)) {
HXLINE( 558)			this->_onChildResize(null());
            		}
HXLINE( 560)		return child;
            	}


 ::openfl::display::DisplayObject Box_obj::removeChildAt(int idx){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_568_removeChildAt)
HXLINE( 569)		 ::openfl::display::DisplayObject child = this->super::removeChildAt(idx);
HXLINE( 570)		child->removeEventListener(HX_("widgetResize",d8,a8,1e,0d),this->_onChildResize_dyn(),null());
HXLINE( 571)		if (!(this->destroyed)) {
HXLINE( 572)			this->_onChildResize(null());
            		}
HXLINE( 574)		return child;
            	}


void Box_obj::_onChildResize( ::ru::stablex::ui::events::WidgetEvent e){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_582__onChildResize)
HXLINE( 583)		if (this->_processingChildResize) {
HXLINE( 583)			return;
            		}
HXLINE( 584)		this->_processingChildResize = true;
HXLINE( 586)		if (this->created) {
HXLINE( 587)			bool _hx_tmp;
HXDLIN( 587)			if (!(this->autoWidth)) {
HXLINE( 587)				_hx_tmp = this->autoHeight;
            			}
            			else {
HXLINE( 587)				_hx_tmp = true;
            			}
HXDLIN( 587)			if (_hx_tmp) {
HXLINE( 588)				if (::hx::IsNotNull( e )) {
HXLINE( 589)					 ::ru::stablex::ui::widgets::Widget child;
HXDLIN( 589)					if (::Std_obj::isOfType(e->currentTarget,( ( ::Dynamic)(::hx::ClassOf< ::ru::stablex::ui::widgets::Widget >()) ))) {
HXLINE( 589)						child = ::hx::TCast<  ::ru::stablex::ui::widgets::Widget >::cast(e->currentTarget);
            					}
            					else {
HXLINE( 589)						child = null();
            					}
HXLINE( 591)					bool _hx_tmp;
HXDLIN( 591)					bool _hx_tmp1;
HXDLIN( 591)					bool _hx_tmp2;
HXDLIN( 591)					if (::hx::IsNotNull( child )) {
HXLINE( 591)						_hx_tmp2 = (child->get_visible() != false);
            					}
            					else {
HXLINE( 591)						_hx_tmp2 = false;
            					}
HXDLIN( 591)					if (_hx_tmp2) {
HXLINE( 592)						bool _hx_tmp;
HXDLIN( 592)						if (this->autoWidth) {
HXLINE( 592)							_hx_tmp = child->_widthUsePercent;
            						}
            						else {
HXLINE( 592)							_hx_tmp = false;
            						}
HXLINE( 591)						_hx_tmp1 = !(_hx_tmp);
            					}
            					else {
HXLINE( 591)						_hx_tmp1 = false;
            					}
HXDLIN( 591)					if (_hx_tmp1) {
HXLINE( 593)						bool _hx_tmp1;
HXDLIN( 593)						if (this->autoHeight) {
HXLINE( 593)							_hx_tmp1 = child->_heightUsePercent;
            						}
            						else {
HXLINE( 593)							_hx_tmp1 = false;
            						}
HXLINE( 591)						_hx_tmp = !(_hx_tmp1);
            					}
            					else {
HXLINE( 591)						_hx_tmp = false;
            					}
HXLINE( 590)					if (_hx_tmp) {
HXLINE( 595)						this->refresh();
            					}
            				}
            				else {
HXLINE( 598)					this->refresh();
            				}
            			}
            			else {
HXLINE( 601)				if (::hx::IsNull( this->layout )) {
HXLINE( 602)					this->alignElements();
            				}
            				else {
HXLINE( 604)					this->applyLayout();
            				}
            			}
            		}
HXLINE( 609)		this->_processingChildResize = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Box_obj,_onChildResize,(void))

Float Box_obj::get_contentHeight(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_622_get_contentHeight)
HXDLIN( 622)		Float _hx_tmp = this->get_h();
HXDLIN( 622)		return ((_hx_tmp - this->paddingTop) - this->paddingBottom);
            	}


Float Box_obj::get_contentWidth(){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_631_get_contentWidth)
HXDLIN( 631)		Float _hx_tmp = this->get_w();
HXDLIN( 631)		return ((_hx_tmp - this->paddingLeft) - this->paddingRight);
            	}


bool Box_obj::set_autoSize(bool as){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_640_set_autoSize)
HXDLIN( 640)		return (this->autoWidth = (this->autoHeight = as));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Box_obj,set_autoSize,return )

Float Box_obj::set_w(Float w){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_648_set_w)
HXLINE( 649)		this->autoWidth = false;
HXLINE( 650)		return this->super::set_w(w);
            	}


Float Box_obj::set_widthPt(Float wp){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_658_set_widthPt)
HXLINE( 659)		this->autoWidth = false;
HXLINE( 660)		return this->super::set_widthPt(wp);
            	}


Float Box_obj::set_heightPt(Float hp){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_668_set_heightPt)
HXLINE( 669)		this->autoHeight = false;
HXLINE( 670)		return this->super::set_heightPt(hp);
            	}


Float Box_obj::set_h(Float h){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_678_set_h)
HXLINE( 679)		this->autoHeight = false;
HXLINE( 680)		return this->super::set_h(h);
            	}


Float Box_obj::set_padding(Float p){
            	HX_STACKFRAME(&_hx_pos_e70dc50e244ccd09_688_set_padding)
HXLINE( 689)		this->paddingTop = (this->paddingBottom = (this->paddingRight = (this->paddingLeft = p)));
HXLINE( 690)		return p;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Box_obj,set_padding,return )


::hx::ObjectPtr< Box_obj > Box_obj::__new() {
	::hx::ObjectPtr< Box_obj > __this = new Box_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Box_obj > Box_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Box_obj *__this = (Box_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Box_obj), true, "ru.stablex.ui.widgets.Box"));
	*(void **)__this = Box_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Box_obj::Box_obj()
{
}

void Box_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Box);
	HX_MARK_MEMBER_NAME(vertical,"vertical");
	HX_MARK_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_MARK_MEMBER_NAME(paddingRight,"paddingRight");
	HX_MARK_MEMBER_NAME(paddingTop,"paddingTop");
	HX_MARK_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_MARK_MEMBER_NAME(childPadding,"childPadding");
	HX_MARK_MEMBER_NAME(align,"align");
	HX_MARK_MEMBER_NAME(autoWidth,"autoWidth");
	HX_MARK_MEMBER_NAME(autoHeight,"autoHeight");
	HX_MARK_MEMBER_NAME(unifyChildren,"unifyChildren");
	HX_MARK_MEMBER_NAME(intPositions,"intPositions");
	HX_MARK_MEMBER_NAME(_processingChildResize,"_processingChildResize");
	 ::ru::stablex::ui::widgets::Widget_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Box_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vertical,"vertical");
	HX_VISIT_MEMBER_NAME(paddingLeft,"paddingLeft");
	HX_VISIT_MEMBER_NAME(paddingRight,"paddingRight");
	HX_VISIT_MEMBER_NAME(paddingTop,"paddingTop");
	HX_VISIT_MEMBER_NAME(paddingBottom,"paddingBottom");
	HX_VISIT_MEMBER_NAME(childPadding,"childPadding");
	HX_VISIT_MEMBER_NAME(align,"align");
	HX_VISIT_MEMBER_NAME(autoWidth,"autoWidth");
	HX_VISIT_MEMBER_NAME(autoHeight,"autoHeight");
	HX_VISIT_MEMBER_NAME(unifyChildren,"unifyChildren");
	HX_VISIT_MEMBER_NAME(intPositions,"intPositions");
	HX_VISIT_MEMBER_NAME(_processingChildResize,"_processingChildResize");
	 ::ru::stablex::ui::widgets::Widget_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Box_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { return ::hx::Val( align ); }
		if (HX_FIELD_EQ(inName,"set_w") ) { return ::hx::Val( set_w_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_h") ) { return ::hx::Val( set_h_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"refresh") ) { return ::hx::Val( refresh_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertical") ) { return ::hx::Val( vertical ); }
		if (HX_FIELD_EQ(inName,"_setObjX") ) { return ::hx::Val( _setObjX_dyn() ); }
		if (HX_FIELD_EQ(inName,"_setObjY") ) { return ::hx::Val( _setObjY_dyn() ); }
		if (HX_FIELD_EQ(inName,"addChild") ) { return ::hx::Val( addChild_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoWidth") ) { return ::hx::Val( autoWidth ); }
		if (HX_FIELD_EQ(inName,"_objWidth") ) { return ::hx::Val( _objWidth_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"paddingTop") ) { return ::hx::Val( paddingTop ); }
		if (HX_FIELD_EQ(inName,"autoHeight") ) { return ::hx::Val( autoHeight ); }
		if (HX_FIELD_EQ(inName,"_objHeight") ) { return ::hx::Val( _objHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_calcWidth") ) { return ::hx::Val( _calcWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"_vAlignTop") ) { return ::hx::Val( _vAlignTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return ::hx::Val( addChildAt_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { return ::hx::Val( paddingLeft ); }
		if (HX_FIELD_EQ(inName,"_calcHeight") ) { return ::hx::Val( _calcHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_hAlignLeft") ) { return ::hx::Val( _hAlignLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return ::hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_widthPt") ) { return ::hx::Val( set_widthPt_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_padding") ) { return ::hx::Val( set_padding_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"paddingRight") ) { return ::hx::Val( paddingRight ); }
		if (HX_FIELD_EQ(inName,"childPadding") ) { return ::hx::Val( childPadding ); }
		if (HX_FIELD_EQ(inName,"intPositions") ) { return ::hx::Val( intPositions ); }
		if (HX_FIELD_EQ(inName,"_hAlignRight") ) { return ::hx::Val( _hAlignRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return ::hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_heightPt") ) { return ::hx::Val( set_heightPt_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { return ::hx::Val( paddingBottom ); }
		if (HX_FIELD_EQ(inName,"unifyChildren") ) { return ::hx::Val( unifyChildren ); }
		if (HX_FIELD_EQ(inName,"alignElements") ) { return ::hx::Val( alignElements_dyn() ); }
		if (HX_FIELD_EQ(inName,"_vAlignMiddle") ) { return ::hx::Val( _vAlignMiddle_dyn() ); }
		if (HX_FIELD_EQ(inName,"_vAlignBottom") ) { return ::hx::Val( _vAlignBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"_hAlignCenter") ) { return ::hx::Val( _hAlignCenter_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return ::hx::Val( removeChildAt_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_unifyChildren") ) { return ::hx::Val( _unifyChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"_onChildResize") ) { return ::hx::Val( _onChildResize_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_contentWidth") ) { return ::hx::Val( get_contentWidth_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_contentHeight") ) { return ::hx::Val( get_contentHeight_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_resizeWithPercent") ) { return ::hx::Val( _resizeWithPercent_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_processingChildResize") ) { return ::hx::Val( _processingChildResize ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Box_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { align=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"padding") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_padding(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertical") ) { vertical=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoSize(inValue.Cast< bool >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoWidth") ) { autoWidth=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"paddingTop") ) { paddingTop=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoHeight") ) { autoHeight=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { paddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"paddingRight") ) { paddingRight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"childPadding") ) { childPadding=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intPositions") ) { intPositions=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { paddingBottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unifyChildren") ) { unifyChildren=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_processingChildResize") ) { _processingChildResize=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Box_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("vertical",76,bc,15,6a));
	outFields->push(HX_("padding",d1,59,7d,d0));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("childPadding",95,83,49,99));
	outFields->push(HX_("align",c5,56,91,21));
	outFields->push(HX_("autoSize",d0,8f,79,2f));
	outFields->push(HX_("autoWidth",17,f4,6d,a8));
	outFields->push(HX_("autoHeight",b6,18,17,6e));
	outFields->push(HX_("unifyChildren",a2,ad,56,98));
	outFields->push(HX_("intPositions",bb,30,f9,ea));
	outFields->push(HX_("_processingChildResize",de,66,11,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Box_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Box_obj,vertical),HX_("vertical",76,bc,15,6a)},
	{::hx::fsFloat,(int)offsetof(Box_obj,paddingLeft),HX_("paddingLeft",78,4a,e6,85)},
	{::hx::fsFloat,(int)offsetof(Box_obj,paddingRight),HX_("paddingRight",4b,ec,a7,1a)},
	{::hx::fsFloat,(int)offsetof(Box_obj,paddingTop),HX_("paddingTop",44,fd,05,3a)},
	{::hx::fsFloat,(int)offsetof(Box_obj,paddingBottom),HX_("paddingBottom",9c,67,99,4f)},
	{::hx::fsFloat,(int)offsetof(Box_obj,childPadding),HX_("childPadding",95,83,49,99)},
	{::hx::fsString,(int)offsetof(Box_obj,align),HX_("align",c5,56,91,21)},
	{::hx::fsBool,(int)offsetof(Box_obj,autoWidth),HX_("autoWidth",17,f4,6d,a8)},
	{::hx::fsBool,(int)offsetof(Box_obj,autoHeight),HX_("autoHeight",b6,18,17,6e)},
	{::hx::fsBool,(int)offsetof(Box_obj,unifyChildren),HX_("unifyChildren",a2,ad,56,98)},
	{::hx::fsBool,(int)offsetof(Box_obj,intPositions),HX_("intPositions",bb,30,f9,ea)},
	{::hx::fsBool,(int)offsetof(Box_obj,_processingChildResize),HX_("_processingChildResize",de,66,11,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Box_obj_sStaticStorageInfo = 0;
#endif

static ::String Box_obj_sMemberFields[] = {
	HX_("vertical",76,bc,15,6a),
	HX_("paddingLeft",78,4a,e6,85),
	HX_("paddingRight",4b,ec,a7,1a),
	HX_("paddingTop",44,fd,05,3a),
	HX_("paddingBottom",9c,67,99,4f),
	HX_("childPadding",95,83,49,99),
	HX_("align",c5,56,91,21),
	HX_("autoWidth",17,f4,6d,a8),
	HX_("autoHeight",b6,18,17,6e),
	HX_("unifyChildren",a2,ad,56,98),
	HX_("intPositions",bb,30,f9,ea),
	HX_("_processingChildResize",de,66,11,4c),
	HX_("_objWidth",ee,4d,11,bf),
	HX_("_objHeight",ff,5a,62,26),
	HX_("_setObjX",c4,02,e6,48),
	HX_("_setObjY",c5,02,e6,48),
	HX_("refresh",db,d9,20,ed),
	HX_("_calcWidth",f2,4c,0e,19),
	HX_("_calcHeight",7b,7f,c4,89),
	HX_("_resizeWithPercent",8c,c8,3a,70),
	HX_("alignElements",1c,16,13,65),
	HX_("_unifyChildren",e3,9d,a8,d6),
	HX_("_vAlignTop",27,2f,7a,3a),
	HX_("_vAlignMiddle",03,32,0b,f0),
	HX_("_vAlignBottom",99,45,25,09),
	HX_("_hAlignLeft",03,31,0b,67),
	HX_("_hAlignRight",60,bf,cc,39),
	HX_("_hAlignCenter",d1,85,0f,11),
	HX_("addChild",bb,cf,16,bf),
	HX_("addChildAt",8e,ad,36,ce),
	HX_("removeChild",b8,86,ed,43),
	HX_("removeChildAt",cb,dd,66,3f),
	HX_("_onChildResize",12,a2,3e,b7),
	HX_("get_contentHeight",57,45,b7,de),
	HX_("get_contentWidth",96,f6,8f,b5),
	HX_("set_autoSize",4d,67,8c,f9),
	HX_("set_w",5a,9b,2f,7a),
	HX_("set_widthPt",cd,70,68,c1),
	HX_("set_heightPt",48,2d,5e,fd),
	HX_("set_h",4b,9b,2f,7a),
	HX_("set_padding",f4,c0,e4,60),
	::String(null()) };

::hx::Class Box_obj::__mClass;

void Box_obj::__register()
{
	Box_obj _hx_dummy;
	Box_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ru.stablex.ui.widgets.Box",4e,4c,6e,f6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Box_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Box_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Box_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Box_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
} // end namespace widgets
