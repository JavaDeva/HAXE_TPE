// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_UIBuilder
#include <ru/stablex/ui/UIBuilder.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Box
#include <ru/stablex/ui/widgets/Box.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Floating
#include <ru/stablex/ui/widgets/Floating.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e6814cd04e8d9cf6_15_new,"ru.stablex.ui.widgets.Floating","new",0x8ec23e15,"ru.stablex.ui.widgets.Floating.new","ru/stablex/ui/widgets/Floating.hx",15,0x4373a7bb)
HX_LOCAL_STACK_FRAME(_hx_pos_e6814cd04e8d9cf6_41_show,"ru.stablex.ui.widgets.Floating","show",0x5e8465a8,"ru.stablex.ui.widgets.Floating.show","ru/stablex/ui/widgets/Floating.hx",41,0x4373a7bb)
HX_LOCAL_STACK_FRAME(_hx_pos_e6814cd04e8d9cf6_79_hide,"ru.stablex.ui.widgets.Floating","hide",0x573fc56d,"ru.stablex.ui.widgets.Floating.hide","ru/stablex/ui/widgets/Floating.hx",79,0x4373a7bb)
HX_LOCAL_STACK_FRAME(_hx_pos_e6814cd04e8d9cf6_95__usingParentSize,"ru.stablex.ui.widgets.Floating","_usingParentSize",0x03618d1b,"ru.stablex.ui.widgets.Floating._usingParentSize","ru/stablex/ui/widgets/Floating.hx",95,0x4373a7bb)
HX_LOCAL_STACK_FRAME(_hx_pos_e6814cd04e8d9cf6_107__onStageResize,"ru.stablex.ui.widgets.Floating","_onStageResize",0x87081d1f,"ru.stablex.ui.widgets.Floating._onStageResize","ru/stablex/ui/widgets/Floating.hx",107,0x4373a7bb)
HX_LOCAL_STACK_FRAME(_hx_pos_e6814cd04e8d9cf6_156_getRenderTarget,"ru.stablex.ui.widgets.Floating","getRenderTarget",0xdb23f632,"ru.stablex.ui.widgets.Floating.getRenderTarget","ru/stablex/ui/widgets/Floating.hx",156,0x4373a7bb)
HX_LOCAL_STACK_FRAME(_hx_pos_e6814cd04e8d9cf6_164_free,"ru.stablex.ui.widgets.Floating","free",0x55f42d57,"ru.stablex.ui.widgets.Floating.free","ru/stablex/ui/widgets/Floating.hx",164,0x4373a7bb)
HX_LOCAL_STACK_FRAME(_hx_pos_e6814cd04e8d9cf6_174_set_scaleContent,"ru.stablex.ui.widgets.Floating","set_scaleContent",0x017f6af7,"ru.stablex.ui.widgets.Floating.set_scaleContent","ru/stablex/ui/widgets/Floating.hx",174,0x4373a7bb)
namespace ru{
namespace stablex{
namespace ui{
namespace widgets{

void Floating_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e6814cd04e8d9cf6_15_new)
HXLINE(  22)		this->scaleContent = ((Float)1);
HXLINE(  20)		this->renderTo = null();
HXLINE(  18)		this->shown = false;
HXLINE(  30)		super::__construct();
HXLINE(  31)		this->set_visible(false);
            	}

Dynamic Floating_obj::__CreateEmpty() { return new Floating_obj; }

void *Floating_obj::_hx_vtable = 0;

Dynamic Floating_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Floating_obj > _hx_result = new Floating_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Floating_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2383f585) {
		if (inClassId<=(int)0x1210c5aa) {
			if (inClassId<=(int)0x0c89e854) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x0c89e854;
				}
			} else {
				return inClassId==(int)0x1210c5aa;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x2383f585;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			if (inClassId<=(int)0x292acd8f) {
				return inClassId==(int)0x270e5222 || inClassId==(int)0x292acd8f;
			} else {
				return inClassId==(int)0x4af7dd8e;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Floating_obj::show(){
            	HX_STACKFRAME(&_hx_pos_e6814cd04e8d9cf6_41_show)
HXDLIN(  41)		if (::hx::IsNull( this->renderTo )) {
HXLINE(  42)			this->set_visible((this->shown = true));
HXLINE(  45)			bool _hx_tmp;
HXDLIN(  45)			bool _hx_tmp1;
HXDLIN(  45)			bool _hx_tmp2;
HXDLIN(  45)			bool _hx_tmp3;
HXDLIN(  45)			bool _hx_tmp4;
HXDLIN(  45)			bool _hx_tmp5;
HXDLIN(  45)			bool _hx_tmp6;
HXDLIN(  45)			if (!(this->_widthUsePercent)) {
HXLINE(  45)				_hx_tmp6 = this->_heightUsePercent;
            			}
            			else {
HXLINE(  45)				_hx_tmp6 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp6)) {
HXLINE(  45)				_hx_tmp5 = (this->_xUse == 2);
            			}
            			else {
HXLINE(  45)				_hx_tmp5 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp5)) {
HXLINE(  45)				_hx_tmp4 = (this->_xUse == 4);
            			}
            			else {
HXLINE(  45)				_hx_tmp4 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp4)) {
HXLINE(  45)				_hx_tmp3 = (this->_xUse == 3);
            			}
            			else {
HXLINE(  45)				_hx_tmp3 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp3)) {
HXLINE(  45)				_hx_tmp2 = (this->_yUse == 6);
            			}
            			else {
HXLINE(  45)				_hx_tmp2 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp2)) {
HXLINE(  45)				_hx_tmp1 = (this->_yUse == 8);
            			}
            			else {
HXLINE(  45)				_hx_tmp1 = true;
            			}
HXDLIN(  45)			if (!(_hx_tmp1)) {
HXLINE(  45)				_hx_tmp = (this->_yUse == 7);
            			}
            			else {
HXLINE(  45)				_hx_tmp = true;
            			}
HXDLIN(  45)			if (_hx_tmp) {
HXLINE(  46)				::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("resize",f4,59,7b,08),this->_onStageResize_dyn(),null());
HXLINE(  47)				::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("resize",f4,59,7b,08),this->_onStageResize_dyn(),null(),null(),null());
            			}
HXLINE(  50)			 ::openfl::display::DisplayObjectContainer _hx_tmp7 = this->parent;
HXDLIN(  50)			if (::hx::IsEq( _hx_tmp7,::openfl::Lib_obj::get_current()->stage )) {
HXLINE(  51)				 ::openfl::display::Stage _hx_tmp = ::openfl::Lib_obj::get_current()->stage;
HXDLIN(  51)				_hx_tmp->setChildIndex(::hx::ObjectPtr<OBJ_>(this),(::openfl::Lib_obj::get_current()->stage->get_numChildren() - 1));
            			}
            			else {
HXLINE(  53)				if (::hx::IsNotNull( this->parent )) {
HXLINE(  53)					this->parent->removeChild(::hx::ObjectPtr<OBJ_>(this));
            				}
HXLINE(  54)				::openfl::Lib_obj::get_current()->stage->addChild(::hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE(  57)			this->_onStageResize(null());
            		}
            		else {
HXLINE(  61)			 ::ru::stablex::ui::widgets::Widget to = ( ( ::ru::stablex::ui::widgets::Widget)(::ru::stablex::ui::UIBuilder_obj::_objects->get(this->renderTo)) );
HXLINE(  62)			if (::hx::IsNotNull( to )) {
HXLINE(  63)				this->set_visible((this->shown = true));
HXLINE(  64)				if (::hx::IsEq( this->parent,to )) {
HXLINE(  65)					to->setChildIndex(::hx::ObjectPtr<OBJ_>(this),(to->get_numChildren() - 1));
            				}
            				else {
HXLINE(  67)					if (::hx::IsNotNull( this->parent )) {
HXLINE(  67)						this->parent->removeChild(::hx::ObjectPtr<OBJ_>(this));
            					}
HXLINE(  68)					to->addChild(::hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Floating_obj,show,(void))

void Floating_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_e6814cd04e8d9cf6_79_hide)
HXLINE(  80)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("resize",f4,59,7b,08),this->_onStageResize_dyn(),null());
HXLINE(  82)		if (::hx::IsNotNull( this->parent )) {
HXLINE(  83)			this->parent->removeChild(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(  86)		this->set_visible((this->shown = false));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Floating_obj,hide,(void))

bool Floating_obj::_usingParentSize(){
            	HX_STACKFRAME(&_hx_pos_e6814cd04e8d9cf6_95__usingParentSize)
HXLINE(  96)		bool _hx_tmp;
HXDLIN(  96)		bool _hx_tmp1;
HXDLIN(  96)		bool _hx_tmp2;
HXDLIN(  96)		bool _hx_tmp3;
HXDLIN(  96)		bool _hx_tmp4;
HXDLIN(  96)		bool _hx_tmp5;
HXDLIN(  96)		if (!(this->_widthUsePercent)) {
HXLINE(  96)			_hx_tmp5 = this->_heightUsePercent;
            		}
            		else {
HXLINE(  96)			_hx_tmp5 = true;
            		}
HXDLIN(  96)		if (!(_hx_tmp5)) {
HXLINE(  96)			_hx_tmp4 = (this->_xUse == 2);
            		}
            		else {
HXLINE(  96)			_hx_tmp4 = true;
            		}
HXDLIN(  96)		if (!(_hx_tmp4)) {
HXLINE(  96)			_hx_tmp3 = (this->_xUse == 4);
            		}
            		else {
HXLINE(  96)			_hx_tmp3 = true;
            		}
HXDLIN(  96)		if (!(_hx_tmp3)) {
HXLINE(  96)			_hx_tmp2 = (this->_xUse == 3);
            		}
            		else {
HXLINE(  96)			_hx_tmp2 = true;
            		}
HXDLIN(  96)		if (!(_hx_tmp2)) {
HXLINE(  96)			_hx_tmp1 = (this->_yUse == 6);
            		}
            		else {
HXLINE(  96)			_hx_tmp1 = true;
            		}
HXDLIN(  96)		if (!(_hx_tmp1)) {
HXLINE(  96)			_hx_tmp = (this->_yUse == 8);
            		}
            		else {
HXLINE(  96)			_hx_tmp = true;
            		}
HXLINE(  95)		if (!(_hx_tmp)) {
HXLINE(  98)			return (this->_yUse == 7);
            		}
            		else {
HXDLIN(  95)			return true;
            		}
HXDLIN(  95)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Floating_obj,_usingParentSize,return )

void Floating_obj::_onStageResize( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_e6814cd04e8d9cf6_107__onStageResize)
HXLINE( 108)		 ::openfl::display::DisplayObjectContainer _hx_tmp = this->parent;
HXDLIN( 108)		if (::hx::IsNotEq( _hx_tmp,::openfl::Lib_obj::get_current()->stage )) {
HXLINE( 108)			return;
            		}
HXLINE( 110)		Float scale;
HXDLIN( 110)		if ((this->scaleContent == 0)) {
HXLINE( 110)			scale = ((Float)0.001);
            		}
            		else {
HXLINE( 110)			scale = this->scaleContent;
            		}
HXLINE( 111)		Float width = (( (Float)(::openfl::Lib_obj::get_current()->stage->stageWidth) ) / scale);
HXLINE( 112)		Float height = (( (Float)(::openfl::Lib_obj::get_current()->stage->stageHeight) ) / scale);
HXLINE( 116)		bool _hx_tmp1;
HXDLIN( 116)		if (this->_widthUsePercent) {
HXLINE( 116)			_hx_tmp1 = this->_heightUsePercent;
            		}
            		else {
HXLINE( 116)			_hx_tmp1 = false;
            		}
HXDLIN( 116)		if (_hx_tmp1) {
HXLINE( 117)			this->resize(((width * this->_widthPercent) / ( (Float)(100) )),((height * this->_heightPercent) / ( (Float)(100) )),true);
            		}
            		else {
HXLINE( 120)			if (this->_widthUsePercent) {
HXLINE( 121)				this->resize(((width * this->_widthPercent) / ( (Float)(100) )),this->_height,true);
            			}
            			else {
HXLINE( 124)				if (this->_heightUsePercent) {
HXLINE( 125)					this->resize(this->_width,((height * this->_heightPercent) / ( (Float)(100) )),true);
            				}
            			}
            		}
HXLINE( 130)		switch((int)(this->_xUse)){
            			case (int)2: {
HXLINE( 136)				this->set_x(((width * this->_leftPercent) / ( (Float)(100) )));
            			}
            			break;
            			case (int)3: {
HXLINE( 132)				this->set_x(((width - this->_right) - this->_width));
            			}
            			break;
            			case (int)4: {
HXLINE( 134)				Float _hx_tmp = (width - ((width * this->_rightPercent) / ( (Float)(100) )));
HXDLIN( 134)				this->set_x((_hx_tmp - this->get_w()));
            			}
            			break;
            		}
HXLINE( 139)		switch((int)(this->_yUse)){
            			case (int)6: {
HXLINE( 145)				this->set_y(((height * this->_topPercent) / ( (Float)(100) )));
            			}
            			break;
            			case (int)7: {
HXLINE( 141)				this->set_y(((height - this->_bottom) - this->_height));
            			}
            			break;
            			case (int)8: {
HXLINE( 143)				this->set_y(((height - ((height * this->_bottomPercent) / ( (Float)(100) ))) - this->_height));
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Floating_obj,_onStageResize,(void))

 ::openfl::display::DisplayObject Floating_obj::getRenderTarget(){
            	HX_STACKFRAME(&_hx_pos_e6814cd04e8d9cf6_156_getRenderTarget)
HXDLIN( 156)		if (::hx::IsNull( this->renderTo )) {
HXDLIN( 156)			return ::openfl::Lib_obj::get_current()->stage;
            		}
            		else {
HXDLIN( 156)			return ( ( ::openfl::display::DisplayObject)(::ru::stablex::ui::UIBuilder_obj::_objects->get(this->renderTo)) );
            		}
HXDLIN( 156)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Floating_obj,getRenderTarget,return )

void Floating_obj::free(::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_e6814cd04e8d9cf6_164_free)
HXLINE( 165)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("resize",f4,59,7b,08),this->_onStageResize_dyn(),null());
HXLINE( 166)		this->super::free(recursive);
            	}


Float Floating_obj::set_scaleContent(Float scaleContent){
            	HX_STACKFRAME(&_hx_pos_e6814cd04e8d9cf6_174_set_scaleContent)
HXLINE( 175)		this->set_scaleX(this->set_scaleY(scaleContent));
HXLINE( 176)		this->scaleContent = scaleContent;
HXLINE( 178)		bool _hx_tmp;
HXDLIN( 178)		bool _hx_tmp1;
HXDLIN( 178)		if (::hx::IsNull( this->renderTo )) {
HXLINE( 178)			_hx_tmp1 = this->created;
            		}
            		else {
HXLINE( 178)			_hx_tmp1 = false;
            		}
HXDLIN( 178)		if (_hx_tmp1) {
HXLINE( 178)			_hx_tmp = ::hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 178)			_hx_tmp = false;
            		}
HXDLIN( 178)		if (_hx_tmp) {
HXLINE( 179)			this->_onStageResize(null());
            		}
HXLINE( 182)		return scaleContent;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Floating_obj,set_scaleContent,return )


::hx::ObjectPtr< Floating_obj > Floating_obj::__new() {
	::hx::ObjectPtr< Floating_obj > __this = new Floating_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Floating_obj > Floating_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Floating_obj *__this = (Floating_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Floating_obj), true, "ru.stablex.ui.widgets.Floating"));
	*(void **)__this = Floating_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Floating_obj::Floating_obj()
{
}

void Floating_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Floating);
	HX_MARK_MEMBER_NAME(shown,"shown");
	HX_MARK_MEMBER_NAME(renderTo,"renderTo");
	HX_MARK_MEMBER_NAME(scaleContent,"scaleContent");
	 ::ru::stablex::ui::widgets::Box_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Floating_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shown,"shown");
	HX_VISIT_MEMBER_NAME(renderTo,"renderTo");
	HX_VISIT_MEMBER_NAME(scaleContent,"scaleContent");
	 ::ru::stablex::ui::widgets::Box_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Floating_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"show") ) { return ::hx::Val( show_dyn() ); }
		if (HX_FIELD_EQ(inName,"hide") ) { return ::hx::Val( hide_dyn() ); }
		if (HX_FIELD_EQ(inName,"free") ) { return ::hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shown") ) { return ::hx::Val( shown ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderTo") ) { return ::hx::Val( renderTo ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scaleContent") ) { return ::hx::Val( scaleContent ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_onStageResize") ) { return ::hx::Val( _onStageResize_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getRenderTarget") ) { return ::hx::Val( getRenderTarget_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_usingParentSize") ) { return ::hx::Val( _usingParentSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleContent") ) { return ::hx::Val( set_scaleContent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Floating_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"shown") ) { shown=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderTo") ) { renderTo=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scaleContent") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scaleContent(inValue.Cast< Float >()) );scaleContent=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Floating_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("shown",d1,88,27,7c));
	outFields->push(HX_("renderTo",71,b6,db,b2));
	outFields->push(HX_("scaleContent",cf,2b,c1,b0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Floating_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Floating_obj,shown),HX_("shown",d1,88,27,7c)},
	{::hx::fsString,(int)offsetof(Floating_obj,renderTo),HX_("renderTo",71,b6,db,b2)},
	{::hx::fsFloat,(int)offsetof(Floating_obj,scaleContent),HX_("scaleContent",cf,2b,c1,b0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Floating_obj_sStaticStorageInfo = 0;
#endif

static ::String Floating_obj_sMemberFields[] = {
	HX_("shown",d1,88,27,7c),
	HX_("renderTo",71,b6,db,b2),
	HX_("scaleContent",cf,2b,c1,b0),
	HX_("show",fd,d4,52,4c),
	HX_("hide",c2,34,0e,45),
	HX_("_usingParentSize",f0,27,84,0d),
	HX_("_onStageResize",b4,e8,b0,3c),
	HX_("getRenderTarget",fd,4c,2d,19),
	HX_("free",ac,9c,c2,43),
	HX_("set_scaleContent",cc,05,a2,0b),
	::String(null()) };

::hx::Class Floating_obj::__mClass;

void Floating_obj::__register()
{
	Floating_obj _hx_dummy;
	Floating_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ru.stablex.ui.widgets.Floating",a3,8f,c2,3f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Floating_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Floating_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Floating_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Floating_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
} // end namespace widgets
