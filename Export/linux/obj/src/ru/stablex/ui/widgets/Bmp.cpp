// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_ru_stablex_Assets
#include <ru/stablex/Assets.h>
#endif
#ifndef INCLUDED_ru_stablex_TweenSprite
#include <ru/stablex/TweenSprite.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Bmp
#include <ru/stablex/ui/widgets/Bmp.h>
#endif
#ifndef INCLUDED_ru_stablex_ui_widgets_Widget
#include <ru/stablex/ui/widgets/Widget.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_14_new,"ru.stablex.ui.widgets.Bmp","new",0xd995cf7a,"ru.stablex.ui.widgets.Bmp.new","ru/stablex/ui/widgets/Bmp.hx",14,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_89_refresh,"ru.stablex.ui.widgets.Bmp","refresh",0x21396df5,"ru.stablex.ui.widgets.Bmp.refresh","ru/stablex/ui/widgets/Bmp.hx",89,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_129__draw,"ru.stablex.ui.widgets.Bmp","_draw",0x2294c17d,"ru.stablex.ui.widgets.Bmp._draw","ru/stablex/ui/widgets/Bmp.hx",129,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_194_get_src,"ru.stablex.ui.widgets.Bmp","get_src",0x5ae50395,"ru.stablex.ui.widgets.Bmp.get_src","ru/stablex/ui/widgets/Bmp.hx",194,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_202_set_src,"ru.stablex.ui.widgets.Bmp","set_src",0x4de694a1,"ru.stablex.ui.widgets.Bmp.set_src","ru/stablex/ui/widgets/Bmp.hx",202,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_215_get_bitmapData,"ru.stablex.ui.widgets.Bmp","get_bitmapData",0xa1b7c128,"ru.stablex.ui.widgets.Bmp.get_bitmapData","ru/stablex/ui/widgets/Bmp.hx",215,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_223_set_bitmapData,"ru.stablex.ui.widgets.Bmp","set_bitmapData",0xc1d7a99c,"ru.stablex.ui.widgets.Bmp.set_bitmapData","ru/stablex/ui/widgets/Bmp.hx",223,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_236_set_autoSize,"ru.stablex.ui.widgets.Bmp","set_autoSize",0x2522b4f3,"ru.stablex.ui.widgets.Bmp.set_autoSize","ru/stablex/ui/widgets/Bmp.hx",236,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_244_set_xOffset,"ru.stablex.ui.widgets.Bmp","set_xOffset",0x09a8c668,"ru.stablex.ui.widgets.Bmp.set_xOffset","ru/stablex/ui/widgets/Bmp.hx",244,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_253_set_yOffset,"ru.stablex.ui.widgets.Bmp","set_yOffset",0x333e3d29,"ru.stablex.ui.widgets.Bmp.set_yOffset","ru/stablex/ui/widgets/Bmp.hx",253,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_262_set_w,"ru.stablex.ui.widgets.Bmp","set_w",0xa74314f4,"ru.stablex.ui.widgets.Bmp.set_w","ru/stablex/ui/widgets/Bmp.hx",262,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_272_set_widthPt,"ru.stablex.ui.widgets.Bmp","set_widthPt",0x27c619e7,"ru.stablex.ui.widgets.Bmp.set_widthPt","ru/stablex/ui/widgets/Bmp.hx",272,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_282_set_heightPt,"ru.stablex.ui.widgets.Bmp","set_heightPt",0x28f47aee,"ru.stablex.ui.widgets.Bmp.set_heightPt","ru/stablex/ui/widgets/Bmp.hx",282,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_292_set_h,"ru.stablex.ui.widgets.Bmp","set_h",0xa74314e5,"ru.stablex.ui.widgets.Bmp.set_h","ru/stablex/ui/widgets/Bmp.hx",292,0x3465a876)
HX_LOCAL_STACK_FRAME(_hx_pos_31a8ee1cd20e96a6_62__applyScalingToMx,"ru.stablex.ui.widgets.Bmp","_applyScalingToMx",0x9e5ebbd8,"ru.stablex.ui.widgets.Bmp._applyScalingToMx","ru/stablex/ui/widgets/Bmp.hx",62,0x3465a876)
namespace ru{
namespace stablex{
namespace ui{
namespace widgets{

void Bmp_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_14_new)
HXLINE(  51)		this->drawPortion = false;
HXLINE(  46)		this->yOffset = 0;
HXLINE(  44)		this->xOffset = 0;
HXLINE(  36)		this->_bitmapData = null();
HXLINE(  29)		this->autoHeight = true;
HXLINE(  27)		this->autoWidth = true;
HXLINE(  23)		this->keepAspect = false;
HXLINE(  21)		this->stretch = false;
HXLINE(  19)		this->smooth = true;
HXLINE(  17)		this->_src = null();
HXLINE(  14)		super::__construct();
            	}

Dynamic Bmp_obj::__CreateEmpty() { return new Bmp_obj; }

void *Bmp_obj::_hx_vtable = 0;

Dynamic Bmp_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Bmp_obj > _hx_result = new Bmp_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Bmp_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1210c3e4 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			if (inClassId<=(int)0x270e5222) {
				return inClassId==(int)0x2383f585 || inClassId==(int)0x270e5222;
			} else {
				return inClassId==(int)0x4af7dd8e;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Bmp_obj::refresh(){
            	HX_GC_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_89_refresh)
HXLINE(  90)		 ::openfl::display::BitmapData bmp = this->_bitmapData;
HXLINE(  92)		bool _hx_tmp;
HXDLIN(  92)		if (::hx::IsNull( bmp )) {
HXLINE(  92)			_hx_tmp = ::hx::IsNotNull( this->_src );
            		}
            		else {
HXLINE(  92)			_hx_tmp = false;
            		}
HXDLIN(  92)		if (_hx_tmp) {
HXLINE(  93)			bmp = ( ( ::openfl::display::BitmapData)(::ru::stablex::Assets_obj::getBitmapData(this->_src,null())) );
HXLINE(  94)			if (::hx::IsNull( bmp )) {
HXLINE(  95)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bitmap not found: ",ca,43,27,ba) + this->_src)));
            			}
            		}
HXLINE(  99)		if (::hx::IsNotNull( bmp )) {
HXLINE( 102)			bool _hx_tmp;
HXDLIN( 102)			bool _hx_tmp1;
HXDLIN( 102)			if (this->autoWidth) {
HXLINE( 102)				_hx_tmp1 = this->autoHeight;
            			}
            			else {
HXLINE( 102)				_hx_tmp1 = false;
            			}
HXDLIN( 102)			if (_hx_tmp1) {
HXLINE( 104)				Float _hx_tmp1;
HXDLIN( 104)				if (this->drawPortion) {
HXLINE( 104)					_hx_tmp1 = ( (Float)((bmp->width - this->xOffset)) );
            				}
            				else {
HXLINE( 104)					_hx_tmp1 = ( (Float)(bmp->width) );
            				}
HXLINE( 103)				if ((this->_width == _hx_tmp1)) {
HXLINE( 105)					Float _hx_tmp1;
HXDLIN( 105)					if (this->drawPortion) {
HXLINE( 105)						_hx_tmp1 = ( (Float)((bmp->height - this->yOffset)) );
            					}
            					else {
HXLINE( 105)						_hx_tmp1 = ( (Float)(bmp->height) );
            					}
HXLINE( 102)					_hx_tmp = (this->_height != _hx_tmp1);
            				}
            				else {
HXLINE( 102)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 102)				_hx_tmp = false;
            			}
HXLINE( 101)			if (_hx_tmp) {
HXLINE( 108)				this->resize(( (Float)(bmp->width) ),( (Float)(bmp->height) ),null());
            			}
            			else {
HXLINE( 109)				bool _hx_tmp;
HXDLIN( 109)				if (this->autoWidth) {
HXLINE( 109)					Float _hx_tmp1;
HXDLIN( 109)					if (this->drawPortion) {
HXLINE( 109)						_hx_tmp1 = ( (Float)((bmp->width - this->xOffset)) );
            					}
            					else {
HXLINE( 109)						_hx_tmp1 = ( (Float)(bmp->width) );
            					}
HXDLIN( 109)					_hx_tmp = (this->_width != _hx_tmp1);
            				}
            				else {
HXLINE( 109)					_hx_tmp = false;
            				}
HXDLIN( 109)				if (_hx_tmp) {
HXLINE( 110)					Float _hx_tmp;
HXDLIN( 110)					if (this->drawPortion) {
HXLINE( 110)						_hx_tmp = ( (Float)((bmp->width - this->xOffset)) );
            					}
            					else {
HXLINE( 110)						_hx_tmp = ( (Float)(bmp->width) );
            					}
HXDLIN( 110)					this->set_w(_hx_tmp);
            				}
            				else {
HXLINE( 111)					bool _hx_tmp;
HXDLIN( 111)					if (this->autoHeight) {
HXLINE( 111)						Float _hx_tmp1;
HXDLIN( 111)						if (this->drawPortion) {
HXLINE( 111)							_hx_tmp1 = ( (Float)((bmp->height - this->yOffset)) );
            						}
            						else {
HXLINE( 111)							_hx_tmp1 = ( (Float)(bmp->height) );
            						}
HXDLIN( 111)						_hx_tmp = (this->_height != _hx_tmp1);
            					}
            					else {
HXLINE( 111)						_hx_tmp = false;
            					}
HXDLIN( 111)					if (_hx_tmp) {
HXLINE( 112)						Float _hx_tmp;
HXDLIN( 112)						if (this->drawPortion) {
HXLINE( 112)							_hx_tmp = ( (Float)((bmp->height - this->yOffset)) );
            						}
            						else {
HXLINE( 112)							_hx_tmp = ( (Float)(bmp->height) );
            						}
HXDLIN( 112)						this->set_h(_hx_tmp);
            					}
            				}
            			}
HXLINE( 115)			this->super::refresh();
HXLINE( 116)			{
HXLINE( 116)				this->get_graphics()->clear();
HXDLIN( 116)				if (this->drawPortion) {
HXLINE( 116)					Float width;
HXDLIN( 116)					if (this->autoWidth) {
HXLINE( 116)						width = ( (Float)(bmp->width) );
            					}
            					else {
HXLINE( 116)						if ((this->_width > (bmp->width - this->xOffset))) {
HXLINE( 116)							width = ( (Float)((bmp->width - this->xOffset)) );
            						}
            						else {
HXLINE( 116)							width = this->_width;
            						}
            					}
HXDLIN( 116)					Float height;
HXDLIN( 116)					if (this->autoHeight) {
HXLINE( 116)						height = ( (Float)(bmp->height) );
            					}
            					else {
HXLINE( 116)						if ((this->_height > (bmp->height - this->yOffset))) {
HXLINE( 116)							height = ( (Float)((bmp->height - this->yOffset)) );
            						}
            						else {
HXLINE( 116)							height = ( (Float)(::Std_obj::_hx_int(this->_height)) );
            						}
            					}
HXDLIN( 116)					bool _hx_tmp;
HXDLIN( 116)					if (!((width <= 0))) {
HXLINE( 116)						_hx_tmp = (height <= 0);
            					}
            					else {
HXLINE( 116)						_hx_tmp = true;
            					}
HXDLIN( 116)					if (!(_hx_tmp)) {
HXLINE( 116)						 ::openfl::geom::Matrix mx =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXDLIN( 116)						mx->translate(( (Float)(-(this->xOffset)) ),( (Float)(-(this->yOffset)) ));
HXDLIN( 116)						this->get_graphics()->beginBitmapFill(bmp,mx,false,this->smooth);
HXDLIN( 116)						this->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),width,height);
HXDLIN( 116)						this->get_graphics()->endFill();
            					}
            				}
            				else {
HXLINE( 116)					if (this->stretch) {
HXLINE( 116)						 ::openfl::geom::Matrix mx =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXDLIN( 116)						if (this->stretch) {
HXLINE( 116)							if (this->keepAspect) {
HXLINE( 116)								Float scale;
HXDLIN( 116)								if (this->autoWidth) {
HXLINE( 116)									scale = ( (Float)(1) );
            								}
            								else {
HXLINE( 116)									Float scale1 = this->get_w();
HXDLIN( 116)									scale = (scale1 / ( (Float)(bmp->width) ));
            								}
HXDLIN( 116)								Float scale1;
HXDLIN( 116)								if (this->autoHeight) {
HXLINE( 116)									scale1 = ( (Float)(1) );
            								}
            								else {
HXLINE( 116)									Float scale = this->get_h();
HXDLIN( 116)									scale1 = (scale / ( (Float)(bmp->height) ));
            								}
HXDLIN( 116)								Float scale2 = ::Math_obj::min(scale,scale1);
HXDLIN( 116)								mx->scale(scale2,scale2);
            							}
            							else {
HXLINE( 116)								Float _hx_tmp;
HXDLIN( 116)								if (this->autoWidth) {
HXLINE( 116)									_hx_tmp = ( (Float)(1) );
            								}
            								else {
HXLINE( 116)									Float _hx_tmp1 = this->get_w();
HXDLIN( 116)									_hx_tmp = (_hx_tmp1 / ( (Float)(bmp->width) ));
            								}
HXDLIN( 116)								Float _hx_tmp1;
HXDLIN( 116)								if (this->autoHeight) {
HXLINE( 116)									_hx_tmp1 = ( (Float)(1) );
            								}
            								else {
HXLINE( 116)									Float _hx_tmp = this->get_h();
HXDLIN( 116)									_hx_tmp1 = (_hx_tmp / ( (Float)(bmp->height) ));
            								}
HXDLIN( 116)								mx->scale(_hx_tmp,_hx_tmp1);
            							}
            						}
HXDLIN( 116)						this->get_graphics()->beginBitmapFill(bmp,mx,false,this->smooth);
HXDLIN( 116)						 ::openfl::display::Graphics _hx_tmp = this->get_graphics();
HXDLIN( 116)						_hx_tmp->drawRect(( (Float)(0) ),( (Float)(0) ),(( (Float)(bmp->width) ) * mx->a),(( (Float)(bmp->height) ) * mx->d));
            					}
            					else {
HXLINE( 116)						this->get_graphics()->beginBitmapFill(bmp,null(),false,this->smooth);
HXDLIN( 116)						this->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(bmp->width) ),( (Float)(bmp->height) ));
            					}
HXDLIN( 116)					this->get_graphics()->endFill();
            				}
            			}
            		}
            		else {
HXLINE( 118)			this->super::refresh();
            		}
            	}


void Bmp_obj::_draw( ::openfl::display::BitmapData bmp){
            	HX_GC_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_129__draw)
HXLINE( 130)		this->get_graphics()->clear();
HXLINE( 133)		if (this->drawPortion) {
HXLINE( 134)			Float width;
HXDLIN( 134)			if (this->autoWidth) {
HXLINE( 134)				width = ( (Float)(bmp->width) );
            			}
            			else {
HXLINE( 137)				if ((this->_width > (bmp->width - this->xOffset))) {
HXLINE( 134)					width = ( (Float)((bmp->width - this->xOffset)) );
            				}
            				else {
HXLINE( 134)					width = this->_width;
            				}
            			}
HXLINE( 139)			Float height;
HXDLIN( 139)			if (this->autoHeight) {
HXLINE( 139)				height = ( (Float)(bmp->height) );
            			}
            			else {
HXLINE( 142)				if ((this->_height > (bmp->height - this->yOffset))) {
HXLINE( 139)					height = ( (Float)((bmp->height - this->yOffset)) );
            				}
            				else {
HXLINE( 139)					height = ( (Float)(::Std_obj::_hx_int(this->_height)) );
            				}
            			}
HXLINE( 146)			bool _hx_tmp;
HXDLIN( 146)			if (!((width <= 0))) {
HXLINE( 146)				_hx_tmp = (height <= 0);
            			}
            			else {
HXLINE( 146)				_hx_tmp = true;
            			}
HXDLIN( 146)			if (_hx_tmp) {
HXLINE( 147)				return;
            			}
            			else {
HXLINE( 150)				 ::openfl::geom::Matrix mx =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 154)				mx->translate(( (Float)(-(this->xOffset)) ),( (Float)(-(this->yOffset)) ));
HXLINE( 162)				this->get_graphics()->beginBitmapFill(bmp,mx,false,this->smooth);
HXLINE( 163)				this->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),width,height);
HXLINE( 164)				this->get_graphics()->endFill();
            			}
            		}
            		else {
HXLINE( 169)			if (this->stretch) {
HXLINE( 170)				 ::openfl::geom::Matrix mx =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 171)				if (this->stretch) {
HXLINE( 171)					if (this->keepAspect) {
HXLINE( 171)						Float scale;
HXDLIN( 171)						if (this->autoWidth) {
HXLINE( 171)							scale = ( (Float)(1) );
            						}
            						else {
HXLINE( 171)							Float scale1 = this->get_w();
HXDLIN( 171)							scale = (scale1 / ( (Float)(bmp->width) ));
            						}
HXDLIN( 171)						Float scale1;
HXDLIN( 171)						if (this->autoHeight) {
HXLINE( 171)							scale1 = ( (Float)(1) );
            						}
            						else {
HXLINE( 171)							Float scale = this->get_h();
HXDLIN( 171)							scale1 = (scale / ( (Float)(bmp->height) ));
            						}
HXDLIN( 171)						Float scale2 = ::Math_obj::min(scale,scale1);
HXDLIN( 171)						mx->scale(scale2,scale2);
            					}
            					else {
HXLINE( 171)						Float _hx_tmp;
HXDLIN( 171)						if (this->autoWidth) {
HXLINE( 171)							_hx_tmp = ( (Float)(1) );
            						}
            						else {
HXLINE( 171)							Float _hx_tmp1 = this->get_w();
HXDLIN( 171)							_hx_tmp = (_hx_tmp1 / ( (Float)(bmp->width) ));
            						}
HXDLIN( 171)						Float _hx_tmp1;
HXDLIN( 171)						if (this->autoHeight) {
HXLINE( 171)							_hx_tmp1 = ( (Float)(1) );
            						}
            						else {
HXLINE( 171)							Float _hx_tmp = this->get_h();
HXDLIN( 171)							_hx_tmp1 = (_hx_tmp / ( (Float)(bmp->height) ));
            						}
HXDLIN( 171)						mx->scale(_hx_tmp,_hx_tmp1);
            					}
            				}
HXLINE( 172)				this->get_graphics()->beginBitmapFill(bmp,mx,false,this->smooth);
HXLINE( 173)				 ::openfl::display::Graphics _hx_tmp = this->get_graphics();
HXDLIN( 173)				_hx_tmp->drawRect(( (Float)(0) ),( (Float)(0) ),(( (Float)(bmp->width) ) * mx->a),(( (Float)(bmp->height) ) * mx->d));
            			}
            			else {
HXLINE( 175)				this->get_graphics()->beginBitmapFill(bmp,null(),false,this->smooth);
HXLINE( 176)				this->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(bmp->width) ),( (Float)(bmp->height) ));
            			}
HXLINE( 179)			this->get_graphics()->endFill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bmp_obj,_draw,(void))

::String Bmp_obj::get_src(){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_194_get_src)
HXDLIN( 194)		return this->_src;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bmp_obj,get_src,return )

::String Bmp_obj::set_src(::String src){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_202_set_src)
HXLINE( 203)		if (::hx::IsNotNull( src )) {
HXLINE( 204)			this->_bitmapData = null();
            		}
HXLINE( 206)		return (this->_src = src);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bmp_obj,set_src,return )

 ::openfl::display::BitmapData Bmp_obj::get_bitmapData(){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_215_get_bitmapData)
HXDLIN( 215)		return this->_bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bmp_obj,get_bitmapData,return )

 ::openfl::display::BitmapData Bmp_obj::set_bitmapData( ::openfl::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_223_set_bitmapData)
HXLINE( 224)		if (::hx::IsNotNull( bitmapData )) {
HXLINE( 225)			this->_src = null();
            		}
HXLINE( 227)		return (this->_bitmapData = bitmapData);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bmp_obj,set_bitmapData,return )

bool Bmp_obj::set_autoSize(bool as){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_236_set_autoSize)
HXDLIN( 236)		return (this->autoWidth = (this->autoHeight = as));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bmp_obj,set_autoSize,return )

int Bmp_obj::set_xOffset(int x){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_244_set_xOffset)
HXLINE( 245)		this->drawPortion = true;
HXLINE( 246)		int _hx_tmp;
HXDLIN( 246)		if ((x >= 0)) {
HXLINE( 246)			_hx_tmp = x;
            		}
            		else {
HXLINE( 246)			_hx_tmp = 0;
            		}
HXDLIN( 246)		return (this->xOffset = _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bmp_obj,set_xOffset,return )

int Bmp_obj::set_yOffset(int y){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_253_set_yOffset)
HXLINE( 254)		this->drawPortion = true;
HXLINE( 255)		int _hx_tmp;
HXDLIN( 255)		if ((y >= 0)) {
HXLINE( 255)			_hx_tmp = y;
            		}
            		else {
HXLINE( 255)			_hx_tmp = 0;
            		}
HXDLIN( 255)		return (this->yOffset = _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bmp_obj,set_yOffset,return )

Float Bmp_obj::set_w(Float w){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_262_set_w)
HXLINE( 263)		this->autoWidth = false;
HXLINE( 264)		return this->super::set_w(w);
            	}


Float Bmp_obj::set_widthPt(Float wp){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_272_set_widthPt)
HXLINE( 273)		this->autoWidth = false;
HXLINE( 274)		return this->super::set_widthPt(wp);
            	}


Float Bmp_obj::set_heightPt(Float hp){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_282_set_heightPt)
HXLINE( 283)		this->autoHeight = false;
HXLINE( 284)		return this->super::set_heightPt(hp);
            	}


Float Bmp_obj::set_h(Float h){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_292_set_h)
HXLINE( 293)		this->autoHeight = false;
HXLINE( 294)		return this->super::set_h(h);
            	}


void Bmp_obj::_applyScalingToMx( ::openfl::geom::Matrix mx, ::openfl::display::BitmapData bmp, ::ru::stablex::ui::widgets::Bmp widget){
            	HX_STACKFRAME(&_hx_pos_31a8ee1cd20e96a6_62__applyScalingToMx)
HXDLIN(  62)		if (widget->stretch) {
HXLINE(  64)			if (widget->keepAspect) {
HXLINE(  66)				Float scale;
HXDLIN(  66)				if (widget->autoWidth) {
HXLINE(  66)					scale = ( (Float)(1) );
            				}
            				else {
HXLINE(  66)					Float scale1 = widget->get_w();
HXDLIN(  66)					scale = (scale1 / ( (Float)(bmp->width) ));
            				}
HXLINE(  67)				Float scale1;
HXDLIN(  67)				if (widget->autoHeight) {
HXLINE(  67)					scale1 = ( (Float)(1) );
            				}
            				else {
HXLINE(  67)					Float scale = widget->get_h();
HXDLIN(  67)					scale1 = (scale / ( (Float)(bmp->height) ));
            				}
HXLINE(  65)				Float scale2 = ::Math_obj::min(scale,scale1);
HXLINE(  69)				mx->scale(scale2,scale2);
            			}
            			else {
HXLINE(  73)				Float _hx_tmp;
HXDLIN(  73)				if (widget->autoWidth) {
HXLINE(  73)					_hx_tmp = ( (Float)(1) );
            				}
            				else {
HXLINE(  73)					Float _hx_tmp1 = widget->get_w();
HXDLIN(  73)					_hx_tmp = (_hx_tmp1 / ( (Float)(bmp->width) ));
            				}
HXLINE(  74)				Float _hx_tmp1;
HXDLIN(  74)				if (widget->autoHeight) {
HXLINE(  74)					_hx_tmp1 = ( (Float)(1) );
            				}
            				else {
HXLINE(  74)					Float _hx_tmp = widget->get_h();
HXDLIN(  74)					_hx_tmp1 = (_hx_tmp / ( (Float)(bmp->height) ));
            				}
HXLINE(  72)				mx->scale(_hx_tmp,_hx_tmp1);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Bmp_obj,_applyScalingToMx,(void))


::hx::ObjectPtr< Bmp_obj > Bmp_obj::__new() {
	::hx::ObjectPtr< Bmp_obj > __this = new Bmp_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Bmp_obj > Bmp_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Bmp_obj *__this = (Bmp_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Bmp_obj), true, "ru.stablex.ui.widgets.Bmp"));
	*(void **)__this = Bmp_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Bmp_obj::Bmp_obj()
{
}

void Bmp_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Bmp);
	HX_MARK_MEMBER_NAME(_src,"_src");
	HX_MARK_MEMBER_NAME(smooth,"smooth");
	HX_MARK_MEMBER_NAME(stretch,"stretch");
	HX_MARK_MEMBER_NAME(keepAspect,"keepAspect");
	HX_MARK_MEMBER_NAME(autoWidth,"autoWidth");
	HX_MARK_MEMBER_NAME(autoHeight,"autoHeight");
	HX_MARK_MEMBER_NAME(_bitmapData,"_bitmapData");
	HX_MARK_MEMBER_NAME(xOffset,"xOffset");
	HX_MARK_MEMBER_NAME(yOffset,"yOffset");
	HX_MARK_MEMBER_NAME(drawPortion,"drawPortion");
	 ::ru::stablex::ui::widgets::Widget_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Bmp_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_src,"_src");
	HX_VISIT_MEMBER_NAME(smooth,"smooth");
	HX_VISIT_MEMBER_NAME(stretch,"stretch");
	HX_VISIT_MEMBER_NAME(keepAspect,"keepAspect");
	HX_VISIT_MEMBER_NAME(autoWidth,"autoWidth");
	HX_VISIT_MEMBER_NAME(autoHeight,"autoHeight");
	HX_VISIT_MEMBER_NAME(_bitmapData,"_bitmapData");
	HX_VISIT_MEMBER_NAME(xOffset,"xOffset");
	HX_VISIT_MEMBER_NAME(yOffset,"yOffset");
	HX_VISIT_MEMBER_NAME(drawPortion,"drawPortion");
	 ::ru::stablex::ui::widgets::Widget_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Bmp_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_src() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_src") ) { return ::hx::Val( _src ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_draw") ) { return ::hx::Val( _draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_w") ) { return ::hx::Val( set_w_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_h") ) { return ::hx::Val( set_h_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"smooth") ) { return ::hx::Val( smooth ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stretch") ) { return ::hx::Val( stretch ); }
		if (HX_FIELD_EQ(inName,"xOffset") ) { return ::hx::Val( xOffset ); }
		if (HX_FIELD_EQ(inName,"yOffset") ) { return ::hx::Val( yOffset ); }
		if (HX_FIELD_EQ(inName,"refresh") ) { return ::hx::Val( refresh_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_src") ) { return ::hx::Val( get_src_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_src") ) { return ::hx::Val( set_src_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoWidth") ) { return ::hx::Val( autoWidth ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"keepAspect") ) { return ::hx::Val( keepAspect ); }
		if (HX_FIELD_EQ(inName,"autoHeight") ) { return ::hx::Val( autoHeight ); }
		if (HX_FIELD_EQ(inName,"bitmapData") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bitmapData() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_bitmapData") ) { return ::hx::Val( _bitmapData ); }
		if (HX_FIELD_EQ(inName,"drawPortion") ) { return ::hx::Val( drawPortion ); }
		if (HX_FIELD_EQ(inName,"set_xOffset") ) { return ::hx::Val( set_xOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_yOffset") ) { return ::hx::Val( set_yOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_widthPt") ) { return ::hx::Val( set_widthPt_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return ::hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_heightPt") ) { return ::hx::Val( set_heightPt_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_bitmapData") ) { return ::hx::Val( get_bitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bitmapData") ) { return ::hx::Val( set_bitmapData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Bmp_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"_applyScalingToMx") ) { outValue = _applyScalingToMx_dyn(); return true; }
	}
	return false;
}

::hx::Val Bmp_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_src(inValue.Cast< ::String >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_src") ) { _src=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"smooth") ) { smooth=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stretch") ) { stretch=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xOffset") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_xOffset(inValue.Cast< int >()) );xOffset=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yOffset") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_yOffset(inValue.Cast< int >()) );yOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoSize(inValue.Cast< bool >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoWidth") ) { autoWidth=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"keepAspect") ) { keepAspect=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoHeight") ) { autoHeight=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bitmapData") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bitmapData(inValue.Cast<  ::openfl::display::BitmapData >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_bitmapData") ) { _bitmapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawPortion") ) { drawPortion=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Bmp_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("src",e4,a6,57,00));
	outFields->push(HX_("_src",e5,eb,22,3f));
	outFields->push(HX_("smooth",2e,08,6b,07));
	outFields->push(HX_("stretch",05,3e,53,f6));
	outFields->push(HX_("keepAspect",3d,8c,45,d9));
	outFields->push(HX_("autoSize",d0,8f,79,2f));
	outFields->push(HX_("autoWidth",17,f4,6d,a8));
	outFields->push(HX_("autoHeight",b6,18,17,6e));
	outFields->push(HX_("bitmapData",b9,b5,c0,33));
	outFields->push(HX_("_bitmapData",d8,82,4a,06));
	outFields->push(HX_("xOffset",2b,b6,e3,12));
	outFields->push(HX_("yOffset",ec,2c,79,3c));
	outFields->push(HX_("drawPortion",43,35,f4,cc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Bmp_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Bmp_obj,_src),HX_("_src",e5,eb,22,3f)},
	{::hx::fsBool,(int)offsetof(Bmp_obj,smooth),HX_("smooth",2e,08,6b,07)},
	{::hx::fsBool,(int)offsetof(Bmp_obj,stretch),HX_("stretch",05,3e,53,f6)},
	{::hx::fsBool,(int)offsetof(Bmp_obj,keepAspect),HX_("keepAspect",3d,8c,45,d9)},
	{::hx::fsBool,(int)offsetof(Bmp_obj,autoWidth),HX_("autoWidth",17,f4,6d,a8)},
	{::hx::fsBool,(int)offsetof(Bmp_obj,autoHeight),HX_("autoHeight",b6,18,17,6e)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(Bmp_obj,_bitmapData),HX_("_bitmapData",d8,82,4a,06)},
	{::hx::fsInt,(int)offsetof(Bmp_obj,xOffset),HX_("xOffset",2b,b6,e3,12)},
	{::hx::fsInt,(int)offsetof(Bmp_obj,yOffset),HX_("yOffset",ec,2c,79,3c)},
	{::hx::fsBool,(int)offsetof(Bmp_obj,drawPortion),HX_("drawPortion",43,35,f4,cc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Bmp_obj_sStaticStorageInfo = 0;
#endif

static ::String Bmp_obj_sMemberFields[] = {
	HX_("_src",e5,eb,22,3f),
	HX_("smooth",2e,08,6b,07),
	HX_("stretch",05,3e,53,f6),
	HX_("keepAspect",3d,8c,45,d9),
	HX_("autoWidth",17,f4,6d,a8),
	HX_("autoHeight",b6,18,17,6e),
	HX_("_bitmapData",d8,82,4a,06),
	HX_("xOffset",2b,b6,e3,12),
	HX_("yOffset",ec,2c,79,3c),
	HX_("drawPortion",43,35,f4,cc),
	HX_("refresh",db,d9,20,ed),
	HX_("_draw",e3,47,81,f5),
	HX_("get_src",7b,6f,cc,26),
	HX_("set_src",87,00,ce,19),
	HX_("get_bitmapData",02,3e,b6,a9),
	HX_("set_bitmapData",76,26,d6,c9),
	HX_("set_autoSize",4d,67,8c,f9),
	HX_("set_xOffset",4e,1d,4b,a3),
	HX_("set_yOffset",0f,94,e0,cc),
	HX_("set_w",5a,9b,2f,7a),
	HX_("set_widthPt",cd,70,68,c1),
	HX_("set_heightPt",48,2d,5e,fd),
	HX_("set_h",4b,9b,2f,7a),
	::String(null()) };

::hx::Class Bmp_obj::__mClass;

static ::String Bmp_obj_sStaticFields[] = {
	HX_("_applyScalingToMx",3e,43,ae,af),
	::String(null())
};

void Bmp_obj::__register()
{
	Bmp_obj _hx_dummy;
	Bmp_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ru.stablex.ui.widgets.Bmp",88,4a,6e,f6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Bmp_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Bmp_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Bmp_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Bmp_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bmp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bmp_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ru
} // end namespace stablex
} // end namespace ui
} // end namespace widgets
