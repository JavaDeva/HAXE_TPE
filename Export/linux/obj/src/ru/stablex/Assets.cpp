// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_ru_stablex_Assets
#include <ru/stablex/Assets.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_3c363502befc86fc_23___default_getBitmapData,"ru.stablex.Assets","__default_getBitmapData",0x85bf8e02,"ru.stablex.Assets.__default_getBitmapData","ru/stablex/Assets.hx",23,0xd2a01efd)
HX_LOCAL_STACK_FRAME(_hx_pos_3c363502befc86fc_32___default_getBytes,"ru.stablex.Assets","__default_getBytes",0x41ba14c2,"ru.stablex.Assets.__default_getBytes","ru/stablex/Assets.hx",32,0xd2a01efd)
HX_LOCAL_STACK_FRAME(_hx_pos_3c363502befc86fc_42_getFont,"ru.stablex.Assets","getFont",0xa80685f6,"ru.stablex.Assets.getFont","ru/stablex/Assets.hx",42,0xd2a01efd)
HX_LOCAL_STACK_FRAME(_hx_pos_3c363502befc86fc_51___default_getSound,"ru.stablex.Assets","__default_getSound",0x04ee9926,"ru.stablex.Assets.__default_getSound","ru/stablex/Assets.hx",51,0xd2a01efd)
HX_LOCAL_STACK_FRAME(_hx_pos_3c363502befc86fc_60___default_getText,"ru.stablex.Assets","__default_getText",0xd3e1d836,"ru.stablex.Assets.__default_getText","ru/stablex/Assets.hx",60,0xd2a01efd)
namespace ru{
namespace stablex{

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

void *Assets_obj::_hx_vtable = 0;

Dynamic Assets_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Assets_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x50e9fa39;
}

HX_BEGIN_DEFAULT_FUNC(__default_getBitmapData,Assets_obj)
 ::openfl::display::BitmapData _hx_run(::String src,::hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_3c363502befc86fc_23___default_getBitmapData)
HXDLIN(  23)		return ::openfl::utils::Assets_obj::getBitmapData(src,useCache);
            	}
HX_END_LOCAL_FUNC2(return )
HX_END_DEFAULT_FUNC

::Dynamic Assets_obj::getBitmapData;

HX_BEGIN_DEFAULT_FUNC(__default_getBytes,Assets_obj)
 ::openfl::utils::ByteArrayData _hx_run(::String src){
            	HX_STACKFRAME(&_hx_pos_3c363502befc86fc_32___default_getBytes)
HXDLIN(  32)		return ::openfl::utils::Assets_obj::getBytes(src);
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic Assets_obj::getBytes;

 ::openfl::text::Font Assets_obj::getFont(::String src){
            	HX_STACKFRAME(&_hx_pos_3c363502befc86fc_42_getFont)
HXDLIN(  42)		return ::openfl::utils::Assets_obj::getFont(src,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getFont,return )

HX_BEGIN_DEFAULT_FUNC(__default_getSound,Assets_obj)
 ::openfl::media::Sound _hx_run(::String src){
            	HX_STACKFRAME(&_hx_pos_3c363502befc86fc_51___default_getSound)
HXDLIN(  51)		return ::openfl::utils::Assets_obj::getSound(src,null());
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic Assets_obj::getSound;

HX_BEGIN_DEFAULT_FUNC(__default_getText,Assets_obj)
::String _hx_run(::String src){
            	HX_STACKFRAME(&_hx_pos_3c363502befc86fc_60___default_getText)
HXDLIN(  60)		return ::openfl::utils::Assets_obj::getText(src);
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic Assets_obj::getText;


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getText") ) { outValue = ( getText ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = ( getBytes ); return true; }
		if (HX_FIELD_EQ(inName,"getSound") ) { outValue = ( getSound ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { outValue = ( getBitmapData ); return true; }
	}
	return false;
}

bool Assets_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getText") ) { getText=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getBytes") ) { getBytes=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"getSound") ) { getSound=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { getBitmapData=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Assets_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Assets_obj::getBitmapData,HX_("getBitmapData",ef,11,33,90)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Assets_obj::getBytes,HX_("getBytes",f5,17,6f,1d)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Assets_obj::getSound,HX_("getSound",59,9c,a3,e0)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Assets_obj::getText,HX_("getText",63,7c,7c,1f)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::getBitmapData,"getBitmapData");
	HX_MARK_MEMBER_NAME(Assets_obj::getBytes,"getBytes");
	HX_MARK_MEMBER_NAME(Assets_obj::getSound,"getSound");
	HX_MARK_MEMBER_NAME(Assets_obj::getText,"getText");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::getBitmapData,"getBitmapData");
	HX_VISIT_MEMBER_NAME(Assets_obj::getBytes,"getBytes");
	HX_VISIT_MEMBER_NAME(Assets_obj::getSound,"getSound");
	HX_VISIT_MEMBER_NAME(Assets_obj::getText,"getText");
};

#endif

::hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_("getBitmapData",ef,11,33,90),
	HX_("getBytes",f5,17,6f,1d),
	HX_("getFont",85,0d,43,16),
	HX_("getSound",59,9c,a3,e0),
	HX_("getText",63,7c,7c,1f),
	::String(null())
};

void Assets_obj::__register()
{
	Assets_obj _hx_dummy;
	Assets_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ru.stablex.Assets",df,7f,51,8e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &Assets_obj::__SetStatic;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assets_obj::__boot()
{
	getBitmapData = new __default_getBitmapData;

	getBytes = new __default_getBytes;

	getSound = new __default_getSound;

	getText = new __default_getText;

}

} // end namespace ru
} // end namespace stablex
