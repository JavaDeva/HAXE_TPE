// Generated by Haxe 4.1.1
#ifndef INCLUDED_motion_easing_Bounce
#define INCLUDED_motion_easing_Bounce

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(motion,easing,Bounce)
HX_DECLARE_CLASS2(motion,easing,IEasing)

namespace motion{
namespace easing{


class HXCPP_CLASS_ATTRIBUTES Bounce_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Bounce_obj OBJ_;
		Bounce_obj();

	public:
		enum { _hx_ClassId = 0x6396c3c9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="motion.easing.Bounce")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"motion.easing.Bounce"); }

		inline static ::hx::ObjectPtr< Bounce_obj > __new() {
			::hx::ObjectPtr< Bounce_obj > __this = new Bounce_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Bounce_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Bounce_obj *__this = (Bounce_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Bounce_obj), false, "motion.easing.Bounce"));
			*(void **)__this = Bounce_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Bounce_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Bounce",a8,f9,b1,9a); }

		static void __boot();
		static ::Dynamic easeIn;
		static ::Dynamic easeInOut;
		static ::Dynamic easeOut;
};

} // end namespace motion
} // end namespace easing

#endif /* INCLUDED_motion_easing_Bounce */ 
