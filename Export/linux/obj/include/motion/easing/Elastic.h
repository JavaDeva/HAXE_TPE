// Generated by Haxe 4.1.1
#ifndef INCLUDED_motion_easing_Elastic
#define INCLUDED_motion_easing_Elastic

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(motion,easing,Elastic)
HX_DECLARE_CLASS2(motion,easing,IEasing)

namespace motion{
namespace easing{


class HXCPP_CLASS_ATTRIBUTES Elastic_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Elastic_obj OBJ_;
		Elastic_obj();

	public:
		enum { _hx_ClassId = 0x6d09d2ac };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="motion.easing.Elastic")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"motion.easing.Elastic"); }

		inline static ::hx::ObjectPtr< Elastic_obj > __new() {
			::hx::ObjectPtr< Elastic_obj > __this = new Elastic_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Elastic_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Elastic_obj *__this = (Elastic_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Elastic_obj), false, "motion.easing.Elastic"));
			*(void **)__this = Elastic_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Elastic_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Elastic",b5,29,0e,8a); }

		static void __boot();
		static ::Dynamic easeIn;
		static ::Dynamic easeInOut;
		static ::Dynamic easeOut;
		static ::Dynamic easeInWith(Float a,Float p);
		static ::Dynamic easeInWith_dyn();

		static ::Dynamic easeInOutWith(Float a,Float p);
		static ::Dynamic easeInOutWith_dyn();

		static ::Dynamic easeOutWith(Float a,Float p);
		static ::Dynamic easeOutWith_dyn();

};

} // end namespace motion
} // end namespace easing

#endif /* INCLUDED_motion_easing_Elastic */ 
